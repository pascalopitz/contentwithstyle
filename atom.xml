<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Content with Style</title>
  <link href="http://contentwithstyle.pascalopitz.com/atom.xml" rel="self"/>
  <link href="http://contentwithstyle.pascalopitz.com/"/>
  <updated>2011-03-19T21:27:58+00:00</updated>
  <id>http://contentwithstyle.pascalopitz.com/</id>

    <entry>
      <title>Genstatic, my first sip of coffee</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/genstatic-my-sip-try-of-coffee/index.html"/>
      <updated>2011-03-06T06:16:54+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/genstatic-my-sip-try-of-coffee/genstatic-my-sip-try-of-coffee</id>
      <content type="html">&lt;p&gt;
Having to spend more time at home means I can try out things. I know I'm late to the party, but I really wanted to have a go at using &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;coffeescript&lt;/a&gt;. Sceptical at first, I really got to like it and quickly threw together a little static site generator: &lt;a href=&quot;https://github.com/pascalopitz/genstatic&quot;&gt;genstatic&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I had seen .coffee files in many node projects lately, but it was a little &lt;a href=&quot;http://twitter.com/#!/pascalopitz/status/41121018554753024&quot;&gt;twitter converstaion&lt;/a&gt; with our own Mike Stenhouse of course that finally brought me to taking a closer look.
&lt;/p&gt;

&lt;p&gt;
I had to do a pretty tedious static HTML job that didn't fit the bog standard blog structure, so I decided to roll my little static site generator, and that's how genstatic came about.&lt;/p&gt;

&lt;h2&gt;Coffescript creates Javascript&lt;/h2&gt;

&lt;p&gt;The first way I used coffee scrip was to compile it down to javascript, then run javascript in node. For this I'd have a a folder called &lt;code&gt;./lib&lt;/code&gt; and a folder called &lt;code&gt;./src&lt;/code&gt;. Then you run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
coffee -w -c -o ./lib ./src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
This will watch the files in &lt;code&gt;./src&lt;/code&gt; and automatically compile them down to js into the &lt;code&gt;./lib&lt;/code&gt; folder.
&lt;/p&gt;

&lt;p&gt;
I figure that with today's requirement of minification and concatination most people have to have some sort of compilation step in their deployment process anyway. Using coffee script could also be used in that. The &lt;code&gt;-j&lt;/code&gt; flag will join scripts together for you as well, so in that respect it might make testing even easier.
&lt;/p&gt;

&lt;h2&gt;Coffescript in node&lt;/h2&gt;

&lt;p&gt;While the above is great, in node we even can use coffeescript at runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var coffee = require('coffee-script');
require('my.coffee');
str = coffee.compile(mystr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very useful of course, and I have made good use of it in genstatic where you define meta stuff and helpers in coffeescript as well. These will then be read into strings and executed via node's brilliant &lt;code&gt;vm.runInNewContext()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;Having this little go my initial scepticism vanished pretty quickly and I think I'll use it from now on where ever I can.&lt;/p&gt;

&lt;p&gt;If you want to see coffeescript in action, go to the &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;coffeescript project pages&lt;/a&gt; or clone the git of &lt;a href=&quot;https://github.com/pascalopitz/genstatic&quot;&gt;genstatic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course if you need to generate a static site, maybe give genstatic a go and let me know how it worked for you. A simple &lt;code&gt;npm install genstatic&lt;/code&gt; and you should be on your way.&lt;/p&gt;

&lt;p&gt;So there you have it: genstatic, my first sip of coffee&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Express.js Route Middleware</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/expressjs-route-middleware/index.html"/>
      <updated>2011-01-18T09:12:07+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/expressjs-route-middleware/expressjs-route-middleware</id>
      <content type="html">&lt;p&gt;I have just read the about the &lt;a href=&quot;http://expressjs.com/guide.html#Route-Middleware&quot;&gt;Route Middleware&lt;/a&gt; of &lt;a href=&quot;http://expressjs.com&quot;&gt;express.js&lt;/a&gt;, and it already helped me to get rid of about 100 lines of code.&lt;/p&gt;

&lt;p&gt;This approach is really useful for managing permission and global objects, but at the same time so much more neat than the init() method in the Zend Framework Controllers.&lt;/p&gt;

&lt;p&gt;Lovin it!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>buggy behaviour of parent:: in PHP 5.3.3</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/behaviour-of-parent-in-php-533/index.html"/>
      <updated>2010-12-18T18:26:09+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/behaviour-of-parent-in-php-533/behaviour-of-parent-in-php-533</id>
      <content type="html">&lt;p&gt;So, this app I hadn't been looking at in a few months did not work at all. I traced the bug down to a method that itself called a parent method. The parent only contains __call and __callStatic methods, and for some reason __callStatic was called, although the class it was called from was an object instance.&lt;/p&gt;
&lt;p&gt;To isolate the case I used the code example &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.methods&quot;&gt;provided in the PHP manual&lt;/a&gt;, extended it and ooo'd and ahh'd at the result.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;?php
class MethodTest {
    public function __call($name, $arguments) {
        // Note: value of $name is case sensitive.
        echo &amp;quot;Calling object method &amp;#x27;$name&amp;#x27; &amp;quot;
             . implode(&amp;#x27;, &amp;#x27;, $arguments). &amp;quot;\n&amp;quot;;
    }

    public static function __callStatic($name, $arguments) {
        // Note: value of $name is case sensitive.
        echo &amp;quot;Calling static method &amp;#x27;$name&amp;#x27; &amp;quot;
             . implode(&amp;#x27;, &amp;#x27;, $arguments). &amp;quot;\n&amp;quot;;
    }
}

class MethodTestExtended extends MethodTest {
    public function runExtendedTest($var){
        parent::runTest($var);
    }
}

$obj = new MethodTest;
$obj-&amp;gt;runTest(&amp;#x27;in object context&amp;#x27;);
//Calling object method &amp;#x27;runTest&amp;#x27; in object context
MethodTest::runTest(&amp;#x27;in static context&amp;#x27;);
//Calling static method &amp;#x27;runTest&amp;#x27; in static context

$obj = new MethodTestExtended;
$obj-&amp;gt;runTest(&amp;#x27;in object context&amp;#x27;);
//Calling object method &amp;#x27;runTest&amp;#x27; in object context
MethodTestExtended::runTest(&amp;#x27;in static context&amp;#x27;);
//Calling static method &amp;#x27;runTest&amp;#x27; in static context

$obj = new MethodTestExtended;
$obj-&amp;gt;runExtendedTest(&amp;#x27;in object context&amp;#x27;);
// PHP 5.3.3: Calling object method &amp;#x27;runTest&amp;#x27; in static context
// __callStatic is called, and $this is not available.
// PHP 5.3.4: Calling object method &amp;#x27;runTest&amp;#x27; in object context
// __call is called, and $this is available.
MethodTestExtended::runExtendedTest(&amp;#x27;in static context&amp;#x27;);
//Calling static method &amp;#x27;runTest&amp;#x27; in static context, with a
//Strict Standards warning, though (as the method isn&amp;#x27;t declared static)

&lt;/pre&gt;
&lt;p&gt;The call is always routed via __callStatic, when called from within the extending class, regardless if it's in a static or object context, but not so when called directly.&lt;/p&gt;
&lt;p&gt;Not believing my eyes, I started searching more creatively, and found that I was not the only one complaining about it; and luckily &lt;a href=&quot;http://www.serverphorums.com/read.php?7,220473&quot;&gt;the right people thought so, too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It so turns out that this behaviour was introduced in PHP 5.3.3, as part of another &lt;a href=&quot;http://bugs.php.net/51176&quot;&gt;bug dealing with the opposite desired behaviour&lt;/a&gt; (calling class methods statically when in an object context), and removed again in PHP 5.3.4, smelling &lt;a href=&quot;http://bugs.php.net/52713&quot;&gt;a little bit like a bug&lt;/a&gt;. A simple sudo port upgrade php5 did the job, bumping my install up to 5.3.4, and everything worked as intended. Yay!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>merry xmas everyone v0.2</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/merry-xmas-everyone-v02/index.html"/>
      <updated>2010-12-08T14:04:20+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/merry-xmas-everyone-v02/merry-xmas-everyone-v02</id>
      <content type="html">&lt;p&gt;
Before the year will come to an end and we're all off to stuff ourselves with chocolate, I just wanted to wish everyone a &lt;a href=&quot;javascript:(function(){var k=document.getElementsByTagName('body')[0];var i=document.createElement('canvas');var p=i.getContext('2d');var j,g=150,o=1,l,f,d;i.style.cursor='pointer';i.style.zIndex='999999';i.style.top=0;i.style.left=0;i.style.position='absolute';k.appendChild(i);i.onclick=function(){i.parentNode.removeChild(i)};window.onresize=function(){window.clearTimeout(d);n()};function n(){l=window.innerWidth-20;f=window.innerHeight-20;i.setAttribute('width',l);i.setAttribute('height',f);j=[];for(var b=0;b!=g;b++){j.push({x:Math.random()*l,y:((Math.random()*f)-o),})}a()}function e(b,c){p.fillStyle='#ffffff';p.beginPath();p.arc(b,c,5,0,Math.PI*2,true);p.closePath();p.fill()}function m(b,c){p.fillStyle='white';p.strokeStyle='black';p.globalAlpha='1.0';p.lineWidth='1';p.lineCap='butt';p.lineJoin='round';p.mitterLimit='1';p.font='normal normal 12 Courier';p.fillStyle='#cf7122';p.beginPath();p.moveTo(190.5+b,110+c);p.bezierCurveTo(212.76+b,137.04+c,228.7+b,183.28+c,201+b,214.5+c);p.bezierCurveTo(177.76+b,240.7+c,137.26+b,243.54+c,115+b,216.5+c);p.bezierCurveTo(92.74+b,189.46+c,95.24+b,144.54+c,117.5+b,117.5+c);p.bezierCurveTo(139.76+b,90.46+c,168.24+b,82.96+c,190.5+b,110+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#dd381b';p.beginPath();p.moveTo(164+b,125+c);p.bezierCurveTo(189.77+b,161.32+c,206.77+b,222.68+c,181+b,259+c);p.bezierCurveTo(155.23+b,295.32+c,77.77+b,296.32+c,52+b,260+c);p.bezierCurveTo(26.23+b,223.68+c,36.21+b,158.1+c,66+b,125+c);p.bezierCurveTo(93+b,95+c,138.23+b,88.68+c,164+b,125+c);p.closePath();p.fill();p.fillStyle='#f8d5a1';p.beginPath();p.moveTo(48+b,169.5+c);p.bezierCurveTo(52.06+b,174.75+c,44.75+b,178+c,45.82+b,190.33+c);p.bezierCurveTo(46.7+b,200.46+c,38.15+b,193.63+c,33.92+b,188.06+c);p.bezierCurveTo(29.69+b,182.48+c,29.69+b,173.45+c,33.92+b,167.88+c);p.bezierCurveTo(38.15+b,162.3+c,43.94+b,164.25+c,48+b,169.5+c);p.closePath();p.fill();p.beginPath();p.moveTo(184.25+b,209+c);p.bezierCurveTo(179.33+b,204.25+c,187.98+b,205.19+c,186.25+b,190.5+c);p.bezierCurveTo(184.87+b,178.73+c,189.51+b,181.16+c,193.03+b,186.04+c);p.bezierCurveTo(196.56+b,190.93+c,197.1+b,199.29+c,194.24+b,204.71+c);p.bezierCurveTo(191.38+b,210.14+c,189.17+b,213.75+c,184.25+b,209+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#ffd5a2';p.beginPath();p.moveTo(142.82+b,38.47+c);p.bezierCurveTo(160.39+b,56.44+c,160.39+b,85.56+c,142.82+b,103.53+c);p.bezierCurveTo(125.25+b,121.49+c,96.75+b,121.49+c,79.18+b,103.53+c);p.bezierCurveTo(61.61+b,85.56+c,61.61+b,56.44+c,79.18+b,38.47+c);p.bezierCurveTo(96.75+b,20.51+c,125.25+b,20.51+c,142.82+b,38.47+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.strokeStyle='#000000';p.lineWidth='1.000000';p.lineJoin='miter';p.beginPath();p.moveTo(-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.closePath();p.stroke();p.fillStyle='#4f4f4f';p.lineWidth='1';p.lineJoin='round';p.beginPath();p.moveTo(100.03+b,54.81+c);p.bezierCurveTo(101.59+b,56.42+c,101.59+b,59.03+c,100.03+b,60.64+c);p.bezierCurveTo(98.47+b,62.25+c,95.93+b,62.25+c,94.37+b,60.64+c);p.bezierCurveTo(92.81+b,59.03+c,92.81+b,56.42+c,94.37+b,54.81+c);p.bezierCurveTo(95.93+b,53.2+c,98.47+b,53.2+c,100.03+b,54.81+c);p.closePath();p.fill();p.beginPath();p.moveTo(128.83+b,54.81+c);p.bezierCurveTo(130.39+b,56.42+c,130.39+b,59.03+c,128.83+b,60.64+c);p.bezierCurveTo(127.27+b,62.25+c,124.73+b,62.25+c,123.17+b,60.64+c);p.bezierCurveTo(121.61+b,59.03+c,121.61+b,56.42+c,123.17+b,54.81+c);p.bezierCurveTo(124.73+b,53.2+c,127.27+b,53.2+c,128.83+b,54.81+c);p.closePath();p.fill();p.fillStyle='#ffffff';p.beginPath();p.moveTo(135.06+b,89.53+c);p.bezierCurveTo(142.85+b,107.86+c,130.06+b,138.27+c,123.51+b,157.06+c);p.bezierCurveTo(110.97+b,192.98+c,111.61+b,192.98+c,95.27+b,157.06+c);p.bezierCurveTo(87.02+b,138.91+c,77.83+b,108.48+c,85.62+b,90.14+c);p.bezierCurveTo(93.42+b,71.81+c,127.26+b,71.19+c,135.06+b,89.53+c);p.closePath();p.fill();p.fillStyle='#4f4f4f';p.beginPath();p.moveTo(117.93+b,97.68+c);p.bezierCurveTo(122.03+b,95.92+c,122.03+b,93.08+c,117.93+b,91.32+c);p.bezierCurveTo(113.82+b,89.56+c,107.18+b,89.56+c,103.07+b,91.32+c);p.bezierCurveTo(98.97+b,93.08+c,98.97+b,95.92+c,103.07+b,97.68+c);p.bezierCurveTo(107.18+b,99.44+c,113.82+b,99.44+c,117.93+b,97.68+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#dc381b';p.beginPath();p.moveTo(127.25+b,12.09+c);p.bezierCurveTo(146.48+b,27.35+c,158.99+b,59.74+c,147+b,52.5+c);p.bezierCurveTo(123+b,38+c,92+b,40+c,72.5+b,54.5+c);p.bezierCurveTo(65.64+b,59.6+c,77+b,29.5+c,89.5+b,16+c);p.bezierCurveTo(103.44+b,0.94+c,109.5+b,-2+c,127.25+b,12.09+c);p.closePath();p.fill()}function a(){p.clearRect(0,0,l,f);m((l/2)-120,(f/2)-150);for(var b in j){var c=j[b];c.y+=o;if(c.y&gt;f){c.y=-10;c.x=Math.random()*l}e(c.x,c.y)}d=window.setTimeout(a,20)}n()})();&quot;&gt;merry merry christmas&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Use the above link as bookmarklet, if you want. If you wonder how this works, here's a &lt;a href=&quot;https://gist.github.com/733311&quot;&gt;gist of the non-compressed version&lt;/a&gt;&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>jQuery clickable percentage bars</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/jquery-clickable-percentage-bars/index.html"/>
      <updated>2010-12-03T11:50:10+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/jquery-clickable-percentage-bars/jquery-clickable-percentage-bars</id>
      <content type="html">&lt;p&gt;Just a little script I have been coding up to deal with input fields that represent a percentage value. See &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/percentage/index.html&quot;&gt;the demo&lt;/a&gt; or get the &lt;a href=&quot;https://github.com/pascalopitz/jquery-percentage&quot;&gt;code on github&lt;/a&gt;. Enjoy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I modified the code and moved it from a gist into a public repo on &lt;a href=&quot;https://github.com/pascalopitz/jquery-percentage&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
(function(){
    var _self = this;

    function render(conf, val) {
        var elems = this;

        if(conf == 'destroy') {
            $(elems).each(function() {
                $(this).show();

                if(this.percentage) {
                    $(this.percentage).remove();
                }
            })
            return elems;
        }

        var defaults = {
            width: 200,
            height: 15,
            border: '1px solid #000000',
            color: '#cc0000',
            background: '#ffffff',
            clickable: true,
            classname: 'percentage',
            display: 'inline-block'
        };

        if(conf == undefined) {
            conf = defaults;
        } else {
            for(i in defaults) {
                if(conf[i] == undefined) {
                    conf[i] = defaults[i];
                }
            }
        }

        function getLeft(newVal) {
            return Math.floor((conf.width * -1) + (conf.width / 100 * newVal))
        }

        function updateElem(elem, val) {
            if($(elem).is('textarea,input,select')) {
                $(elem)
                    .attr('value', val)
                    .val(val)
                    .attr('title', val + '%')
                    ;
            } else {
                $(elem)
                    .text(val + '%')
                    ;
            }
        }

        if(conf == 'set') {
            $(elems).each(function() {
                var elem = this;
                conf = elem.percentage_conf;
                updateElem(elem, val);
                $(elem.percentage).find('div').css('left', getLeft(val));
            });
            return elems;
        }

        $(elems).each(function() {
            var elem = this;
            var bar = $('&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;');
            var inner = $('&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;');

            var percent;
            var hasValue;

            if($(elem).is('textarea,input,select')) {
                percent = $(elem).val();
                hasValue = true;
            } else {
                percent = parseInt($(elem).text().replace('%', ''));
                hasValue = false;
            }

            function handleClick(e) {
                var p = $(this).offset();
                var percent = Math.ceil((e.clientX - p.left) / (conf.width / 100));

                updateElem(elem, percent);
                $(elem).trigger('clickupdate');

                $(inner)
                    .css('left', getLeft(percent))
                    ;

                return false;
            }

            $(bar)
                .attr('title', percent + '%')
                .css('display', conf.display)
                .css('border', conf.border)
                .css('background', conf.background)
                .css('position', 'relative')
                .css('overflow', 'hidden')
                .css('width',  conf.width)
                .css('height', conf.height)
                ;

            if(conf.clickable) {
                $(bar).click(handleClick);
            }

            if(conf.classname) {
                $(bar).addClass(conf.classname);
            }

            $(inner)
                .css('background', conf.color)
                .css('position', 'absolute')
                .css('top', 0)
                .css('left', getLeft(percent))
                .css('width',  conf.width)
                .css('height', conf.height)
                .appendTo(bar)
                ;

            $(elem)
                .hide()
                .after(bar)
                ;

            this.percentage = bar;
            this.percentage_conf = conf;
        });

        return elems;
    }

    jQuery.fn.percentage = function() {
        render.apply(this, arguments);
    };
})();
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Debug your node.js with node-inspector!</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/debug-your-node-js-with-node-inspector/index.html"/>
      <updated>2010-11-29T12:36:40+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/debug-your-node-js-with-node-inspector/debug-your-node-js-with-node-inspector</id>
      <content type="html">&lt;p&gt;If you haven't tried it yet, drop everything and do it now. You're only one simple npm install away from step by step debugging and much more in any webkit browser.&lt;/p&gt;

&lt;p&gt;Visit node-inspector on &lt;a href=&quot;https://github.com/dannycoates/node-inspector&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There's some neat youtube video that should give you a little overview:&lt;/p&gt;

&lt;p&gt;
&lt;object type=&quot;application/x-shockwave-flash&quot; style=&quot;width:480px; height:385px;&quot; data=&quot;http://www.youtube.com/v/AOnK3NVnxL8?fs=1&amp;amp;hl=en_US&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/AOnK3NVnxL8?fs=1&amp;amp;hl=en_US&quot; /&gt;&lt;/object&gt;
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Callback bonanza - linearising asynchronous calls</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/callback-bonanza---linearising-asynchronous-calls/index.html"/>
      <updated>2010-11-15T07:40:01+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/callback-bonanza---linearising-asynchronous-calls/callback-bonanza---linearising-asynchronous-calls</id>
      <content type="html">&lt;p&gt;
I am coding in node.js at the moment, and one thing drives me mad:
The constant need to nest or pass callbacks.
So I did a little research on some libraries that help.
&lt;/p&gt;

&lt;p&gt;
Two libraries in particular seemed to do what I was looking for: &lt;a href=&quot;https://github.com/caolan&quot;&gt;caolan's&lt;/a&gt; &lt;a href=&quot;https://github.com/caolan/async&quot;&gt;async&lt;/a&gt; and &lt;a href=&quot;https://github.com/creationix&quot;&gt;creatonix&lt;/a&gt; &lt;a href=&quot;https://github.com/creationix/step&quot;&gt;step&lt;/a&gt;.

Both provide similar interfaces to end the callback bonanza.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/pascalopitz/async_experiments&quot;&gt;little experiments on github&lt;/a&gt;, that show how those two libraries can be used.&lt;/p&gt;
</content>
    </entry>

    <entry>
      <title>Reconnecting</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/reconnecting-with-twitter-delicious-and-github/index.html"/>
      <updated>2010-11-11T08:33:46+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/reconnecting-with-twitter-delicious-and-github/reconnecting-with-twitter-delicious-and-github</id>
      <content type="html">&lt;p&gt;Earlier this week I read this &lt;a href=&quot;http://techcrunch.com/2010/11/09/why-is-quora-mass-creating-twitter-accounts-on-mechanical-turk/&quot;&gt;gossip about Quora mass-installing twitter accounts&lt;/a&gt;, and they responded by saying that &quot;Quora is looking at using Twitter as an alternative for topic RSS feeds&quot;. Hmmmm, interesting. Can we try that, too?&lt;/p&gt;

&lt;h2&gt;Twitter&lt;/h2&gt;
&lt;p&gt;Let's ignore the mass-account spamming for now, as people said in the techcrunch comments, one could use lists or hashtags and such. We're &lt;a title=&quot;Content with Style on Twitter&quot; href=&quot;http://twitter.com/contentwstyle&quot;&gt;already on twitter&lt;/a&gt;, and &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/cws-blog-posts-now-twitter&quot;&gt;have the blog already hooked up&lt;/a&gt; (&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/using-zendclienttwitter-with-oauth-and-a-single-access-token&quot;&gt;twice!&lt;/a&gt;), but now I'd like to utilize twitter further:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every reply to a CwS generated tweet should be treated similar to a comment&lt;/li&gt;
&lt;li&gt;Every retweet of a CwS generated tweet should be treated similar to a pingback or trackback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we don't show pingbacks/trackbacks anyway, and I doubt we will show RTs publicly in detail, but it'd be nice to see them in some shape or form, maybe as the well-known &quot;Retweeted 63412363 times&quot;.&lt;/p&gt;
&lt;p&gt;But pulling the replies into the conversation, that might be something. It short, and might take away a bit from the linearity of a single comments stream, but that doesn't mean it's lesser content. Actually, if you want your voice to be heard as a commenter, twitter is a much better platform than most sites could ever be.&lt;/p&gt;

&lt;h2&gt;Del.icio.us&lt;/h2&gt;
&lt;p&gt;Again, this is building on top of something we have already integrated in part. On your right to this article on our site you can see the &quot;elsewhere&quot; feed, which is our joint bookmark feed from del.icio.us. Wouldn't it be nice if we added ourselves to it (yes yes, and filter it back out on the site, because you don't need to see it twice), so it comes up on del.icio.us once we publish a post, rather than wait until you or our other reader that uses del.icio.us decide to bookmark it? We could also suggest the tags ourselves, given that we've wanted to tag our posts on our list for the latter part of this decade!&lt;/p&gt;

&lt;h2&gt;Github&lt;/h2&gt;
&lt;p&gt;In the end this is a tech blog, though, so you should expect to see code examples, demo projects etc. In fact, Pascal has &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/whiteboard-with-nodejs-and-socketio-&quot;&gt;littered&lt;/a&gt; &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/long-polling-example-with-nodejs&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/nodejs-load-balancer-proof-of-concept&quot;&gt;posts&lt;/a&gt; this year with links to his code on github.&lt;/p&gt;
&lt;p&gt;Why not create gists out of all &lt;strong&gt;useful&lt;/strong&gt; example code that we write about? And why not show the activity of those gists and repositories back here? There's already several WordPress plug-ins for this stuff out there, so bringing it home shouldn't be too hard.&lt;/p&gt;

&lt;h2&gt;Time machines&lt;/h2&gt;
&lt;p&gt;Because it's real actual work, and we have other obligations in our lives, that's why. So, instead of half doing something and never releasing it (see tagging, del.icio.us integration), or announcing something that doesn't have a follow-up, I thought that, for a change, I'll share my thoughts first, not promise anything, and then we'll see. If you are fired up by it, let me know how it went for you in the comments. Or, hey, just reply to the tweet.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>I took it, and they say that so should you</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/i-took-it-and-they-say-that-so-should-you/index.html"/>
      <updated>2010-10-20T16:07:02+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/i-took-it-and-they-say-that-so-should-you/i-took-it-and-they-say-that-so-should-you</id>
      <content type="html">&lt;p&gt;
While the excited and slightly stern style of invitation is not so much to my liking, I've taken &lt;a href=&quot;http://alistapart.com/articles/survey2010&quot;&gt;this survey&lt;/a&gt; every year since inception, and reading the &lt;a href=&quot;http://aneventapart.com/alasurvey2009/&quot;&gt;previous year's results&lt;/a&gt; is always interesting. For me it's a good benchmark and prompts me to take stock over what I'm doing right now, and what I want to look for in the near future... you know, that question they always ask you in job interviews!
&lt;/p&gt;
&lt;p&gt;A List Apart started this survey in 2007 because they felt that us web workers weren't statistically captured enough, something I agree very strongly with. Here's what they have to say about it:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;That’s why each year since 2007, we’ve asked you, the members of the web design community, a few dozen questions about your professional life, and compared your answers to those of your colleagues. Each time we’ve asked, over 30,000 of you have kindly obliged with details about your salary, location, background, and more. The data that you provide and we analyze is the only significant information about our profession as a profession to be published anywhere, by anyone. [...] And so, as you have in years past, we ask that you please take a few minutes to complete this year’s survey.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
So, I've got nothing else to say today but to tell you:
&lt;br/&gt;
&lt;a href=&quot;http://alistapart.com/articles/survey2010&quot;&gt;&lt;img src=&quot;http://aneventapart.com/webdesignsurvey/templates/ala/images/i-took-the-2010-survey.gif&quot; alt=&quot;I Took the Survey For People Who Make Websites 2010&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;


</content>
    </entry>

    <entry>
      <title>Whiteboard with node.js and Socket.IO </title>
      <link href="http://contentwithstyle.pascalopitz.com/content/whiteboard-with-nodejs-and-socketio-/index.html"/>
      <updated>2010-10-13T14:49:44+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/whiteboard-with-nodejs-and-socketio-/whiteboard-with-nodejs-and-socketio-</id>
      <content type="html">&lt;p&gt;
Yes, I know I am late to the party, but I still wanted to try my hand at something with node.js and the amazing Socket.IO library. So fresh &lt;a href=&quot;http://github.com/pascalopitz/whiteboard&quot;&gt;on github there's my little whiteboard application&lt;/a&gt; for you. Enjoy.
&lt;/p&gt;

</content>
    </entry>

    <entry>
      <title>Promote JS</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/promote-js/index.html"/>
      <updated>2010-10-08T10:51:49+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/promote-js/promote-js</id>
      <content type="html">&lt;p&gt;&lt;a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number' title='JavaScript Number .toFixed'&gt;&lt;img src='http://static.jsconf.us/promotejsv.gif' height='280' width='160' alt='JavaScript Number .toFixed'/&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>

    <entry>
      <title>abbr. Fri</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/abbr-fri/index.html"/>
      <updated>2010-10-01T12:33:41+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/abbr-fri/abbr-fri</id>
      <content type="html">&lt;p&gt;This is not at all from us, but from my colleague Andrew, who showed them to me last Friday in Perl.&lt;/p&gt;

&lt;p&gt;I am not sure if I would use either of those in production code, it's... slightly cheeky. Nevertheless, enjoy:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;?php
//turn anything into a boolean
$boolean_flag = &lt;strong&gt;!!&lt;/strong&gt; $any_variable;
//does the same as
$boolean_flag = (bool) $any_variable;
&lt;/pre&gt;
&lt;p&gt;I like the importance the double exclamation marks trigger when you read this in code. IT'S LIKE WHEN PEOPLE WRITE MUNDANE STUFF IN CAPS!!&lt;/p&gt;
&lt;pre&gt;
&amp;lt;?php
//I'm clearly iterating towards 0
$counter = 100;
while($counter&lt;strong&gt;--&amp;gt;&lt;/strong&gt;0) {
	//do stuff
}
//does the same as
$counter = 100;
while($counter &amp;gt; 0) {
	$counter--;
	//do stuff
}
&lt;/pre&gt;
&lt;p&gt;This one's great, too. The arrow seems to make the loop a very dynamic element. Great, have I really just explained my joke post? Shocking, I must get out more. If you've been inside for too long, let me know what unusual syntax you've come across.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Setting up SSL for Nginx</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/setting-up-ssl-for-nginx/index.html"/>
      <updated>2010-09-30T19:56:53+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/setting-up-ssl-for-nginx/setting-up-ssl-for-nginx</id>
      <content type="html">&lt;p&gt;Quite a kerfuffle trying to set up SSL encryption for &lt;a href=&quot;http://www.tagbento.com&quot;&gt;www.tagbento.com&lt;/a&gt;, which runs on Nginx. Here is how it was done.&lt;/p&gt;

&lt;p&gt;The files I had gotten came via the client from &lt;a href=&quot;http://www.startssl.com/&quot;&gt;startSSL&lt;/a&gt;. The following were present:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
ssl.crt
ssl.key
ca.pem
sub.class2.server.ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was used to having a cert and a key file from &lt;a href=&quot;http://articles.slicehost.com/2007/12/19/ubuntu-gutsy-self-signed-ssl-certificates-and-nginx&quot;&gt;generating self signed certificates&lt;/a&gt;, but the rest? Unfortunately nginx wasn't mentioned in the &lt;a href=&quot;http://www.startssl.com/?app=20&quot;&gt;howto pages&lt;/a&gt; at all.&lt;/p&gt;

&lt;h2&gt;Remove the password from the key file:&lt;/h2&gt;

&lt;p&gt;If you don't do &lt;a href=&quot;http://www.madboa.com/geek/openssl/#key-removepass&quot;&gt;this&lt;/a&gt; with every configtest or reload/restart of nginx you'll have to type in the PEM password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mv ssl.key bak.key
openssl rsa -in bak.key -out ssl.key
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating a combined key certificate&lt;/h2&gt;

&lt;p&gt;Probably the most confusing point. The &lt;a href=&quot;http://wiki.nginx.org/NginxHttpSslModule&quot;&gt;Nginx manual&lt;/a&gt; explains why you'll have to do this:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;
if you have a chain of certificates — by having intermediate certificates between the server certificate and the CA root certificate — they're not specified separately like you would do for Apache. Instead you'll need to concatenate all the certificates, starting with the server certificate, and going deeper in the chain running through all the intermediate certificates.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
mv ssl.crt bak.crt
cat ssl.crt ca.pem sub.class2.server.ca.pem &gt; ssl.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Tribulations&lt;/h3&gt;

&lt;p&gt;At this point I was quite confused, because instructions for level 1certificates were slightly different. The main problem, as it turned out though, was that the ssl.crt I had been given had Windows line breaks in it. So yeah, if stuff doesn't work, have a look at the concatenated file in vim and see if you can see something unusual.&lt;/p&gt;

&lt;h2&gt;Enable SSL in the Nginx Vhost&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
server {
        listen 443;

        ssl on;
        ssl_certificate /path/to/ssl.crt;
        ssl_certificate_key /path/to/ssl.key;

        server_name www.tagbento.com;

        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Test and Reload Nginx configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
/etc/init.d/nginx configtest
/etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That's it, enjoy!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Zend_Client_Twitter with OAuth and a single access token</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/using-zendclienttwitter-with-oauth-and-a-single-access-token/index.html"/>
      <updated>2010-09-26T16:26:11+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/using-zendclienttwitter-with-oauth-and-a-single-access-token/using-zendclienttwitter-with-oauth-and-a-single-access-token</id>
      <content type="html">&lt;p&gt;Just noticed that twitter switched their API to OAuth only, which broke our blog updates on twitter. Here's a hotfix to use the &lt;a href=&quot;http://dev.twitter.com/pages/oauth_single_token&quot;&gt;single access token provided by Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Config&lt;/h2&gt;

&lt;p&gt;Of course you'll have to get the right data from &lt;a href=&quot;http://dev.twitter.com/apps&quot;&gt;dev.twitter.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
twitter.user = &quot;myusername&quot;
twitter.consumer_key = &quot;xxxxxx&quot;
twitter.consumer_secret = &quot;yyyyyy&quot;
twitter.access_token = &quot;XXXXXX&quot;
twitter.access_secret = &quot;YYYYYY&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
$message = &quot;my update&quot;;

$token = new Zend_Oauth_Token_Access();
$token-&amp;gt;setToken($this-&amp;gt;config-&amp;gt;twitter-&amp;gt;access_token);
$token-&amp;gt;setTokenSecret($this-&amp;gt;config-&amp;gt;twitter-&amp;gt;access_secret);

$twitter_client = $token-&amp;gt;getHttpClient(array(
    'callbackUrl' =&amp;gt; 'http://example.com/callback.php',
    'siteUrl' =&amp;gt; 'http://twitter.com/oauth',
    'consumerKey' =&amp;gt; $this-&amp;gt;config-&amp;gt;twitter-&amp;gt;consumer_key,
    'consumerSecret' =&amp;gt; $this-&amp;gt;config-&amp;gt;twitter-&amp;gt;consumer_secret,
));

$twitter = new Zend_Service_Twitter(array(
    'username' =&amp;gt; $this-&amp;gt;config-&amp;gt;twitter-&amp;gt;user,
    'accessToken' =&amp;gt; $token,
));

$twitter-&amp;gt;setLocalHttpClient($twitter_client);
$response = $twitter-&amp;gt;account-&amp;gt;verifyCredentials();
$twitter-&amp;gt;status-&amp;gt;update($message);
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Buffalo NAS and iTunes - A weekend of nerding away</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/buffalo-nas-and-itunes---a-weekend-of-nerding-away/index.html"/>
      <updated>2010-09-26T15:26:49+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/buffalo-nas-and-itunes---a-weekend-of-nerding-away/buffalo-nas-and-itunes---a-weekend-of-nerding-away</id>
      <content type="html">&lt;p&gt;Thank you Apple, for &lt;a href=&quot;http://discussions.apple.com/thread.jspa?threadID=2564925&amp;amp;tstart=0&quot;&gt;messing up the compatibility between iTunes 10 and any NAS drive&lt;/a&gt; using &lt;a href=&quot;http://www.fireflymediaserver.org/&quot;&gt;firefly&lt;/a&gt;. You officially suck.&lt;/p&gt;

&lt;p&gt;That said, there's no such thing as giving up, and here I am, coming up with an elaborate way to be able to listen to my music again.&lt;/p&gt;

&lt;h2&gt;Firefly broken&lt;/h2&gt;

&lt;p&gt;So firely doesn't get recognised by iTunes 10 anymore. What a bummer! Until now I had all the music on a NAS drive, and streamed it to itunes on my Mac MINI which is acting as TV (using an Elgato EyeTV USB thingy) and stereo.&lt;/p&gt;

&lt;p&gt;There seems to be zero alternatives when it comes to DAAP players, apart from Songbird with a flaky plugin. Not my weapon of choice, really, especially because a search or scrolling or anything else makes Songbird hang for what feels like a minute.&lt;/p&gt;

&lt;p&gt;Bottom line was that I went and bought a hard drive to wire up to the Mac Mini, and used rsync to copy all music on to that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
rsync -azv -e ssh user@nasdrive:/mnt/disk1/itunes /Volumes/NewHD/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding to the iTunes library&lt;/h2&gt;

&lt;p&gt;The next problem is that just because files are on the hard drive, iTunes doesn't necessarily know about them. Normally we drag and drop them in. With an automatically synced library is not an option. Apple script to the rescue. Make sure that you disable the options &quot;Keep iTunes media folder organized&quot; and &quot;Copy files to iTunes media folder when adding to library&quot; in the iTunes preferences, or this will really cause havoc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/itunes_prefs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once you've done that though, adding a file twice should just ignore it, therefore there is no risk in running this script multiple times.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
-- filename: /Users/tvmini/Desktop/itunes.scpt
property type_list : {&quot;MPG3&quot;, &quot;MIDI&quot;, &quot;AIFF&quot;, &quot;MPG4&quot;}
property extension_list : {&quot;mp3&quot;, &quot;mid&quot;, &quot;aif&quot;, &quot;m4p&quot;, &quot;m4a&quot;}

on run
    scan_folder(&quot;NewHD:itunes:&quot;)
end run

on scan_folder(file_item)
    set folder_items to list folder file_item without invisibles
    repeat with i from 1 to the count of folder_items
        set this_item to alias ((file_item as text) &amp;amp; (item i of folder_items as text))
        set item_info to info for this_item
        if folder of the item_info is true then
            scan_folder(this_item)
        else if (alias of the item_info is false) and ¬
        ((the file type of the item_info is in the type_list) or ¬
        the name extension of the item_info is in the extension_list) then
            check_file(this_item)
        end if
    end repeat
end scan_folder

on check_file(file_item)
    try
        tell application &quot;iTunes&quot;
            launch
            set this_track to add file_item to playlist &quot;Library&quot; of source &quot;Library&quot;
        end tell
    end try
end check_file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script was inspired by &lt;a href=&quot;http://dougscripts.com/itunes/scripts/ss.php?sp=addtolib&quot;&gt;this one at dougscripts.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The Flac problem&lt;/h2&gt;

&lt;p&gt;Firefly was kind of neat, as it also managed to automatically transcode FLAC files into an MP3 stream. With this function gone, I am using a shell script to transcode the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/sh
# filename: /Users/tvmini/Desktop/flac2mp3.sh

if [ &quot;$1&quot; ]
then
    find &quot;$1&quot; -name '*.flac' | while read fn;
    do
        basename=$(basename &quot;$fn&quot; .flac).mp3
        dirname=$(dirname &quot;$fn&quot;)

        outfile=&quot;$dirname/$basename&quot;

        if [ -e &quot;$fn&quot; ] &amp;amp;&amp;amp; [ ! -e &quot;$outfile&quot; ];
        then
            id3title=$(metaflac --show-tag=TITLE &quot;$fn&quot; | perl -pe &quot;s/^TITLE=(.*)/\$1/i&quot;)
            id3artist=$(metaflac --show-tag=ARTIST &quot;$fn&quot; | perl -pe &quot;s/^ARTIST=(.*)/\$1/i&quot;)
            id3album=$(metaflac --show-tag=ALBUM &quot;$fn&quot; | perl -pe &quot;s/^ALBUM=(.*)/\$1/i&quot;)
            id3date=$(metaflac --show-tag=DATE &quot;$fn&quot; | perl -pe &quot;s/^DATE=(.*)/\$1/i&quot;)
            id3tracknumber=$(metaflac --show-tag=TRACKNUMBER &quot;$fn&quot; | perl -pe &quot;s/^TRACKNUMBER=(.*)/\$1/i&quot;)
            id3genre=$(metaflac --show-tag=GENRE &quot;$fn&quot; | perl -pe &quot;s/^GENRE=(.*)/\$1/i&quot;)

            flac -c -d &quot;$fn&quot; | \
            lame -h -m s -b 360 \
                --tt &quot;$id3title&quot; \
                --ta &quot;$id3artist&quot; \
                --tl &quot;$id3album&quot; \
                --ty &quot;$id3date&quot; \
                --tn &quot;$id3tracknumber&quot; \
                --tg &quot;$id3genre&quot; \
                - &quot;$outfile&quot;
        else
            echo &amp;gt;&amp;amp;2 &quot;&quot;$fn&quot; -- skipping.&quot;
        fi
    done
else
    echo &amp;gt;&amp;amp;2 &quot;Usage: &quot;$(basename &quot;$0&quot;)&quot; DIRNAME&quot;
    exit 1
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I leave the flac file in place so that it won't get uploaded again every time I run the rsync command. The script then checks for a transcoded mp3 file that exists in the same directory and will only transcode again if this is not the case.&lt;/p&gt;

&lt;p&gt;Inspiration for this came from mainly from &lt;a href=&quot;http://discussions.apple.com/message.jspa?messageID=788809#788809&quot;&gt;this message on the Apple Support Forums&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Keeping things up to date&lt;/h2&gt;

&lt;p&gt;
Calling the above scripts via cron job should keep everything up to date:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
0 2 * * * rsync -azv -e ssh user@nasdrive:/mnt/disk1/itunes /Volumes/NewHD/
0 3 * * * osascript /Users/tvmini/Desktop/itunes.scpt
0 4 * * * sh /Users/tvmini/Desktop/flac2mp3.sh /Volumes/NewHD/itunes
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>

    <entry>
      <title>Preparing the button element for sliding doors</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/preparing-the-button-element-for-sliding-doors/index.html"/>
      <updated>2010-09-15T14:20:13+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/preparing-the-button-element-for-sliding-doors/preparing-the-button-element-for-sliding-doors</id>
      <content type="html">&lt;p&gt;A helpful little trick to get the FF button elements into a state where we can apply sliding doors. Via johannes krtek of &lt;a href=&quot;http://flachware.com&quot;&gt;flachware.com&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 button::-moz-focus-inner { /* now you can handle firefox buttons like safari buttons */
    padding: 0; /* remove inner padding */
    border: 0; /* remove dotted outline in buttons in firefox */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This removes the strange clicking effect Firefox applies to the button elements. Now we can do normal sliding doors stuff with them.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Zend Framework with nginx and php-fastcgi</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/zend-framework-with-nginx/index.html"/>
      <updated>2010-08-04T21:16:46+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/zend-framework-with-nginx/zend-framework-with-nginx</id>
      <content type="html">&lt;p&gt;
Since I while I heard good things about nginx and wanted to use it for my Zend Framework MVC applications.
I just got a Ubuntu server working after one of those days that seem to be a never ending Google search and debugging session, so I thought I'd share the outcome with you.
&lt;/p&gt;

&lt;h2&gt;Install packages&lt;/h2&gt;

&lt;p&gt;
First off you'll need to install a couple of packages, as outlined in the excellent &lt;a href=&quot;http://davidwinter.me.uk/articles/2009/06/13/php-and-nginx-the-easy-way/&quot;&gt;howto by david winter&lt;/a&gt;:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install php5-cgi nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configure PHP fastcgi&lt;/h2&gt;

&lt;p&gt;Then create an init.d file to manage the php-fastcgi process&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/init.d/php-fastcgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside put&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
BIND=127.0.0.1:9000
USER=www-data
PHP_FCGI_CHILDREN=15
PHP_FCGI_MAX_REQUESTS=1000

PHP_CGI=/usr/bin/php-cgi
PHP_CGI_NAME=`basename $PHP_CGI`
PHP_CGI_ARGS=&quot;- USER=$USER PATH=/usr/bin PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN PHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS $PHP_CGI -b $BIND&quot;
RETVAL=0

start() {
      echo -n &quot;Starting PHP FastCGI: &quot;
      start-stop-daemon --quiet --start --background --chuid &quot;$USER&quot; --exec /usr/bin/env -- $PHP_CGI_ARGS
      RETVAL=$?
      echo &quot;$PHP_CGI_NAME.&quot;
}
stop() {
      echo -n &quot;Stopping PHP FastCGI: &quot;
      killall -q -w -u $USER $PHP_CGI
      RETVAL=$?
      echo &quot;$PHP_CGI_NAME.&quot;
}

case &quot;$1&quot; in
    start)
      start
  ;;
    stop)
      stop
  ;;
    restart)
      stop
      start
  ;;
    *)
      echo &quot;Usage: php-fastcgi {start|stop|restart}&quot;
      exit 1
  ;;
esac
exit $RETVAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we change permissions on this, start the fastcgi and register it as startup item&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod +x /etc/init.d/php-fastcgi
sudo /etc/init.d/php-fastcgi start
sudo update-rc.d php-fastcgi defaults
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configure nginx&lt;/h2&gt;

&lt;p&gt;
Now we need to set up a vhost for ZF application in nginx.
This is a pretty straight forward job, as the nginx package in Ubuntu features the well knows sites-available/sites-enabled folder structure.
I will assume that the application lives in /var/www/zfapp, has all the needed dependencies in the library folder and the host name for it will be zfapp.
&lt;/p&gt;

&lt;p&gt;First off we create a config file in the sites-available folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/nginx/sites-available/zfapp&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside we put the vhost config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name zfapp;
        root /var/www/zfapp/public;
        index /index.php;

        # remove trailing slash, that throws ZF router
        rewrite ^/(.*)/$ /$1 break;

        location / {
                # if file is existing, skip fastcgi parsing
                if (-e $request_filename) {
                        break;
                }

                fastcgi_pass 127.0.0.1:9000;
                fastcgi_index index.php;
                include /etc/nginx/fastcgi_params;
                fastcgi_param SCRIPT_FILENAME /var/www/zfapp/public/index.php;

                # get the relevant environment
                fastcgi_param APPLICATION_ENV staging;
        }

        # expires headers on known filetypes
        location ~* ^.+.(css|js|jpeg|jpg|gif|png|ico) {
                expires 30d;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we just need to symlink this file into sites-enabled and restart nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s /etc/nginx/sites-available/zfapp /etc/nginx/sites-enabled/zfapp
sudo /etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it. Should be working.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Nodestalker - A beanstalkd client for node.js</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/nodestalker-a-beanstalkd-client-for-nodejs/index.html"/>
      <updated>2010-05-14T12:31:15+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/nodestalker-a-beanstalkd-client-for-nodejs/nodestalker-a-beanstalkd-client-for-nodejs</id>
      <content type="html">&lt;p&gt;Following my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/php-worker-processes-with-beanstalk-and-daemontools&quot;&gt;previous article&lt;/a&gt; about PHP and &lt;a href=&quot;http://kr.github.com/beanstalkd/&quot;&gt;beanstalkd&lt;/a&gt; I was keen to use beanstalk in combination with node.js, but wasn't entirely satisfied with the available &lt;a href=&quot;http://github.com/benlund/node-beanstalk-client&quot;&gt;implementation&lt;/a&gt;. So as a little brain exercise I wrote &lt;a href=&quot;http://github.com/pascalopitz/nodestalker&quot;&gt;nodestalker&lt;/a&gt; from scratch.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;Usage should be pretty straight forward. Below is the code for putting a job into the queue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sys = require('sys');
var bs = require('../lib/beanstalk_client');
var client = bs.Client();

client.use('default').onSuccess(function(data) {
  sys.puts(sys.inspect(data));

  client.put('my job').onSuccess(function(data) {
    sys.puts(sys.inspect(data));
    client.disconnect();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Issues during development&lt;/h2&gt;

&lt;p&gt;Writing it wasn't as easy as I expected, but that was because I didn't read the documentation on sockets properly, and missed out on &lt;code&gt;stream.setKeepAlive()&lt;/code&gt; and &lt;code&gt;stream.setNoDelay()&lt;/code&gt; first, which made my sockets close on me in what I thought was a random manner.&lt;/p&gt;

&lt;p&gt;Another issue I had was &lt;a href=&quot;http://github.com/visionmedia/js-yaml&quot;&gt;the yaml library for node&lt;/a&gt;, which just didn't like the yaml formatted beanstalk output, which doesn't contain the expected indentations. Not sure why, maybe a yaml version conflict or something, but I hacked the yaml parsing with some regular expressions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var corrected = str.replace(/\n-\ ([\w\d_-]+)/mig, '\n  - \'$1\'') //indent list
          .replace(/(\w)\-(\w)/mgi, '$1_$2') // replace minuses in hash names
          .replace(/\n([\w\d_-]+)\:\ ([\.\,\w\d_-]+)/mig, '\n  $1: \'$2\''); // format hashes
try {
  return kiwi.require('yaml').eval(corrected);
} catch(e) {
  Debug.log(e);
  Debug.log(corrected);
  return str;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Demo application: Beanspector&lt;/h2&gt;

&lt;p&gt;I also included a demo application, which I baptised &quot;beanspector&quot;. It is a simple command line client to inspect, list and empty tubes and put some content into them. This is how I use it in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node beanspector.js -lt
[ 'default', 'confirm' ]
$ node beanspector.js -pt default &quot;here&quot;
61
$ node beanspector.js -lc default
listing tube default
{ id: '61', data: 'here' }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/pascalopitz/nodestalker&quot;&gt;Get nodestalker from GitHub&lt;/a&gt;, and feel free to fork and do some improvements if you want.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Google Web Optimiser being unbalanced</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/google-web-optimiser-being-unbalanced/index.html"/>
      <updated>2010-05-11T11:05:38+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/google-web-optimiser-being-unbalanced/google-web-optimiser-being-unbalanced</id>
      <content type="html">&lt;p&gt;Whatever prompted &lt;a href=&quot;http://adwords.google.com/support/aw/bin/answer.py?hl=en-uk&amp;amp;answer=64418&quot;&gt;Google to use an &quot;unbalanced&quot; noscript tag in their Web Optimiser&lt;/a&gt;, it ain't pretty!&lt;/p&gt;

&lt;p&gt;The problem is not just Web Optimiser, but also other tools like Analytics. The whole &quot;generate me a code snippet to paste&quot; approach leaves many many otherwise neatly coded littered with inline script blocks. While this is a quick and easy way for people to get stuff working in their WP blog, at least there should be a neat and valid alternative for experienced developers.&lt;/p&gt;

&lt;p&gt;Why Google don't try to create cleaner ways to include their tools, is completely beyond me. They really have loads of skilled people at hand, so resource can't be a problem, can it?&lt;/p&gt;

&lt;p&gt;Below is their generated Analytics code, vs my take on it the encapsulated way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
var gaJsHost = ((&quot;https:&quot; == document.location.protocol) ? &quot;https://ssl.&quot; : &quot;http://www.&quot;);
document.write(unescape(&quot;%3Cscript src='&quot; + gaJsHost + &quot;google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E&quot;));
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
try{
var pageTracker = _gat._getTracker(&quot;UA-xxxxxx-x&quot;);
pageTracker._trackPageview();
} catch(err) {}&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
CWS.GoogleAnalytics = new function() {
  this.NS = 'CWS.GoogleAnalytics';
  var _t = 200;

  var _checkTracker = function() {
    if(window._gat !== undefined) {
        try {
          var pageTracker = window._gat._getTracker(&quot;UA-XXXXXXX-X&quot;);
          pageTracker._trackPageview();
        } catch(err) {}
    } else {
      window.setTimeout(_checkTracker, _t);
    }
  }

  var gaJsHost = ((&quot;https:&quot; == document.location.protocol) ? 'https://ssl.' : 'http://www.');
  var str = unescape(&quot;%3Cscript src='&quot; + gaJsHost + &quot;google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E&quot;);
  $('body').append(str);

  window.setTimeout(_checkTracker, _t);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, that doesn't solve the problem of Google Web Optimiser insisting on an &quot;unbalanced&quot; noscript tag. For all those people that use XML parsers or send their content as application/xhtml+xml, this is a big nono. Poor show, Google!&lt;/p&gt;
</content>
    </entry>

    <entry>
      <title>Node.js load balancer proof of concept</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/nodejs-load-balancer-proof-of-concept/index.html"/>
      <updated>2010-05-10T10:32:49+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/nodejs-load-balancer-proof-of-concept/nodejs-load-balancer-proof-of-concept</id>
      <content type="html">&lt;p&gt;Down with a cold, the only bit I managed was a bit more experimenting with node.js this weekend. Here's a little example of node.js acting as a very basic load balancer with  fault tolerance.&lt;/p&gt;


&lt;p&gt;I did create a &lt;a href=&quot;http://github.com/pascalopitz/nodeload&quot;&gt;repo on github&lt;/a&gt;, feel free to contribute or fork if you find this useful.&lt;/p&gt;

&lt;h2&gt;Project Files&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
$ ls -h
README			cluster.conf.json
balancer.js		testserver.js
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Load Balancer&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
var sys = require('sys'),
  http = require('http'),
  fs = require('fs');

var LoadBalancer = new function() {
  var _self = this;
  var _server;
  var _cluster = [];
  var _active = [];
  var _port = 8888;
  var _checkInterval = 10000;
  var _checkTimeout = [];

  var _updateActives = function() {
    _active = [];
    for(var i=0; i&amp;lt;_cluster.length; i++) {
      if(_cluster[i].active) {
        _active[_active.length] = _cluster[i];
      }
    }
  };

  var _loadCluster = function(callback) {
    fs.readFile('./cluster.conf.json', function (err, data) {
      if (err) throw err;
      _cluster = JSON.parse(data.toString().replace('\n', ''));
      callback();
    });
  };

  var _checkCluster = function() {
    for(var i=0; i&amp;lt;_cluster.length; i++) {
      _clusterNodeCheck(_cluster[i]);
    }
  };

  var _clusterNodeCheck = function(node) {
    var client = http.createClient(parseInt(node.port, 10), node.host);
    var request = client.request('GET', '/is_up', {&quot;host&quot; : node.host});

    request.addListener('response', function (response) {
      if(response.statusCode == 200) {
        response.addListener('data', function(data) {
          if(data == 'ok') {
            node.active = true;
          } else {
            node.active = false;
          }
        });
      } else {
        node.active = false;
      }
    });

    request.addListener('error', function (err) {
      node.active = false;
    });

    client.addListener('error', function (err) {
      node.active = false;
    });

    request.end();

    setTimeout(_updateActives, 200);

    _checkTimeout[node.host + ':' + node.port] = setTimeout(function() {
      _clusterNodeCheck(node);
    }, _checkInterval);
  };

  var _requestHandler = function(request, response) {
    if(_active.length == 0) {
      response.writeHead(500, {'Content-Type': 'text/html'});
      response.write('no server active');
      response.end();
    } else {
      var index = Math.floor(Math.random()*_active.length);
      var node = _active[index];

      var proxy_headers = request.headers;
      var proxy_client = http.createClient(parseInt(node.port, 10), node.host);
      var proxy_request = proxy_client.request(request.method, request.url, proxy_headers);

      proxy_request.addListener(&quot;response&quot;, function (proxy_response) {
        response.writeHeader(proxy_response.statusCode, proxy_response.headers);

        proxy_response.addListener(&quot;data&quot;, function (chunk) {
          response.write(chunk);
        });

        proxy_response.addListener(&quot;end&quot;, function () {
          response.end();
        });
      });

      proxy_client.addListener(&quot;error&quot;, function (error) {
        for(var i=0; i&amp;lt;_cluster.length; i++) {
          if(node.host == _cluster[i].host &amp;amp;&amp;amp; node.port == _cluster[i].port) {
            sys.puts('error, deactivating: '+node.host+':'+node.port);
            _cluster[i].active = false;
            _updateActives();
          }

          clearTimeout(_checkTimeout[_cluster[i].host + ':' + _cluster[i].port]);
          _clusterNodeCheck(_cluster[i]);
        }

        setTimeout(function() {
          _requestHandler(request, response);
        }, 200);
      });

      proxy_request.end();
    }
  };


  var _run = function() {
    _loadCluster(_checkCluster);

    _server = http.createServer().
            addListener('request', _requestHandler)
            .listen(_port);
    sys.puts('Listening to port ' + _port);
  };

  _run();
};
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Config file&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
[{
  &quot;host&quot; : &quot;127.0.0.1&quot;,
  &quot;port&quot; : &quot;8200&quot;
},
{
  &quot;host&quot; : &quot;127.0.0.1&quot;,
  &quot;port&quot; : &quot;8300&quot;
}]
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Test Server&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
var sys = require('sys'),
  http = require('http');
var _port;

function checkUsage() {
  if(process.argv.length != 3) {
    sys.puts('usage: node testserver.js &amp;lt;port&amp;gt;');
    process.exit(1);
  }

  var port = parseInt(process.argv[2], 10);

  if('NaN' == port.toString()) {
    sys.puts('usage: node testserver.js &amp;lt;port&amp;gt;');
    process.exit(1);
  }

  _port = port;
};

var TestServer = function() {
  var _self = this;
  var _server;

  var _routes = {
    '/' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/html'});
      response.write('hello world\n');
      response.end();
    },

    '/is_up' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      response.write('ok');
      response.end();
    },
  }

  var _requestHandler = function(request, response) {
    sys.puts('Request '+request.url+' from '+request.connection.remoteAddress+' to '+request.headers.host);

    if(_routes[request.url] === undefined) {
      response.writeHead(404, {'Content-Type': 'text/plain'});
      response.write('not found\n');
      response.end();
    } else {
      _routes[request.url].call(this, request, response);
    }
  };

  var _run = function() {
    _server = http.createServer().
            addListener('request', _requestHandler)
            .listen(_port);
    sys.puts('Listening to port ' + _port);
  };

  _run();
};

checkUsage();
server = new TestServer();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Readme&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
A simple load balancer in node.js


Start testservers in seperate shells:

node testserver.js 8200
node testserver.js 8300


Start load balancer:

node balancer.js


Request to balancer:

curl http://127.0.0.1:8888
&lt;/code&gt;&lt;/pre&gt;

</content>
    </entry>

    <entry>
      <title>Long polling example with node.js</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/long-polling-example-with-nodejs/index.html"/>
      <updated>2010-05-07T17:15:12+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/long-polling-example-with-nodejs/long-polling-example-with-nodejs</id>
      <content type="html">&lt;p&gt;Here's a little long polling example that I have thrown together while playing around with &lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt;. I must say it's a pretty slick tool. Anyone familiar with JavaScript suddenly can create powerful server side applications.&lt;/p&gt;

&lt;h2&gt;The Server&lt;/h2&gt;

&lt;p&gt;First we need to create a file called test.js!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var events = require('events');
var sys = require('sys');
var http = require('http');
var fs = require('fs');

var TestApp = function() {
  var _self = this;
  var counter = 0;

  var routes = {
    '/' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/html'});
      var string = _self.indexTemplate;
      response.write(string);
      response.end();
    },

    '/jsupdate' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/javascript'});
      updateLoop.call(this, request, response, counter);
    },

    '/jsstatus' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/javascript'});
      response.write('counter: ' + counter + '\n');
      response.end();
    },

    '/increment' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      counter++;
      response.write('counter: ' + counter + '\n');
      response.end();
    },

    '/reset' : function(request, response) {
      response.writeHead(200, {'Content-Type': 'text/plain'});
      counter = 0;
      response.write('reset\n');
      response.end();
    }
  }

  var updateLoop = function(request, response, current_counter) {
    if(current_counter != counter) {
      response.write('counter: ' + counter + '\n');
      response.end();
      return false;
    }

    setTimeout(function() {
      updateLoop.call(this, request, response, current_counter);
    }, 1000);
  };

  var _requestHandler = function(request, response) {
    sys.puts('request: \'' + request.url + '\'');

    if(routes[request.url] === undefined) {
      response.writeHead(404, {'Content-Type': 'text/plain'});
      response.write('not found\n');
      response.end();
    } else {
      routes[request.url].call(this, request, response);
    }
  };

  var _updateHandler = function(request, socket, head) {
    sys.puts('update');
  };

  var _closeHandler = function() {
    sys.puts('close');
  };

  sys.puts('New TestApp');

  fs.readFile('./index.html', function (err, data) {
    if (err) throw err;
    _self.indexTemplate = data;
    sys.puts('Template loaded');
  });

  var _server = http.createServer().
          addListener('request', _requestHandler)
          .addListener('close', _closeHandler)
          .addListener('update', _updateHandler)
          .listen(8000);
  sys.puts('Listening to port 8000');
};

new TestApp();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Client&lt;/h2&gt;

&lt;p&gt;The client side is just a small index.html file that gets loaded by the server application to be served up. Note that you'll have to restart the server in order to make changes to it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Long polling test&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;Long polling test.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;textarea id=&quot;output&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    var client = new function() {
      var _poll = function() {
        $.get('/jsupdate', function(response) {
          $('textarea').text(response);
          _poll();
        });
      }

      $.get('/jsstatus', function(response) {
        $('textarea').text(response);
        _poll();
      });
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Testing the application&lt;/h2&gt;

&lt;p&gt;Now all you need to do is run &lt;code&gt;node test.js&lt;/code&gt; and you should be able to open one or more browser windows with the test page.&lt;/p&gt;

&lt;p&gt;To check the other actions I used curl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$ curl http://localhost:8000/increment
counter: 1
$ curl http://localhost:8000/increment
counter: 2
$ curl http://localhost:8000/increment
counter: 3
$ curl http://localhost:8000/reset
reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On you test page updates should come through in the textfield.&lt;/p&gt;

&lt;h2&gt;Where does this leave us?&lt;/h2&gt;

&lt;p&gt;Node.js seems to gain momentum big time at the moment. There's tons of client libraries already, and frameworks sitting on top of it seem to pop up like mushrooms.&lt;/p&gt;

&lt;p&gt;Especially PHP coders will find themselves frustrated when it comes to long polling, as PHP usually uses Apache or other blocking servers, or one is forced to create one process per request, which becomes hard to manage.&lt;/p&gt;

&lt;p&gt;After seeing a &lt;a href=&quot;http://www.pgrs.net/2010/2/1/web-proxy-in-node-js-for-high-availability&quot;&gt;proxy example in node.js&lt;/a&gt;, I believe node.js could be a simple solution: Run Apache on port 8080 or something and use node.js to either serve long-polling stuff or proxy through to your Apache run application.&lt;/p&gt;

&lt;p&gt;But even long polling aside, the event based programming that's coming with node.js would be attractive for the creation of daemons and other little system tools. How stable node.js performs under high load is a different story, and I haven't done enough research yet as to make a comment on that. I can imagine that Supervisord would be a nice helper to manage node.js itself, in case it crashes or your applications develop memory leaks.&lt;/p&gt;

&lt;p&gt;If you, Dear Reader, have some experiences in the production environment, please go ahead and share in the comments.&lt;/p&gt;

&lt;h2&gt;Update 13/05/2010&lt;/h2&gt;

&lt;p&gt;I have put the &lt;a href=&quot;http://github.com/pascalopitz/long_polling_example&quot;&gt;example files on github&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Linkedin and Zend_Oauth</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/linkedin-and-zendoauth/index.html"/>
      <updated>2010-05-05T17:43:49+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/linkedin-and-zendoauth/linkedin-and-zendoauth</id>
      <content type="html">&lt;p&gt;Matthias has made look into Linkedin and OAuth for a bit. &lt;a href=&quot;http://www.formatix.eu/en/update-linkedin-status-using-zend-oauth.html&quot;&gt;This example&lt;/a&gt; was a very interesting read, but I think it's overcomplicating things slightly. That's why I want to show a very simple example inspired by what we've done for the brand new CwS Author pages.&lt;/p&gt;

&lt;p&gt;Before we get started, some good news: No more bugs in Zend_Oauth. Hence all that hacking of the ZF code is now obsolete as well.&lt;/p&gt;

&lt;p&gt;Also the example contained a couple of silly things that just confused me: The use of $_SESSION for example, or the fact that with ZF 1.10 the parameter was called 'userAuthori&lt;strong&gt;z&lt;/strong&gt;ationUrl' rather than 'userAuthori&lt;strong&gt;s&lt;/strong&gt;ationUrl'.&lt;/p&gt;

&lt;h2&gt;My simple example&lt;/h2&gt;

&lt;p&gt;I am assuming that we're using a controller for the user, and here's an action called linkedin for it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function linkedinAction() {
  $user_id = $this-&gt;loginHelper-&gt;userId();
  $ns = new Zend_Session_Namespace('linkedin_oauth');

  $options = array(
    'localUrl' =&gt; 'http://site/user/linkedin/',
    'callbackUrl' =&gt; 'http://site/user/linkedin/',
    'requestTokenUrl' =&gt; 'https://api.linkedin.com/uas/oauth/requestToken',
    'userAuthorizationUrl' =&gt; 'https://api.linkedin.com/uas/oauth/authorize',
    'accessTokenUrl' =&gt; 'https://api.linkedin.com/uas/oauth/accessToken',
    'consumerKey' =&gt; $this-&gt;config-&gt;linkedin-&gt;key,
    'consumerSecret' =&gt; $this-&gt;config-&gt;linkedin-&gt;secret,
  );

  $consumer = new Zend_Oauth_Consumer($options);

  if(empty($ns-&gt;request_token)) {
    // get request token and redirect to linkedin
    $token = $consumer-&gt;getRequestToken();
    $ns-&gt;request_token = serialize($token);
    $consumer-&gt;redirect();
    die();
  } else {
    try {
      // get access token and store in DB
      $token = $consumer-&gt;getAccessToken($_GET, unserialize($ns-&gt;request_token));
      $this-&gt;userModel-&gt;setLinkedinToken($author_id, serialize($token));
    } catch(Exception $e) {
      // reset token in DB and empty session if there was a fault
      $this-&gt;userModel-&gt;setLinkedinToken($author_id, '');
      $ns-&gt;request_token = '';
    }
  }

  // redirect user to own details page
  return $this-&gt;_redirect('/user/details/');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see you'll need the infrastructure to obtain the user id and store the token in the DB, but otherwise this is pretty straight forward. We're saving the request_token in a session to then obtain the access_token when linkedin redirects us to the same page.&lt;/p&gt;

&lt;p&gt;Assuming that you then have managed to read the token from the database, this is what you need to get the users current status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$options = array(
  'consumerKey' =&amp;gt; $this-&amp;gt;config-&amp;gt;linkedin-&amp;gt;key,
  'consumerSecret' =&amp;gt; $this-&amp;gt;config-&amp;gt;linkedin-&amp;gt;secret,
);

$token = unserialize($token);
$client = $token-&amp;gt;getHttpClient($options);

$client-&amp;gt;setUri('https://api.linkedin.com/v1/people/~:(current-status)');
$client-&amp;gt;setMethod(Zend_Http_Client::GET);
$response = $client-&amp;gt;request();
$content = $response-&amp;gt;getBody();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it really. For more details read the great original articles &lt;a href=&quot;http://www.formatix.eu/en/php-linkedin-api-zend-oauth.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://jeroenbourgois.be/blog/2010/03/21/linkedin-using-zend-oauth/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>N900: AIM and ICQ account problems</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/n900-and-problems-with-aim-and-icq/index.html"/>
      <updated>2010-04-28T11:05:41+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/n900-and-problems-with-aim-and-icq/n900-and-problems-with-aim-and-icq</id>
      <content type="html">&lt;p&gt;I'm a happy n900 user since a while, and one of the best features of the whole device is it's contact list and IM conversations. In fact it's about the coolest way to have all your contacts in one place, and as a mobile device for IM it's the best I've ever seen.&lt;/p&gt;

&lt;p&gt;Annoyingly since an upgrade the AIM and ICQ accounts refused to connect and threw a network error.&lt;/p&gt;

&lt;p&gt;The solution came via &lt;a href=&quot;http://talk.maemo.org/showpost.php?p=461439&amp;amp;postcount=7&quot;&gt;the maemo forums.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll have to downgrade libpurple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
apt-get install purple-extra-protocols=2.6.3-6nix0
apt-get install libpurple0=2.6.3-6nix0
&lt;/code&gt;&lt;/pre&gt;

</content>
    </entry>

    <entry>
      <title>PHP worker processes with Beanstalk and Daemontools</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-worker-processes-with-beanstalk-and-daemontools/index.html"/>
      <updated>2010-03-31T22:26:47+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-worker-processes-with-beanstalk-and-daemontools/php-worker-processes-with-beanstalk-and-daemontools</id>
      <content type="html">&lt;p&gt;
Before I get started on this one I want to apologize for being slack the last couple of months. Maybe being on holiday for two months slightly corrupted my morale, or maybe that was down to the nice wine tasting sessions in the Barossa Valley and the McLaren Vale.
In any case, it's been a long time. I have been back for one month but I am still finding it hard to live up to my own expectations in terms of writing and tech research.
&lt;/p&gt;

&lt;p&gt;But after moaning, on with the programme:&lt;/p&gt;

&lt;p&gt;
Sometimes things just get too heavy for a straight forward approach. Memory usage might be too high or interaction might be delayed. In this case it might make sense to queue the task up for later execution.
&lt;/p&gt;

&lt;h2&gt;A message queue&lt;/h2&gt;

&lt;p&gt;
&lt;a href=&quot;http://kr.github.com/beanstalkd/&quot;&gt;Beanstalkd&lt;/a&gt; is a very easy to use message queue. There are client libraries for it in many languages, and it seems to be very popular amongst the Ruby crowd.
&lt;/p&gt;

&lt;p&gt;Installing it on OSX using macports is easy peasy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo port install beanstalkd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kicking it off is equally as easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beanstalkd -d -l 127.0.0.1 -p 11300&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Pushing things into the queue&lt;/h2&gt;

&lt;p&gt;
We're using pheanstalk as the client library to connect to beanstalkd, and this script is just generating 1000 dummy jobs to be picked up later by our daemonized worker process.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
require_once('pheanstalk/pheanstalk_init.php');
$pheanstalk = new Pheanstalk('127.0.0.1:11300');

for($i=0; $i&amp;lt;1000; $i++) {
  $job = new stdClass();
  $job-&amp;gt;envelope_id = rand();
  $job-&amp;gt;date = date('Y-m-d H:i:s');
  $job_data = json_encode($job);
  $pheanstalk-&amp;gt;useTube('test')-&amp;gt;put($job_data);
  echo &quot;pushed: &quot; . $job_data . &quot;\n&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Picking up things from the queue&lt;/h2&gt;

&lt;p&gt;Our worker script now needs to connect to the queue and pick up the jobs. Things get dumped into a logfile which we can have an eye on to see if it's running alright. In order to prevent memory leaks it terminates itself when it hits a certain memory threshold. In this case the threshold is just picked for demo purposes, and the counter and the done_jobs array are just there to increase the memory footprint.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Worker {

  private $path;

  public function __construct($path) {
    $this-&amp;gt;setBasePath($path);
    $this-&amp;gt;log('starting');
    require_once('pheanstalk/pheanstalk_init.php');
    $this-&amp;gt;pheanstalk = new Pheanstalk('127.0.0.1:11300');
  }

  public function __destruct() {
    $this-&amp;gt;log('ending');
  }

  private function setBasePath($path) {
    $this-&amp;gt;path = $path;
  }

  public function run() {
    $this-&amp;gt;log('starting to run');
    $cnt = 0;
    $done_jobs = array();

    while(1) {
      $job = $this-&amp;gt;pheanstalk-&amp;gt;watch('test')-&amp;gt;ignore('default')-&amp;gt;reserve();
      $job_encoded = json_decode($job-&amp;gt;getData(), false);
      $done_jobs[] = $job_encoded;
      $this-&amp;gt;log('job:'.print_r($job_encoded, 1));
      $this-&amp;gt;pheanstalk-&amp;gt;delete($job);
      $cnt++;

      $memory = memory_get_usage();

      $this-&amp;gt;log('memory:' . $memory);

      if($memory &amp;gt; 1000000) {
        $this-&amp;gt;log('exiting run due to memory limit');
        exit;
      }

      usleep(10);
    }
  }

  private function log($txt) {
    file_put_contents($this-&amp;gt;path . '/log/worker.txt', $txt . &quot;\n&quot;, FILE_APPEND);
  }
}

$worker = new Worker(dirname($argv[0]));
$worker-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Daemonize the worker process.&lt;/h2&gt;

&lt;p&gt;Now the only problem we have is keeping the worker process running. &lt;a href=&quot;http://cr.yp.to/daemontools.html&quot;&gt;Deamontools&lt;/a&gt; are a collection of binaries that can supervise processes and restart them when they stop.&lt;/p&gt;

&lt;h3&gt;Installing daemontools&lt;/h3&gt;

&lt;p&gt;Again, installing on OSX is pretty straight forward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo port install daemontools&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need a shell script called &lt;code&gt;./run&lt;/code&gt; to be supervised by daemontools. Usually these go into a subfolder of &lt;code&gt;/service&lt;/code&gt;, but the macports installation uses &lt;code&gt;/opt/local/var/svscan/service&lt;/code&gt; instead. I chose to create a subfolder in my application and then symlink it into there. The shell script itself is pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
php ../worker.php&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now launch daemontools and you're up and away. Kick off the push script and the worker activity should show up nicely in the logfile.&lt;/p&gt;

&lt;p&gt;
In this case I am using daemontools to do this, but there are other tools to do it as well.
The best option seemed to be &lt;a href=&quot;http://supervisord.org/&quot;&gt;supervisord&lt;/a&gt;, but the download page was down when I did the proof of concept and I had to settle for something else. Supervisord also seems to be able to watch the memory footprint of a task so this bit in the worker script might be obsolete.&lt;/p&gt;

&lt;p&gt;There are also options to use init.d scripts, but my knowledge of that is lacking. If you cannot be bothered to daemonize, you could also just kick off a cron job.
&lt;/p&gt;

&lt;p&gt;I hope this is a helpful little writeup. Feel free to &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/queue_test.zip&quot;&gt;download the nicely zipped up demo code&lt;/a&gt;, and do drop a comment if you have anything to add.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Happy New Year 2010</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/happy-new-year-2010/index.html"/>
      <updated>2010-01-04T06:52:37+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/happy-new-year-2010/happy-new-year-2010</id>
      <content type="html">&lt;p&gt;It's four days into the new year, and I've had more sunshine in that short time than in the last 3 months together. I'm reasonably sure this applies to Pascal as well, given that at the moment he's making sure the southern hemisphere gets a little CwS love, too. Seems like a good opportunity to say thanks to you, for reading and contributing to our site over the last 12 months.&lt;/p&gt;

&lt;h2&gt;What was&lt;/h2&gt;
&lt;p&gt;The most exciting thing for CwS in 2008 must've been that Pascal and I got to spend about half the year working together, as real life desk neighbours at Photobox, when I managed to hire him for 2 projects in spring and autumn.&lt;/p&gt;

&lt;p&gt;We got around to churn out some lovely best practice code (almost all Zend Framework based) and wrote about it. Gaining some traction with CwS, we started looking into other distribution channels, &lt;a href=&quot;http://twitter.com/contentwstyle&quot;&gt;Twitter&lt;/a&gt; being the first, and our articles were gladly picked up by &lt;a href=&quot;http://www.phpdeveloper.org&quot;&gt;PHPDeveloper&lt;/a&gt; as well as the &lt;a href=&quot;http://devzone.zend.com&quot;&gt;Zend DevZone&lt;/a&gt;. I always meant to write about the increase of traffic and the benefit of hustling your site a little bit (we received some very helpful comments in the process, so it's not all just numbers and pretty graphs), but didn't get around to it. I guess you'll have to trust me on this one.&lt;/p&gt;

&lt;p&gt;What definitely wasn't was a series about tips I wanted to publish for people newer to the world of web development, mostly because &lt;a href=&quot;http://www.456bereastreet.com/archive/200812/quick_tips_for_web_developers_and_web_designers/&quot;&gt;Roger Johansson had the same idea&lt;/a&gt; round-about the same time, and he does it so much better.&lt;/p&gt;

&lt;p&gt;For your collective and individual enjoyment, I've grouped our 15 most popular posts in (not necessarily from) 2009:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-css-framework&quot;&gt;A CSS Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps&quot;&gt;Fixing the Back Button and Enabling Bookmarking for AJAX Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/modular-css&quot;&gt;Modular CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/unit-testing-controllers-with-zend-framework&quot;&gt;Unit testing controllers with Zend Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/css-background-image-on-html-image-element&quot;&gt;CSS Background image on html image element?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/deploying-php-applications-with-vlad&quot;&gt;Deploying PHP applications with Vlad and SVN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/dynamic-tables-with-xslt&quot;&gt;Dynamic tables with XSLT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/clean-urls-for-a-better-search-engine-ranking&quot;&gt;Clean URLs for a better search engine ranking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/find-your-node-advanced-xpath-commands&quot;&gt;Find your node: Advanced XPATH commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-caching-pattern-for-models&quot;&gt;A caching pattern for models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/xml-validation-in-php&quot;&gt;XML validation in PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/4-ssh-config-tips-for-faster-remote-working&quot;&gt;4 ssh config tips for faster remote working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/css-is-worthless&quot;&gt;CSS is Worthless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/my-take-on-jquery-charts&quot;&gt;My take on jQuery charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/unit-testing-web-service-based-models-in-zend-framework&quot;&gt;Unit testing web service based models in Zend Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What will be (maybe)&lt;/h2&gt;
&lt;p&gt;Of course we're looking forward to another year of CwS that will discuss all aspects of web technology that we deal with, client and server side. Right now there are many exciting news on the horizon (if not already knocking on our door daily), I'm thinking Zend Framework 2.0, PHP 5.3, push concepts such as Comet (especially in the PHP world), and of course the exciting new world of HTML 5 with all its possibilities and pitfalls. The last word in deployment and build processes is surely not spoken without having a look at integrating dpkg or rpm mechanisms, and in more concrete news, I'm doing a PHP certification this year, so hopefully you'll hear some of my experience learned there, too.&lt;/p&gt;
&lt;p&gt;Of course we're still open for contributors to write a post here and there, so feel free to contact us if you've got an idea or maybe simply a nice code example you'd like to share.&lt;/p&gt;
&lt;p&gt;This leaves me with wishing you all a happy new year, thanks again for being such a smart audience. Here's to you and a great 2010,&lt;/p&gt;
&lt;p&gt;from all of us at Content with Style&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Viewing BLOB content in phpMyAdmin</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/viewing-blob-content-in-phpmyadmin/index.html"/>
      <updated>2009-11-20T08:25:39+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/viewing-blob-content-in-phpmyadmin/viewing-blob-content-in-phpmyadmin</id>
      <content type="html">&lt;p&gt;In my phpMyAdmin installation, version 3.1.1, none of the old style config settings such as&lt;/p&gt;
&lt;pre&gt;$cfgShowBlob = true&lt;/pre&gt;
&lt;p&gt; or&lt;/p&gt;
&lt;pre&gt;$cfg['ShowBlob']&lt;/pre&gt;
&lt;p&gt;had any effect, and the solution was terribly elusive. &quot;view blob&quot;, &quot;show blob&quot;, &quot;display blob&quot;, all that Google suggested were people asking the same question, at various ages of the internet.&lt;/p&gt;
&lt;p&gt;Even more annoying, the most common answer was &quot;Why would you want to do that?&quot;, and too many times I was reading that they shouldn't be read anyway, because it could be large amounts of, well, binary data, bla bla bla.&lt;/p&gt;
&lt;p&gt;In my case this makes very much sense, though, because I was looking at serialized data objects. Don't ask me why it's not a TEXT field (another smartypants suggestion in a forum), that's just the setup I was dealing with.&lt;/p&gt;
&lt;p&gt;After much digging and the wish for a search engine that will suggest better search terms to me, I finally decided to bother the source instead, and found &quot;display_blob&quot;. Hurray! It comes in this form:&lt;/p&gt;
&lt;pre&gt;$_SESSION['userconf']['display_blob'];&lt;/pre&gt;
&lt;p&gt;All you need to do is set this session variable (possibly by sticking it into the config? I didn't try it out), or alternatively: Open the content frame and put&lt;/p&gt; &lt;pre&gt;&amp;amp;display_blob=true&lt;/pre&gt;
&lt;p&gt;into the querystring, and it will keep it in the session for you, when you use the frameset as normal afterwards.&lt;/p&gt;
&lt;p&gt;While writing this, I also &lt;a href=&quot;http://www.yegq.org/archives/177&quot;&gt;saw this page&lt;/a&gt;, can anyone translate?&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Fulltext searches with Xapian and PHP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/searching-with-xapian-and-php/index.html"/>
      <updated>2009-11-03T16:35:15+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/searching-with-xapian-and-php/searching-with-xapian-and-php</id>
      <content type="html">&lt;p&gt;Sometimes MySQL just isn't quick enough. Especially when it comes to fulltext searches. Everything needs to be indexed correctly, and if we're using different fields with different weights for a relevance percentage, things get very complicated quickly. &lt;a href=&quot;http://xapian.org/&quot;&gt;Xapian&lt;/a&gt; to the rescue.&lt;/p&gt;

&lt;h2&gt;What is Xapian?&lt;/h2&gt;

&lt;p&gt;Xapian is a Search Engine Library, similar to Lucene and Sphinx. It's compiled from C++ code and therefore pretty low level. There are PHP, Perl and Python bindings available for it, which are straight forward to use. Packages are available for Ubuntu and Red Hat, it compiles on OSX and you can run it on Windows via CygWin.&lt;/p&gt;

&lt;h2&gt;Demo Scripts&lt;/h2&gt;

&lt;p&gt;
Rather than explaining why and how, I decided to create some demo scripts instead.
The XapianWrapper PHP class I've created is quite large, so feel free to &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/xapian-example.zip&quot;&gt;download the example zip file&lt;/a&gt; as well.
&lt;/p&gt;

&lt;h3&gt;db.sql&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
CREATE DATABASE `demo`;

CREATE TABLE `demo`.`demo` (
`id` INT( 10 ) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY ,
`unique_key` VARCHAR( 255 ) NOT NULL ,
`name` VARCHAR( 255 ) NULL DEFAULT NULL ,
`summary` TEXT NULL DEFAULT NULL ,
`date` DATETIME NULL DEFAULT NULL ,
UNIQUE (`unique_key`));

INSERT INTO `demo`.`demo`
(`id`, `unique_key`, `name`, `summary`, `date`)
VALUES (NULL, 'foo', 'foo', 'foo bar test', '2008-11-05 00:00:00'),
(NULL , 'bar', 'bar', 'test foo bar', '2009-11-05 00:00:00');
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;XapianWrapper.php&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
// includes
require_once 'xapian.php';

// main class
class XapianWrapper {
  const XAPIAN_FIELD_URL = 0;
  const XAPIAN_FIELD_NAME = 1;
  const XAPIAN_FIELD_DATE = 2;
  const XAPIAN_FIELD_UID = 3;
  const XAPIAN_FIELD_SUMMARY = 4;
  const XAPIAN_PREFIX_UID = &quot;UID:&quot;;

  const SETTINGS_XAPIAN_DB = './xapian_db';

  const SETTINGS_MYSQL_HOST = 'localhost';
  const SETTINGS_MYSQL_USER = 'root';
  const SETTINGS_MYSQL_PASS = 'root';
  const SETTINGS_MYSQL_DB = 'demo';
  const SETTINGS_MYSQL_TABLE = 'demo';

  const DEFAULT_COUNT = 10;

  private $mysql_link;
  private $category_cache;

  private $xapian_read_db;
  private $xapian_write_db;
  private $xapian_stemmer;
  private $xapian_indexer;
  private $xapian_enquire;

  private function xapian_init_readonly() {
    try{
      $this-&amp;gt;xapian_read_db = new XapianDatabase(self::SETTINGS_XAPIAN_DB);
      $this-&amp;gt;xapian_stemmer = new XapianStem(&quot;english&quot;);
      $this-&amp;gt;xapian_enquire = new XapianEnquire($this-&amp;gt;xapian_read_db);
    } catch(Exception $e) {
      throw new Exception('Could initialize Xapian: ' . $e-&gt;getMessage());
    }
  }

  private function xapian_init_writable() {
    try{
      $this-&amp;gt;xapian_write_db = new XapianWritableDatabase(self::SETTINGS_XAPIAN_DB, Xapian::DB_CREATE_OR_OPEN);
      $this-&amp;gt;xapian_indexer = new XapianTermGenerator();
      $this-&amp;gt;xapian_stemmer = new XapianStem(&quot;english&quot;);
      $this-&amp;gt;xapian_indexer-&amp;gt;set_stemmer($this-&amp;gt;xapian_stemmer);
    } catch(Exception $e) {
      throw new Exception('Could initialize Xapian: ' . $e-&gt;getMessage());
    }
  }

  private function mysql_init() {
    $this-&amp;gt;mysql_link = mysql_connect(self::SETTINGS_MYSQL_HOST, self::SETTINGS_MYSQL_USER, self::SETTINGS_MYSQL_PASS);
    if (!$this-&amp;gt;mysql_link) {
      throw new Exception('Could not connect: ' . mysql_error());
    }

    $db_selected = mysql_select_db(self::SETTINGS_MYSQL_DB, $this-&amp;gt;mysql_link);
    if (!$db_selected) {
      throw new Exception('Can\'t use db : ' . mysql_error());
    }
  }

  /**
   * Index method
   *
   */
  public function index($params) {
    $this-&amp;gt;xapian_init_writable();
    $this-&amp;gt;mysql_init();

    $start = microtime(true);

    $response = new stdClass();
    $response-&amp;gt;indexed = array();

    $offset = (isset($params['offset'])) ? intval($params['offset']) : 0;
    $count = (isset($params['count'])) ? intval($params['count']) : self::DEFAULT_COUNT;
    $sql = 'SELECT * FROM '.self::SETTINGS_MYSQL_TABLE.' LIMIT ' . $offset . ', ' . $count . ';';

    $result = mysql_query($sql);

    if (!$result) {
      throw new Exception('Invalid query: ' . mysql_error());
    }

    $this-&amp;gt;xapian_write_db-&amp;gt;begin_transaction();

    while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
       $response-&amp;gt;indexed[] = $this-&amp;gt;index_row($row);
    }

    $this-&amp;gt;xapian_write_db-&amp;gt;commit_transaction();
    mysql_free_result($result);
    mysql_close($this-&amp;gt;mysql_link);

    return $response;
  }


  private function index_row($row) {
    $doc = new XapianDocument();

    $this-&amp;gt;xapian_indexer-&amp;gt;set_document($doc);
    $this-&amp;gt;xapian_indexer-&amp;gt;index_text($row['name'],50);
    $this-&amp;gt;xapian_indexer-&amp;gt;index_text($row['summary'], 1);

    $GUID = self::XAPIAN_PREFIX_UID . $row['unique_key'];
    $doc-&amp;gt;add_term($GUID);

    $doc-&amp;gt;add_value(self::XAPIAN_FIELD_URL, $row['url']);
    $doc-&amp;gt;add_value(self::XAPIAN_FIELD_DATE, date('Ymd', strtotime($row['date'])));
    $doc-&amp;gt;add_value(self::XAPIAN_FIELD_UID, $row['unique_key']);
    $doc-&amp;gt;add_value(self::XAPIAN_FIELD_NAME, $row['name']);
    $doc-&amp;gt;add_value(self::XAPIAN_FIELD_SUMMARY, $row['summary']);

    $this-&amp;gt;xapian_write_db-&amp;gt;replace_document(strval($GUID), $doc);

    $row_response = array();
    $row_response['name'] = $row['name'];
    $row_response['guid'] = $row['unique_key'];
    $row_response['url'] = $row['url'];
    return $row_response;
  }

  /**
   * Delete method
   *
   */
  public function delete($params) {
    $this-&amp;gt;xapian_init_writable();

    $this-&amp;gt;xapian_write_db-&amp;gt;begin_transaction();

    $response = array();

    foreach($params['items'] as $param_guid) {
      $GUID = self::XAPIAN_PREFIX_UID . $param_guid;
      $this-&amp;gt;xapian_write_db-&amp;gt;delete_document(strval($GUID));
      $response[] = $param_guid;
    }

    $this-&amp;gt;xapian_write_db-&amp;gt;commit_transaction();
    return $response;
  }

  /**
   * Search method
   *
   */
  public function search($params) {
    $this-&amp;gt;xapian_init_readonly();

    $start = microtime(true);

    // queries array to later construct full query
    $arr_queries = array();

    // from date
    if(!empty($params['date_from'])) {
      $arr_queries[] = new XapianQuery(XapianQuery::OP_VALUE_GE, 6, date('Ymd', strtotime($params['date_from'])));
    }

    // to date
    if(!empty($params['date_to'])) {
      $arr_queries[] = new XapianQuery(XapianQuery::OP_VALUE_LE, 6, date('Ymd', strtotime($params['date_to'])));
    }

    // unique key
    if(!empty($params['unique_key'])) {
      $arr_queries[] = new XapianQuery(self::XAPIAN_PREFIX_UID . $params['unique_key']);
    }

    // normal search query parsed
    if(!empty($params['search'])) {
      $qp = new XapianQueryParser();
      $qp-&amp;gt;set_stemmer($this-&amp;gt;xapian_stemmer);
      $qp-&amp;gt;set_database($this-&amp;gt;xapian_read_db);
      $qp-&amp;gt;set_stemming_strategy(XapianQueryParser::STEM_SOME);
      $arr_queries[] = $qp-&amp;gt;parse_query($params['search']);
    }

    // Find the results for the query.
        // construct final query
    $query = array_pop($arr_queries);

    foreach($arr_queries as $sq) {
      $query = new XapianQuery(XapianQuery::OP_AND, $query, $sq);
    }
    $this-&amp;gt;xapian_enquire-&amp;gt;set_query($query);

    // set the count to the specified params
    $offset = (isset($params['offset'])) ? intval($params['offset']) : 0;
    $count = (isset($params['count'])) ? intval($params['count']) : self::DEFAULT_COUNT;
    $matches = $this-&amp;gt;xapian_enquire-&amp;gt;get_mset($offset, $count);

    $response = new stdClass();
    $response-&amp;gt;result_count = $matches-&amp;gt;get_matches_estimated();
    $results = array();

    $i = $matches-&amp;gt;begin();
    while (!$i-&amp;gt;equals($matches-&amp;gt;end())) {
      $m = array();

      $n = $i-&amp;gt;get_rank() + 1;
      $doc = $i-&amp;gt;get_document();

      $m['position'] = $n;
      $m['url'] = $doc-&amp;gt;get_value(self::XAPIAN_FIELD_URL);
      $m['name'] = $doc-&amp;gt;get_value(self::XAPIAN_FIELD_NAME);
      $m['summary'] = $doc-&amp;gt;get_value(self::XAPIAN_FIELD_SUMMARY);
      $m['date'] = $doc-&amp;gt;get_value(self::XAPIAN_FIELD_DATE);
      $m['unique_key'] = $doc-&amp;gt;get_value(self::XAPIAN_FIELD_UID);
      $m['percent'] = $i-&amp;gt;get_percent();

      $results[count($results)] = $m;
      $i-&amp;gt;next();
    }

    $response-&amp;gt;results = $results;
    $end = microtime(true);

    // runtime info
    $response-&amp;gt;execute = new stdClass();
    $response-&amp;gt;execute-&amp;gt;call = 'search';
    $response-&amp;gt;execute-&amp;gt;offset = $offset;
    $response-&amp;gt;execute-&amp;gt;count = $count;
    $response-&amp;gt;execute-&amp;gt;start = $start;
    $response-&amp;gt;execute-&amp;gt;end = $end;
    $response-&amp;gt;execute-&amp;gt;time = $end - $start;

    // debug stuff
    $response-&amp;gt;execute-&amp;gt;debug = $query-&amp;gt;get_description();

    return $response;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;index.php&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php

require_once 'XapianWrapper.php';

$x = new XapianWrapper();
$res = $x-&amp;gt;index(array());
print_r($res);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;search.php&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php

require_once 'XapianWrapper.php';

$x = new XapianWrapper();
$params = array('search' =&amp;gt; 'foo');
$res = $x-&amp;gt;search($params);
print_r($res);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;delete.php&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php

require_once 'XapianWrapper.php';
$x = new XapianWrapper();
$params = array(
	'items' =&amp;gt; array('foo'),
);
$res = $x-&amp;gt;delete($params);
print_r($res);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Using the example&lt;/h3&gt;

&lt;p&gt;Once you've unzipped the &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/xapian-example.zip&quot;&gt;expamples&lt;/a&gt;, you should now be able to create the DB from the db.sql file, and run the php examples via command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
bash$ php index.php
stdClass Object
(
    [indexed] =&amp;gt; Array
        (
            [0] =&amp;gt; Array
                (
                    [name] =&amp;gt; foo
                    [guid] =&amp;gt; foo
                    [url] =&amp;gt;
                )

            [1] =&amp;gt; Array
                (
                    [name] =&amp;gt; bar
                    [guid] =&amp;gt; bar
                    [url] =&amp;gt;
                )

        )

)
bash$ php search.php
stdClass Object
(
    [result_count] =&amp;gt; 2
    [results] =&amp;gt; Array
        (
            [0] =&amp;gt; Array
                (
                    [position] =&amp;gt; 1
                    [url] =&amp;gt;
                    [name] =&amp;gt; foo
                    [summary] =&amp;gt; foo bar test
                    [date] =&amp;gt; 20081105
                    [unique_key] =&amp;gt; foo
                    [percent] =&amp;gt; 100
                )

            [1] =&amp;gt; Array
                (
                    [position] =&amp;gt; 2
                    [url] =&amp;gt;
                    [name] =&amp;gt; bar
                    [summary] =&amp;gt; test foo bar
                    [date] =&amp;gt; 20091105
                    [unique_key] =&amp;gt; bar
                    [percent] =&amp;gt; 50
                )

        )

    [execute] =&amp;gt; stdClass Object
        (
            [call] =&amp;gt; search
            [offset] =&amp;gt; 0
            [count] =&amp;gt; 10
            [start] =&amp;gt; 1256674866.79
            [end] =&amp;gt; 1256674866.79
            [time] =&amp;gt; 0.000944852828979
            [debug] =&amp;gt; Xapian::Query(Zfoo:(pos=1))
        )

)
bash$ php delete.php
Array
(
    [0] =&amp;gt; foo
)
bash$ php search.php
stdClass Object
(
    [result_count] =&amp;gt; 1
    [results] =&amp;gt; Array
        (
            [0] =&amp;gt; Array
                (
                    [position] =&amp;gt; 1
                    [url] =&amp;gt;
                    [name] =&amp;gt; bar
                    [summary] =&amp;gt; test foo bar
                    [date] =&amp;gt; 20091105
                    [unique_key] =&amp;gt; bar
                    [percent] =&amp;gt; 100
                )

        )

    [execute] =&amp;gt; stdClass Object
        (
            [call] =&amp;gt; search
            [offset] =&amp;gt; 0
            [count] =&amp;gt; 10
            [start] =&amp;gt; 1256674876.02
            [end] =&amp;gt; 1256674876.02
            [time] =&amp;gt; 0.000872850418091
            [debug] =&amp;gt; Xapian::Query(Zfoo:(pos=1))
        )

)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, I leave it up to you to amend the examples to suit your individual needs. As always any feedback or improvements are welcome. Happy indexing and searching everyone.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Quick helper script for ZF view translations  </title>
      <link href="http://contentwithstyle.pascalopitz.com/content/quick-helper-script-for-zf-view-translations--/index.html"/>
      <updated>2009-10-29T10:34:01+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/quick-helper-script-for-zf-view-translations--/quick-helper-script-for-zf-view-translations--</id>
      <content type="html">&lt;p&gt;Manual copy and paste jobs are a pain. Faced with the prospect of internationalizing 30+ big view files, I thought there had to be a better way. When I started to use the reg exp search facility in Textmate, the penny dropped. A helper script is what was needed.&lt;/p&gt;

&lt;h2&gt;PHP cli script 'internationalize.php'&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
// check for CLI
if (php_sapi_name() != &quot;cli&quot;) {
  print &quot;This script is written to run under the command line ('cli') version of\n&quot;;
  print &quot;the PHP interpreter, but you're using the '&quot;.php_sapi_name().&quot;' version\n&quot;;
  exit(1);
}

// check for valid syntax
if(empty($argv[1])) {
  die('syntax: php internationalize.php &amp;lt;file&amp;gt; &amp;lt;optional token prefix&amp;gt;');
}


function get_key($str, $prefix) {
  $key = str_replace(' ', '_', strtolower($str));
  $key = preg_replace('/[\\:\\.\\,\\!\\?]{0,}/', '', $key);
  $prefix = $GLOBALS['prefix'];
  return $prefix.$key;
}

function key_replace($matches) {
  if(trim($matches[2]) != &quot;&quot;) {
    $key = get_key($matches[2]);
    return '&amp;lt;'.$matches[1].'&amp;gt;&amp;lt;?php echo $this-&amp;gt;translate-&amp;gt;_(&quot;'.$key.'&quot;); ?&amp;gt;&amp;lt;/'.$matches[3].'&amp;gt;';
  } else {
    return $matches[0];
  }
}


// get a prefix for the tokens
$prefix = (!empty($argv[2])) ? $argv[2] . '_' : '';

// identify and load file
$file = realpath($argv[1]);
$contents = file_get_contents($file);

// create backup file
copy($file, $file.'.bak');

// reg exp to find all text in between tags
$pattern = '/&amp;lt;([\\w \\=\\%\\&quot;\\(\\)\\\'\\:]+)&amp;gt;([\\w\\s\\:\\.\\,\\!\\?_-]+)&amp;lt;\\/([\\w]+)&amp;gt;/';

// replace with translation calls
$translated = preg_replace_callback($pattern, 'key_replace', $contents);
file_put_contents($file, $translated);


// start generate ini file
$rows = array();
$matches = array();
preg_match_all($pattern, $contents, $matches);

for($i=0; $i&amp;lt;count($matches[1]); $i++) {
  if(trim($matches[2][$i]) != &quot;&quot;) {
    $key = get_key($matches[2][$i]);
    $rows[] = $key.'=&quot;'.addslashes($matches[2][$i]).'&quot;';
  }
}

$ini_string = implode(&quot;\n&quot;, $rows);
file_put_contents($file.'.translation.ini', $ini_string);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Example view file 'test.phtml'&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;p&amp;gt;Fooo&amp;lt;/p&amp;gt;

&amp;lt;blockquote style=&quot;test&quot;&amp;gt;Ich teste gerade&amp;lt;/blockquote&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;Test list&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Test list  2&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Translate it!&lt;/h2&gt;

&lt;p&gt;Now we're set. We just need to call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
php internationalize.php test.phtml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We end up with a this in test.phtml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;p&amp;gt;&amp;lt;?php echo $this-&amp;gt;translate-&amp;gt;_(&quot;fooo&quot;); ?&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;blockquote style=&quot;test&quot;&amp;gt;&amp;lt;?php echo $this-&amp;gt;translate-&amp;gt;_(&quot;ich_teste_gerade&quot;); ?&amp;gt;&amp;lt;/blockquote&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;?php echo $this-&amp;gt;translate-&amp;gt;_(&quot;test_list&quot;); ?&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;?php echo $this-&amp;gt;translate-&amp;gt;_(&quot;test_list__2&quot;); ?&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this in test.phtml.translation.ini:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
fooo=&quot;Fooo&quot;
ich_teste_gerade=&quot;Ich teste gerade&quot;
test_list=&quot;Test list&quot;
test_list__2=&quot;Test list  2&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;In progress&lt;/h2&gt;

&lt;p&gt;This is not meant as THE solution. It's merely a quick script I put together in a couple of minutes. There are a couple of things that it can't do, like translating attributes and all that.
&lt;/p&gt;

&lt;p&gt;I'm no reg exp guru, and if you can improve please feel free to comment. Otherwise, have fun.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Quick lint check on changed php files with svn st and xargs</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/quick-lint-check-on-changed-php-files-with-svn-st-and-xargs/index.html"/>
      <updated>2009-10-20T10:12:05+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/quick-lint-check-on-changed-php-files-with-svn-st-and-xargs/quick-lint-check-on-changed-php-files-with-svn-st-and-xargs</id>
      <content type="html">&lt;p&gt;If you haven't done it in a &lt;a href=&quot;http://blueparabola.com/blog/subversion-commit-hooks-php&quot;&gt;hook&lt;/a&gt; already, here's the quick way to check all your changed files for syntax errors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
svn st | grep .php | grep M | cut -c 8- | xargs -n1 php -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
I use xargs quite a lot lately, but some good clues came from David Singletons post &quot;&lt;a href=&quot;http://dsingleton.co.uk/blog/using-xargs-bash-example&quot;&gt;Using xargs like you mean it&lt;/a&gt;&quot;.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Zend Framework DB and Mysql pre 5.17</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/zend-framework-db-and-mysql-pre-5.17/index.html"/>
      <updated>2009-10-08T10:38:34+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/zend-framework-db-and-mysql-pre-5.17/zend-framework-db-and-mysql-pre-5.17</id>
      <content type="html">&lt;p&gt;I was getting weird errors when running multiple queries with Zend Framework, that I just couldn't replicate on my local environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Exception information:

Message: SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active. Consider using PDOStatement::fetchAll(). Alternatively, if your code is only ever going to run against mysql, you may enable query buffering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.
Stack trace:

#0 /project/ZendFramework-1.7.1/Zend/Db/Statement.php(109): Zend_Db_Statement_Pdo-&amp;gt;_prepare('UPDATE `foo...')
#1 /project/ZendFramework-1.7.1/Zend/Db/Adapter/Pdo/Abstract.php(170): Zend_Db_Statement-&amp;gt;__construct(Object(Zend_Db_Adapter_Pdo_Mysql), 'UPDATE `foo...')
#2 /project/ZendFramework-1.7.1/Zend/Db/Adapter/Abstract.php(429): Zend_Db_Adapter_Pdo_Abstract-&amp;gt;prepare('UPDATE `foo...')
#3 /project/ZendFramework-1.7.1/Zend/Db/Adapter/Pdo/Abstract.php(220): Zend_Db_Adapter_Abstract-&amp;gt;query('UPDATE `foo...', Array)
#4 /project/ZendFramework-1.7.1/Zend/Db/Adapter/Abstract.php(551): Zend_Db_Adapter_Pdo_Abstract-&amp;gt;query('UPDATE `foo...', Array)

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out the server runs MySQL pre 5.17:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$ yum list installed | grep mysql
mysql.i386                              5.0.45-7.el5                   installed
mysql-server.i386                       5.0.45-7.el5                   installed
php-mysql.i386                          5.1.6-23.2.el5_3               installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to fix this we need to turn on query buffering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$pdoParams = array(
    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY =&amp;gt; true
);

$params = array(
    'host'           =&amp;gt; '127.0.0.1',
    'username'       =&amp;gt; 'webuser',
    'password'       =&amp;gt; 'xxxxxxxx',
    'dbname'         =&amp;gt; 'test',
    'driver_options' =&amp;gt; $pdoParams
);

$db = Zend_Db::factory('Pdo_Mysql', $params);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Thanks to &lt;a href=&quot;http://mysqltalk.wordpress.com/&quot;&gt;Joe Devon from MySQL Talk&lt;/a&gt; for &lt;a href=&quot;http://mysqltalk.wordpress.com/2008/11/09/enabling-mysql-query-cache-with-zend-framework-through-pdomysql_attr_use_buffered_query/&quot;&gt;pointing out the relevant part of the Zend Framework documentation&lt;/a&gt; that points out why it happens and how to fix it.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Looking after your health is important</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/looking-after-your-health-is-important/index.html"/>
      <updated>2009-08-30T19:15:33+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/looking-after-your-health-is-important/looking-after-your-health-is-important</id>
      <content type="html">&lt;p&gt;About three months ago I suffered a contractors nightmare: An injury that meant I couldn't work for quite some time.&lt;/p&gt;

&lt;p&gt;In my instance it was a very nasty episode of lower back pain, which made me go through a month of not being able to tie my shoes. Of course it could have been worse. I did have a break planned anyway (ironically it was to get fit and do the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dunwich_Dynamo&quot;&gt;Dunwich Dynamo&lt;/a&gt;) so I didn't have to bail out of a current contracting situation, and I was lucky that my osteopath didn't confirm my fears and sent me to hospital to have any surgery done. However, I didn't feel OK with taking on any contracting job for two and a half months, and I did spend quite some money on sessions to get my spine clicked into position. Also, following the routine I was recommended means I have to do back and core strength exercises every day.&lt;/p&gt;

&lt;p&gt;This is why I want to give you contractors out there a couple of words on your way:&lt;/p&gt;

&lt;h2&gt;Stay healthy&lt;/h2&gt;

&lt;p&gt;I know it sounds lame, but you might want to consider doing the exercises before the pain comes. This might keep you fit and healthy to cope with 8 to 10 hours sitting each day, plus it might also help to balance out the stress that sometimes comes with contracting work, deadlines and delivery dates.&lt;/p&gt;

&lt;h2&gt;Look at your working environment&lt;/h2&gt;

&lt;p&gt;If you can help it, make sure you get a good chair, the computer set up and all the rest. I am sure you know the drill.&lt;/p&gt;

&lt;h2&gt;Insurance&lt;/h2&gt;

&lt;p&gt;In my case it didn't really matter that much, but what if I had kids, a mortgage and an ongoing contract? Clearly I should be insured against loss of income? There's a &lt;a href=&quot;http://www.contractoruk.com/money/phi.html&quot;&gt;pretty neat guide on Contractors UK about what to look for when you purchase insurance&lt;/a&gt;. I recommend reading it and contemplating the necessary steps.&lt;/p&gt;

&lt;br /&gt;
&lt;br /&gt;

&lt;p&gt;Finally, if you're suffering from back pain like I do, have a look at &lt;a href=&quot;http://www.youtube.com/watch?v=LodlEH6TluM&amp;amp;feature=PlayList&amp;amp;p=FEC7C9FF242C8C6C&amp;amp;playnext=1&amp;amp;playnext_from=PL&amp;amp;index=22&quot;&gt;youtube&lt;/a&gt;. The videos of yoga exercises have given me some good clues of what to incorporate into my exercise routine.&lt;/p&gt;

&lt;p&gt;Also, If you have any tips to share, be it about injury prevention, workplace set up or experiences with insurance claims, please do!&lt;/p&gt;
</content>
    </entry>

    <entry>
      <title>Remove nodes in SimpleXMLElement</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/remove-node-in-simplexml/index.html"/>
      <updated>2009-07-15T18:56:07+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/remove-node-in-simplexml/remove-node-in-simplexml</id>
      <content type="html">&lt;blockquote&gt;&lt;p&gt;SimpleXML provides no way to remove [...] XML nodes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You might think otherwise and &lt;a href=&quot;http://www.kavoir.com/2008/12/how-to-delete-remove-nodes-in-simplexml.html&quot;&gt;hack it with &lt;code&gt;unset()&lt;/code&gt;&lt;/a&gt;, as it was done in one of the web applications I inherited at work, but today I found out that this works under some conditions, but not with every setup. I'd love to tell you what exactly the differences are that make it break, but I didn't spend the time tracking it down.&lt;/p&gt;

&lt;p&gt;I can tell you what &lt;code&gt;unset()&lt;/code&gt; did the the specific setup (PHP 5.1.2 on Windows Vista): Nothing. It happily executed it without error or warning, but also without changing anything.&lt;/p&gt;

&lt;p&gt;Luckily S. Gehrig had a good and in my eyes not-hacky idea in &lt;a href=&quot;http://stackoverflow.com/questions/262351/remove-a-child-with-a-specific-attribute-in-simplexml-for-php#262556&quot;&gt;a thread on stackoverflow.com&lt;/a&gt;: He suggests to use the DOM, specifically &lt;code&gt;dom_import_simplexml()&lt;/code&gt;, to then simply use &lt;code&gt;removeChild()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my case I had a predictable XML structure to parse, and only needed to kick out the first of a set of nodes, so my solution (using the same xml setup as example) is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$data='&amp;lt;data&amp;gt;
    &amp;lt;seg id=&quot;A1&quot;/&amp;gt;
    &amp;lt;seg id=&quot;A5&quot;/&amp;gt;
    &amp;lt;seg id=&quot;A12&quot;/&amp;gt;
    &amp;lt;seg id=&quot;A29&quot;/&amp;gt;
    &amp;lt;seg id=&quot;A30&quot;/&amp;gt;
&amp;lt;/data&amp;gt;';
$doc=new SimpleXMLElement($data);
$dom=dom_import_simplexml($doc-&amp;gt;seg[0]);
$dom-&amp;gt;parentNode-&amp;gt;removeChild($dom);
echo $doc-&amp;gt;asXml();
/*outputs:
 * &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
 * &amp;lt;data&amp;gt;&amp;lt;seg id=&quot;A5&quot;/&amp;gt;&amp;lt;seg id=&quot;A12&quot;/&amp;gt;&amp;lt;seg id=&quot;A29&quot;/&amp;gt;&amp;lt;seg id=&quot;A30&quot;/&amp;gt;&amp;lt;/data&amp;gt;
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more complex XML structures (and probably closer to most real-life scenarios), I agree with S. in suggesting xpath as a way to detect your unwanted node.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Custom Zend Form Image Upload Element</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/custom-zend-form-image-upload-element/index.html"/>
      <updated>2009-06-29T23:59:44+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/custom-zend-form-image-upload-element/custom-zend-form-image-upload-element</id>
      <content type="html">&lt;p&gt;It really is time to post something, isn't it? Here is a quick way to have an image preview inside of a form based on Zend Form.&lt;/p&gt;

&lt;h2&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;I am using the auto include mechanism for this one, utilizing the PEAR naming convention, and all my files will sit underneath a Shared folder within the library folder.&lt;/p&gt;

&lt;h2&gt;A custom form Element&lt;/h2&gt;

&lt;p&gt;This is sitting under Shared/Form/Element/Image.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
class Shared_Form_Element_Image extends Zend_Form_Element
{
  public $helper = &quot;imageUpload&quot;;
  public $options;

  public function __construct($image_name, $attributes, $data_item) {
    $this-&gt;options = $data_item;
    parent::__construct($image_name, $attributes);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the form Element itself doesn't contain much code, but it does overwrite the property 'helper'. Which bings us to the next file:&lt;/p&gt;

&lt;h2&gt;A custom view helper&lt;/h2&gt;

&lt;p&gt;In our example, this sits under Shared/Views/Helpers/ImageUpload.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
class Shared_View_Helper_ImageUpload extends Zend_View_Helper_FormFile {

  public function imageUpload($name, $value, $attribs, $options) {
    $str = parent::formFile($name, $attribs = null);

    if(!empty($options[$name])) {
      $str .= $this-&gt;getImagePreview($name, $options[$name]);
    } else {
      $str .= $this-&gt;getEmptyPreview();
    }

    return $str;
  }

  private function getImagePreview($name, $path) {
    $img = ($this-&gt;view-&gt;doctype()-&gt;isXhtml())
       ? '&amp;amp;lt;img src=&quot;/'.$path.'&quot; alt=&quot;'.$name.'&quot; /&gt;'
       : '&amp;amp;lt;img src=&quot;/'.$path.'&quot; alt=&quot;'.$name.'&quot;&gt;';

    return '&amp;amp;lt;p class=&quot;preview&quot;&gt;'.$img.'&amp;amp;lt;/p&gt;';
  }

  private function getEmptyPreview() {
    return '&amp;amp;lt;p class=&quot;preview&quot;&gt;No image uploaded.&amp;amp;lt;/p&gt;';
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straight forward, I am just subclassing the FormFile helper that Zend brings us. However, you might want to create a different helper all together, if you need to use much more customized markup than I do.&lt;/p&gt;

&lt;h2&gt;Invocation&lt;/h2&gt;

&lt;p&gt;The form itself will no contain the image path as element, therefore we need to inject it into the form data inside the Controller, then invoke the Form with that data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$data['image'] = $image_path;
$form = new My_From($data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside our Form, all we need to do now is to add a new element using our custom ImageUpload element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$preview = new Shared_Form_Element_Image('image', null, $options);
$preview-&gt;addValidator('Count', false, 1);
$preview-&gt;addValidator('Extension', false, 'jpg,png,gif');
$preview-&gt;setLabel('My Image');
$fields[] = $preview;
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>

    <entry>
      <title>Getting phpunit to work with MAMP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/getting-phpunit-to-work-with-mamp/index.html"/>
      <updated>2009-05-13T12:41:46+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/getting-phpunit-to-work-with-mamp/getting-phpunit-to-work-with-mamp</id>
      <content type="html">&lt;p&gt;In order to run my unit tests, I needed to get phpunit running with MAMP. Thanks to the &lt;a href=&quot;http://mark-kirby.co.uk/2009/installing-phpunit-with-mamp/&quot;&gt;helpful post of Mark Kirby&lt;/a&gt; on this, I figured it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cd into your PEAR installation directory&lt;/li&gt;
&lt;li&gt;Make backup of phpunit file in bin folder&lt;/li&gt;
&lt;li&gt;Edit the original file, replace #!/usr/bin/php with #!/Applications/MAMP/bin/php5/bin/php&lt;/li&gt;
&lt;li&gt;3. Also remove this:
&lt;pre&gt;&lt;code&gt;
if (strpos('/usr/bin/php', '@php_bin') === 0) {
    set_include_path(dirname(__FILE__) . PATH_SEPARATOR . get_include_path());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;And finally, something that Mark didn't mention, add PEAR include path into /Applications/MAMP/conf/php5/php.ini&lt;/li&gt;
&lt;/ol&gt;</content>
    </entry>

    <entry>
      <title>Deploying PHP applications with Vlad and SVN</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/deploying-php-applications-with-vlad/index.html"/>
      <updated>2009-05-08T15:12:32+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/deploying-php-applications-with-vlad/deploying-php-applications-with-vlad</id>
      <content type="html">&lt;p&gt;In my current day job I have to deploy a number of web apps every few weeks.
The person I took over from did the whole thing in a manual and terribly cumbersome way:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;exporting the project locally,&lt;/li&gt;
	&lt;li&gt;zipping it up,&lt;/li&gt;
	&lt;li&gt;moving it to the server,&lt;/li&gt;
	&lt;li&gt;unpacking and symlinking it, to finally&lt;/li&gt;
	&lt;li&gt;run a small script that would set the correct production config, chmod log and cache folders etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following article, I'm going to describe how I went from there to deploying my Zend Framework-driven PHP apps with Vlad. To save yourself some time, feel free to &lt;a href=&quot;#ruby-setup&quot;&gt;skip the back story&lt;/a&gt;, the &lt;a href=&quot;#pre-configure&quot; title=&quot;skip installing ruby, gem and rake&quot;&gt;pre-requisite of installing ruby, gem and rake&lt;/a&gt;, or &lt;a href=&quot;#deployment-recipes&quot;&gt;go straight to the deployment recipes&lt;/a&gt;.&lt;/p&gt;

&lt;p id=&quot;backstory&quot;&gt;I did the above method for a while, and realized quickly how much time is wasted by this process. Remembering my efforts of &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/php-deployment-with-capistrano&quot;&gt;deploying PHP apps with Capistrano&lt;/a&gt;, I felt
it was time to set up an automated deployment routine. While re-reading the article, thoughts returned of how unwieldy and badly documented Capistrano came across,
and I started looking for something more lean, that wouldn't scare of my non-ruby colleagues who might have to do my job when I'm away.&lt;/p&gt;

&lt;p&gt;Very quickly I was lead to &lt;a href=&quot;http://rubyhitsquad.com/Vlad_the_Deployer.html&quot;&gt;Vlad the Deployer&lt;/a&gt;, replacing one deployment app where the person in charge of the name had one tipsy field day with, well, another.&lt;/p&gt;

&lt;p&gt;Taking it for its first spin, I felt that while there's a lot of confidence behind Vlad, the word &quot;simple&quot; crops up lots of times, but again,
the documentation is a bit of a thinking man's manual; As soon as you go beyond the initial example it skips a few steps here and there,
which can leave someone who is unfamiliar with the concept struggling. Maybe it's a case of &quot;it's advanced stuff, just live with it&quot;. &lt;/p&gt;

&lt;p&gt;Luckily I have my Capistrano experience, so I got started fairly quickly using Vlad for my own purposes. What I liked immediately about Vlad was that it declares as one of the project goals to &quot;use the right tool for the job (ssh, rsync, etc).&quot;&lt;/p&gt;

&lt;p id=&quot;vlad-goals&quot;&gt;My initial goal was to use Vlad&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;to have a deployment one-liner,&lt;/li&gt;
	&lt;li&gt;to roll back if needed, and&lt;/li&gt;
	&lt;li&gt;to be able to share logs and other assets between releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;example-app&quot;&gt;For the example below I created a demo Zend Framework application with &lt;a href=&quot;http://devzone.zend.com/article/4559-Zend_Tool-and-ZF-1.8&quot;&gt;Zend_Tool&lt;/a&gt;,
but what I'm describing should work for any PHP app out of the box, actually for any app, if you add any potential server tasks yourself.
This example is using Subversion, but there is other examples out there that'll tell you how to use it with Git and other SCM software.
&lt;/p&gt;

&lt;h2 id=&quot;ruby-setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To be able to deploy with Vlad you need to have the following 4 things set up:&lt;/p&gt;

&lt;h3&gt;1. unix/linux development platform with SVN&lt;/h3&gt;
&lt;p&gt;not much to add, Vlad works on Mac OS X and various linux flavours, but not under Windows. For this setup I'm assuming you're working with SVN.&lt;/p&gt;

&lt;h3&gt;2. server with SVN client&lt;/h3&gt;
&lt;p&gt;Your webserver should be able to work with SVN, and it should be able to reach your SVN repository.&lt;/p&gt;

&lt;h3&gt;3. install vlad dependencies&lt;/h3&gt;
&lt;p&gt;on OS X 10.5 you already have a rails installation coming with the developer tools; just do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% gem update rails&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively and on earlier OS X, you can use MacPorts, to install Ruby with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% port install ruby&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might also be able to use fink, and on debian/ubuntu you can install via aptitude&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
% sudo apt-get install ruby
% sudo apt-get install rubygems&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other platforms and compiling from source see here:&lt;br/&gt;
&lt;a href=&quot;http://www.ruby-lang.org/en/downloads/&quot;&gt;http://www.ruby-lang.org/en/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you need to install Rake. For all systems, to update gem and install Rake, do the following. You don't need to &lt;code&gt;gem update&lt;/code&gt; if you started from scratch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
% gem update --system
% gem update&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.virtualmin.com/index.php?option=com_flyspray&amp;Itemid=82&amp;do=details&amp;task_id=4901&amp;Itemid=82&amp;project=1&amp;pagenum=4&quot;&gt;Gem may fail initially&lt;/a&gt; - if so this is due to a bug in the gem command and requires you to edit the gem script (found with the command &lt;code&gt;which gem&lt;/code&gt; on the command line, it's probably in &lt;code&gt;/usr/bin/gem&lt;/code&gt;) by adding to the require statements (under &lt;code&gt;require 'rubygems'&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
require 'rubygems/gem_runner'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, to install Rake itself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% gem install rake&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 3 more dependencies,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hoe&lt;/li&gt;
&lt;li&gt;Rubyforge&lt;/li&gt;
&lt;li&gt;open4&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;but they're installed automatically with the next step.&lt;/p&gt;

&lt;h3&gt;4. install vlad as a gem&lt;/h3&gt;
&lt;p&gt;To install vlad as a gem, all you need to do is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% sudo gem install vlad&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while allowing for dependencies to be installed, which is set by default. Congratulations, you're ready to configure Vlad.&lt;/p&gt;

&lt;h2 id=&quot;pre-configure&quot;&gt;Pre-Configure&lt;/h2&gt;

&lt;p&gt;As Vlad is working closely with your system tools, you should set up your SSH for it first. You need to make sure the remote user is set up correctly, and you'll want some way of not having to enter your password a million times. Luckily &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/4-ssh-config-tips-for-faster-remote-working&quot; title=&quot;4 ssh config tips for faster remote working&quot;&gt;I wrote about this recently&lt;/a&gt;. For the server I'd like to deploy to I added this. You might not need the ControlMaster/ControlPath, the important line is to set the remote user:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Host myserver.pretendco.com
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
    User remoteuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's have a look at the server itself. There is a possibility that the web directory isn't writable by your remote user and you need to have root permissions. As you should use the root user for all this, and sudo croaks on remote commands, it's best to set your future releases directory to be owned by your remote user.&lt;/p&gt;

&lt;p&gt;on the remote machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
% sudo chown remoteuser:remotegroup /path/to/releases/directory
% chmod 775 /path/to/releases/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configure and Deploy&lt;/h2&gt;

&lt;p&gt;Next you need to create 2 files for Vlad: A Rakefile in your root directory, and a deploy.rb config file in application/configs. Your project should look a little something like this (yes, this is slightly abbreviated):&lt;/p&gt;

&lt;pre&gt; |-application
 |---configs
 |-----config.ini
 |-----deploy.rb  &amp;lt;-- just created
 |---controllers
 |---models
 |---views
 |-library
 |-public
 |-Rakefile     &amp;lt;-- just created
&lt;/pre&gt;

&lt;p id=&quot;deployment-recipes&quot;&gt;At its core, the Rakefile is very straight forward; I've lifted the initial loading step more or less from the Vlad documentation, with the exception of setting the path for deploy.rb manually. Should your application have a root folder &lt;code&gt;/config&lt;/code&gt;, you're following default convention and won't need the instructions in the curly braces. Further down I'm resetting the &lt;code&gt;:update_symlinks&lt;/code&gt; task to link to shared logs and media folders, as well as linking the Zend library into my library. By default Vlad would set 3 shared folders: /log, /system and /pids, which I am all omitting here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

begin
  require 'vlad'
  Vlad.load {:config =&gt; 'application/configs/deploy.rb'} # set path for deploy.rb
rescue LoadError
  # do nothing
end

namespace :vlad do
  # Clear existing symlink task so that we can redefine.
  Rake.clear_tasks('vlad:update_symlinks')

  # we've only got log to share
  remote_task :update_symlinks, :roles =&gt; :app do
    run &quot;rm -Rf #{latest_release}/log &amp;&amp; ln -s #{shared_path}/log #{latest_release}/log &amp;&amp; chmod -f 666 #{latest_release}/log/*&quot;
    run &quot;rm -Rf #{latest_release}/public/media &amp;&amp; ln -s #{shared_path}/cache #{latest_release}/public/media&quot;
    run &quot;rm -Rf #{latest_release}/library/Zend &amp;&amp; ln -s #{shared_path}/Zend #{latest_release}/library/Zend&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up is deploy.rb, the config file for the to-be-deployed app. The only 3 mandatory lines in all cases are &lt;code&gt;:domain&lt;/code&gt;, &lt;code&gt;:deploy_to&lt;/code&gt;, and &lt;code&gt;:repository&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
set :application, &quot;Example application&quot;
set :domain, &quot;pretendco.com&quot;
set :deploy_to, &quot;/project/example_releases&quot;
set :repository, 'http://svn.pretendco.com/example/trunk'
set :svn_cmd, 'svn --username svnuser --password svnpwd'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default SVN command is &lt;code&gt;svn&lt;/code&gt;, but in my case the SVN user is different to local and remote user, and for some reason the SVN password prompt from within the deployment step kept failing on me, so I added it right here. Not the safest thing in the world, but I'm using a limited read-only SVN user for these purposes, so that's good enough for me. Any suggestions of improvement are welcome.&lt;/p&gt;
&lt;p&gt;For your convenience I have zipped up &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/vlad-config.zip&quot;&gt;both files&lt;/a&gt;, or if you like, the &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/vlad-example.zip&quot;&gt;whole demo project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first time you run vlad, you do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
% rake vlad:setup vlad:update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can skip the additional &lt;code&gt;vlad:migrate vlad:start&lt;/code&gt; mentioned in the &lt;a href=&quot;http://hitsquad.rubyforge.org/vlad/doco/getting_started_txt.html&quot;&gt;vlad documentation&lt;/a&gt;, as we're neither migrating DBs (this time), nor does Apache need to be restarted.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vlad:setup&lt;/code&gt; has now created a folder structure on your server that looks like this (abbreviated again):&lt;/p&gt;
&lt;pre&gt; |-project
 |---example_releases
 |-----current           &amp;lt;-- link to your web application
 |-----releases
 |-------yyyymmddhhiiss  &amp;lt;-- your web application
 |---------application
 |---------library
 |-----------Zend        &amp;lt;-- link to Zend Framework
 |---------log           &amp;lt;-- link to shared logs
 |---------public
 |-----------media       &amp;lt;-- link to shared media
 |-----revisions.log
 |-----scm               &amp;lt;-- folder used to checkout release
 |-----shared
 |-------log
 |-------media
 |-------Zend
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;vlad:update&lt;/code&gt; has exported your application from the HEAD of your SVN repository, pushed it into a release folder, and pointed &lt;code&gt;/current&lt;/code&gt; to this release. This means once you've verified this initial deployment step you can set your Apache webroot to point to &lt;code&gt;/project/example_releases/current&lt;/code&gt;. You can also see that the folders &lt;code&gt;/log&lt;/code&gt;, &lt;code&gt;/public/media&lt;/code&gt; and &lt;code&gt;/library/Zend&lt;/code&gt; have been symlinked, so you'll want to move all your dynamically created files into the shared folder now.&lt;/p&gt;
&lt;p&gt;As a side note, I've had two major criticisms about this, out of which I have fixed one in this example: The first one was that initially I didn't include Zend Framework in my release, but rather added it to the global include_path on the server. &quot;Your applications should be self-contained!&quot;, Pascal was shouting from his desk, including some expletives. The other thing he flagged up was that the version of my application config checked into SVN was set up for the live environment, so that I didn't have to change a thing when deploying. I have fixed this in the meantime as well, with a set of other convenient changes, but you'll have to be patient for me to write my next post about it and stick with this solution for now.&lt;/p&gt;
&lt;p id=&quot;finish-line&quot;&gt;The good news are that you're ready to go now!
To release a new version:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;check in your changes into SVN&lt;/li&gt;
	&lt;li&gt;make sure that the repository URL in deploy.rb points to the same as yours&lt;/li&gt;
	&lt;li&gt;run &lt;code&gt;% rake vlad:update&lt;/code&gt; to deploy your app&lt;/li&gt;
	&lt;li&gt;put your feet up, and enjoy the rest of your day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your release is broken, roll back with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% rake vlad:rollback&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will remove the last release and symlink to the previous version.&lt;/p&gt;
&lt;p&gt;As a final word of warning: Using any means of deployment that rely on your code versioning software mean that you have to keep it clean. Only check in code you've tested locally, don't use the branch you deploy from as a backup mechanism. If you and any other people working with your code follow this advice, Vlad will save you lots of time, and turn the pain of updating a site into the joy of releasing something new.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>DOMDocument loadXML throws errors: A bug?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/domdocument-loadxml-throws-errors-a-bug-not-a-feature/index.html"/>
      <updated>2009-04-22T17:37:46+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/domdocument-loadxml-throws-errors-a-bug-not-a-feature/domdocument-loadxml-throws-errors-a-bug-not-a-feature</id>
      <content type="html">&lt;p&gt;So I was wondering why loadXML gives me parsing errors, despite a big try and catch around it ... &lt;a href=&quot;http://php.filearena.net/manual/kr/function.dom-domdocument-loadxml.php#69295&quot;&gt;it's not a bug they say&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
Gavin Sinai put up a code snippet in the PHP.net reference, which shows how to set the error handler to get rid of it:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
function HandleXmlError($errno, $errstr, $errfile, $errline)
{
   if ($errno==E_WARNING &amp;amp;&amp;amp; (substr_count($errstr,&quot;DOMDocument::loadXML()&quot;)&amp;gt;0))
   {
       throw new DOMException($errstr);
   }
   else
       return false;
}

function XmlLoader($strXml)
{
   set_error_handler('HandleXmlError');
   $dom = new DOMDocument();
   $dom-&amp;gt;loadXml($strXml);
   restore_error_handler();
   return $dom;
 }

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Unit testing web service based models in Zend Framework</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/unit-testing-web-service-based-models-in-zend-framework/index.html"/>
      <updated>2009-04-20T09:37:30+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/unit-testing-web-service-based-models-in-zend-framework/unit-testing-web-service-based-models-in-zend-framework</id>
      <content type="html">&lt;p&gt;Web applications nowadays use an increasingly distributed set of resources. How do we test our MVC applications that use web services in their models?&lt;/p&gt;

&lt;h2&gt;What is the problem?&lt;/h2&gt;

&lt;p&gt;Unit tests for database driven models are relatively straight forward. Usually we connect to a separate database, containing a known set of data. Since we know the data we can run assertions against it.&lt;/p&gt;

&lt;p&gt;However, unit testing models that talk to web services presents us with a different set of problem. Usually our application runs requests against something that is not in our control. Unless the service provider gives us some kind of test mode, we're operating with dynamic live data which shouldn't be used for testing, since it's harder to test in the first place, but also could be harmful to be manipulated.&lt;/p&gt;

&lt;p&gt;Let's have a look at two strategies to test out models.&lt;/p&gt;

&lt;h2&gt;Mock objects for Services&lt;/h2&gt;

&lt;p&gt;If we are using an object to represent the API calls to the service from within our model, i.e. &lt;a href=&quot;http://framework.zend.com/manual/en/zend.service.delicious.html&quot;&gt;Zend_Service_Delicious&lt;/a&gt;, we can swap this object for a mock object. A simple accessor allows us to overwrite private properties of the object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class DeliciousModel {
  private $delicious;

  public function __construct() {
    $this-&amp;gt;delicious = new Zend_Service_Delicious('username', 'password');
  }

  public function getPosts() {
    return $this-&amp;gt;delicious-&amp;gt;getAllPosts();
  }

  public function setProperty($name, $value) {
    if(UNITTEST_CONTEXT) {
      $this-&amp;gt;$name = $value;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it's easy swap out private properties from within a unit test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public function testDeliciousModel {
  $mockPosts = array('foo', 'bar');

  $deliciousMock = $this-&amp;gt;getMock('Zend_Service_Delicious', array('getAllPosts'));
  $deliciousMock-&amp;gt;expects($this-&amp;gt;once())
          -&amp;gt;method('getAllPosts')
          -&amp;gt;will($this-&amp;gt;returnValue($mockPosts));

  $model = new DeliciousModel();
  $model-&amp;gt;setProperty('delicious', $deliciousMock);

  $posts = $model-&amp;gt;getPosts();
  $this-&amp;gt;assertEquals($posts, $mockPosts);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Of course this would mean that we're not launching any requests to our services at all, but instead check that models are doing the right method calls to the service API object, and get the right data back.
&lt;/p&gt;

&lt;h2&gt;Validate service requests&lt;/h2&gt;

&lt;p&gt;
Generally speaking, models that are using web services will transform method calls into HTTP requests against web service end points. Those might come in a variety of flavours, but all together we can say that, if we can intercept the request, we can make sure the model serializes method calls correctly into known request data.
&lt;/p&gt;

&lt;h3&gt;Test adapter for Zend_HTTP calls&lt;/h3&gt;

&lt;p&gt;If our model uses Zend_Http to launch the API calls, we might provide a hook in the model so that we can swap the HTTP adapter for the &lt;a href=&quot;http://framework.zend.com/manual/en/zend.http.client.adapters.html#zend.http.client.adapters.test&quot;&gt;test adapter&lt;/a&gt; that ships with Zend Framework. We then have access to the entire request that the model launched, which we can use for assertions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public function testJsonCall() {
  $adapter = new Zend_Http_Client_Adapter_Test();

  $response = &quot;&quot;;
  $response .= &quot;HTTP/1.1 200 OK&quot; . &quot;\r\n&quot;;
  $response .= &quot;Content-type: application/json&quot; . &quot;\r\n&quot;;
  $response .= &quot;\r\n&quot;;
  $response .= '{}';

  $adapter-&amp;gt;setResponse($response);

  $model = new JsonModel();
  $model-&amp;gt;setAdapter($this-&amp;gt;adapter);

  $request_raw = $model-&amp;gt;http_client-&amp;gt;getLastRequest();
  // do your assertions here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Swap the endpoint&lt;/h3&gt;

&lt;p&gt;
Instead of changing the adapter to intercept the call, we could swap the endpoint of the web service against a mock service. This endpoint then can respond with known data which we can use for our assertions.
&lt;/p&gt;

&lt;p&gt;Depending on what kind of web services we have to mock, we might use the servers provided by Zend, e.g. &lt;a href=&quot;http://framework.zend.com/manual/en/zend.rest.server.html&quot;&gt;Zend_Rest_Server&lt;/a&gt; or &lt;a href=&quot;http://framework.zend.com/manual/en/zend.soap.html#zend.soap.server&quot;&gt;Zend_Soap_Server&lt;/a&gt;.
&lt;/p&gt;

&lt;h2&gt;A better understanding&lt;/h2&gt;

&lt;p&gt;Looking at the two strategies above, it still might seem to be a hassle to do, what is essentially a replication of the web service functionality with test data, whether that happens as mock object, on the request/response level, or as test endpoint.&lt;/p&gt;

&lt;p&gt;But instead, this exercise is a very &lt;em&gt;valuable documentation of ones understanding of the service functionality&lt;/em&gt; at a particular point in time. Given that service APIs are often in a constant state of change, things might break in the future, but the tests we've written can help us understand whether it's down to our own code or the web service instead. If things fail at the web service level, we can now refer to our tests to compare what we expect the service to do with what it actually does.&lt;/p&gt;

&lt;h2&gt;Related Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pointbeing.net/weblog/2009/04/unit-testing-code-which-consumes-soap-services.html&quot;&gt;Unit Testing Code which Consumes SOAP Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.soapui.org/gettingstarted/mocking.html&quot;&gt;Mocking with SoapUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeguru.com/columns/vb/article.php/c15209&quot;&gt;Unit Testing with Stubs or Mocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>4 ssh config tips for faster remote working</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/4-ssh-config-tips-for-faster-remote-working/index.html"/>
      <updated>2009-04-17T12:00:02+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/4-ssh-config-tips-for-faster-remote-working/4-ssh-config-tips-for-faster-remote-working</id>
      <content type="html">&lt;p&gt;With the vast majority of web developers deploying their own code, and ssh playing a central role in the toolbox, I felt that tweaking this part of my work saves me some time, and if not, definitely some frustration over mistyping passwords and host names.&lt;/p&gt;
&lt;p&gt;So, for myself as much as everyone out there, here is my collected useful knowledge that has helped me ease the pain of remote work.&lt;/p&gt;
		&lt;h3&gt;1. Execute commands remotely as one-liners&lt;/h3&gt;
		&lt;p&gt;This is what some deployment tools such as &lt;a href=&quot;http://rubyhitsquad.com/Vlad_the_Deployer.html&quot;&gt;vlad&lt;/a&gt; use, but for a quick look at something, it cuts out valuable seconds you could look at web comics instead.&lt;/p&gt;

		&lt;p&gt;Let's try a simple example:&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
matthias:~ matthias$ ssh remoteuser@myserver.pretendco.com ls -l
remoteuser@myserver.pretendco.com's password:
total 804
lrwxrwxrwx   1 remoteuser remoteuser      31 Nov 10  2007 access-logs -&gt; /links/to/my/access-logs
drwxr-xr-x   2 remoteuser remoteuser    2048 Apr  6  2008 cgi-bin
-rw-r--r--   1 remoteuser remoteuser  808417 Jul 17  2007 error_log_dump
drwxr-x---   3 remoteuser mail     2048 Oct  1  2007 etc
drwxrwx---   7 remoteuser remoteuser    2048 Apr  4 02:33 mail
drwxr-x---   3 remoteuser remoteuser    2048 May 23  2008 public_ftp
drwxr-x---  30 remoteuser nobody   2048 Dec  4 06:33 public_html
drwxr-xr-x   7 remoteuser remoteuser    2048 Sep 24  2008 tmp
lrwxrwxrwx   1 remoteuser remoteuser      11 Apr  1  2006 www -&gt; public_html
matthias:~ matthias$
		&lt;/code&gt;&lt;/pre&gt;

		&lt;p&gt;You can even &lt;a href=&quot;http://lookherefirst.wordpress.com/2007/11/29/executing-command-remotely-via-ssh/&quot;&gt;pipe through to a remote command&lt;/a&gt;. Here's an example taken from Look Here First, where the content of a local file is concatenated to a remote file.&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
matthias:~ matthias$ cat localfile.txt | ssh remoteuser@myserver.pretendco.com &quot;cat - &gt;&gt; remotefile.txt&quot;
		&lt;/code&gt;&lt;/pre&gt;

		&lt;h3&gt;2. Add your public key to your remote server&lt;/h3&gt;
		&lt;p&gt;Next let's see how we can get around typing our password all the time. One way of doing this is to &lt;a href=&quot;http://sial.org/howto/openssh/publickey-auth/&quot; title=&quot;OpenSSH Public Key Authentication&quot;&gt;add your public key to your remote server&lt;/a&gt;.&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
# first, upload public key from client to server
client$ scp ~/.ssh/id_rsa.pub remoteuser@myserver.pretendco.com:~

# next, setup the public key on server
server$ mkdir ~/.ssh
server$ chmod 700 ~/.ssh
server$ cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
server$ chmod 600 ~/.ssh/authorized_keys
server$ rm ~/id_rsa.pub
		&lt;/code&gt;&lt;/pre&gt;
		&lt;p&gt;Of course, we can combine with the previous example and run it like this:&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
matthias:~ matthias$ cat ~/.ssh/id_dsa.pub | ssh remoteuser@myserver.pretendco.com &quot;cat - &gt;&gt; ~/.ssh/authorized_keys2&quot;
		&lt;/code&gt;&lt;/pre&gt;
		&lt;p&gt;Windows users fear not, &lt;a href=&quot;http://www.aota.net/Telnet/puttykeyauth.php4&quot; title=&quot;Key Authentication with PuTTY&quot;&gt;you can do this too&lt;/a&gt;, with PuTTY and PuTTYgen.&lt;/p&gt;

		&lt;h3&gt;3. Let the ControlMaster handle your sessions&lt;/h3&gt;
		&lt;p&gt;Sadly this might not always possible, maybe your key management on your server is different, or you don't have permissions to the file.&lt;/p&gt;
		&lt;p&gt;Luckily you can get around this by &lt;a href=&quot;http://blog.zenlinux.com/?p=270&quot;&gt;letting your first ssh connection act as ControlMaster&lt;/a&gt;. By adding the following to ~/.ssh/config, you only need to enter your password once, and all parallel sessions won't ask for a password&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
Host *
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
		&lt;/code&gt;&lt;/pre&gt;

		&lt;h3&gt;4. Set your user and hostname for your host&lt;/h3&gt;
		&lt;p&gt;Finally, more often than not your username won't be the same on your local machine and on whatever server you'd like to connect to, or your server might not use the default ssh port. Or maybe you're just tired of typing that superlong domain name, and look for a less challenging typing task. ~/.ssh/config to the rescue.&lt;/p&gt;
		&lt;p&gt;As final example:&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;
Host myserver
    User remoteuser
    Port 22022
    HostName myserver.pretendco.com
		&lt;/code&gt;&lt;/pre&gt;
		&lt;p&gt;Most likely you won't need the Port instruction in there, because your server runs ssh on the default port 22, so just drop the line.&lt;/p&gt;
&lt;p&gt;All this allows us something as compact as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
matthias:~ matthias$ ssh myserver mycommand
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Have fun, and let's hope this got you into your weekend early!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A caching pattern for models</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-caching-pattern-for-models/index.html"/>
      <updated>2009-04-06T11:50:07+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-caching-pattern-for-models/a-caching-pattern-for-models</id>
      <content type="html">&lt;p&gt;This is a caching pattern for models using Zend_Cache and the __call magic method.&lt;/p&gt;

&lt;h2&gt;The Basic Idea&lt;/h2&gt;

&lt;p&gt;
The initial thought behind this is that a model should be able to return calls either uncached or cached, without initializing some cache object every time. It should be easy to switch between the two calls, and the cache should be coming with the model object already.
&lt;/p&gt;

&lt;h3&gt;The old way&lt;/h3&gt;

&lt;p&gt;
Before introducing the cache pattern, I would create an object that then would use Zend_Cache_Frontend_Class, then initialize a new instance of my model in there, then redefine a method that acts as somewhat like a proxy, but uses the cache.
And if that wasn't enough, I'd have to initialize them both, like in this example:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$model = MyModel();
$model_cached = MyModelCached();

$values_direct = $model-&amp;gt;doStuff();
$values_cached = $model_cached-&amp;gt;doStuff();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The new way&lt;/h3&gt;

&lt;p&gt;
So Matthias asked me: Would it not be nicer if the cache was already available in the model, and you could do something like this:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$model = MyModel();
$values_direct = $model-&amp;gt;doStuff();
$values_cached = $model-&amp;gt;cache-&amp;gt;doStuff();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
A great idea. As you can see this proposed way saves a bit of code, it's intuitive and easy to change, if you ever need to switch between cached and non-cached calls.
&lt;/p&gt;

&lt;h2&gt;The Code&lt;/h2&gt;

&lt;p&gt;First we need to create an object that initializes the cache. We'll initialize a cache with Zend_Cache and then utilize the __call function to check whether a call exists in the cached object or not. This enables us to only do valid calls.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class BaseModelCache {
  private $object;
  private $cache;

  public function __construct($object) {
    $backendName = 'File';
    $frontendName = 'Class';

    $frontendOptions = array(
      'lifetime' =&amp;gt; 1800,
    );

    $backendOptions = array(
      'cache_dir' =&amp;gt; '/my/cache/dir/',
    );

    $this-&amp;gt;object = $object;
    $frontendOptions['cached_entity'] = $object;

    try {
      Zend_Loader::loadClass('Zend_Cache');
      $this-&amp;gt;cache = Zend_Cache::factory($frontendName, $backendName, $frontendOptions, $backendOptions);
    } catch(Exception $e) {
      throw($e);
    }
  }

  public function __call($method, $args) {
    $class = get_class($this-&amp;gt;object);
    $class_methods = get_class_methods($class);

    if(in_array($method , $class_methods)) {
        $caller = Array($this-&amp;gt;cache, $method);
        return call_user_func_array($caller, $args);
    }

    throw new Exception( &quot; Method &quot; . $method . &quot; does not exist in this class &quot; . get_class($class ) . &quot;.&quot; );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second step is to create a base model class, that we'll use for all our models. It will initialize the cache object using the BaseModelCache and make it available as public property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
abstract class BaseModel {
  public $cache;

  public function __construct() {
    $this-&amp;gt;cache = new BaseModelCache($this);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et Voilà! Now we can create models by extending the BaseModel. The cache will be available as described above.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Unit testing controllers with Zend Framework</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/unit-testing-controllers-with-zend-framework/index.html"/>
      <updated>2009-04-02T14:47:48+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/unit-testing-controllers-with-zend-framework/unit-testing-controllers-with-zend-framework</id>
      <content type="html">&lt;p&gt;Unit testing your Zend Framework driven MVC applications is not hard at all. This post tries to give a brief overview on how to test your Controllers with Zend_Test.&lt;/p&gt;

&lt;h2&gt;Install PHPUnit&lt;/h2&gt;

&lt;p&gt;Zend Framework integrates with PHPUnit. PHPUnit is a &lt;a href=&quot;http://pear.php.net/&quot;&gt;PEAR&lt;/a&gt; module, and the usual way is to install PEAR that first and then &lt;a href=&quot;http://www.phpunit.de/manual/current/en/installation.html&quot;&gt;use the pear installer to install PHPUnit for you&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Create an application bootstrap include&lt;/h2&gt;

&lt;p&gt;If you're using the &lt;a href=&quot;http://framework.zend.com/manual/en/zend.controller.front.html&quot;&gt;front controller pattern&lt;/a&gt; and have all your variables set up in the index.php of your web folder, now is the time to &lt;a href=&quot;http://framework.zend.com/docs/quickstart/create-a-bootstrap-file&quot;&gt;move things into an include file&lt;/a&gt;, before you create the controller and dispatcher. We'll use this very file when doing unit tests with Zend_Test&lt;/p&gt;

&lt;h2&gt;Start Testing Controllers&lt;/h2&gt;

&lt;p&gt;
With the help of Zend_Test we're now able to create tests that dispatch our controllers. We're then able to do assertions against the response, using the provided methods of the &lt;a href=&quot;http://framework.zend.com/apidoc/core/Zend_Test/PHPUnit/Zend_Test_PHPUnit_ControllerTestCase.html&quot;&gt;ControllerTestCase&lt;/a&gt;.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class IndexTest extends Zend_Test_PHPUnit_ControllerTestCase
{
  public function setUp() {
    $this-&gt;bootstrap = array($this, 'appBootstrap');
    parent::setUp();
  }

  public tearDown() {
    $this-&gt;resetRequest();
    $this-&gt;resetResponse();
    parent::tearDown();
  }

  public function appBootstrap() {
    require_once('/my/bootstrap.php');
  }

  public function testHomepage() {
    $this-&gt;dispatch('/');
    $this-&gt;assertController('index');
    $this-&gt;assertAction('index');
    $this-&gt;assertXpath(&quot;//form[@action = '/foo']&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Manipulate the request, evaluate the response&lt;/h3&gt;

&lt;p&gt;
Now that we've dispatched our controller, we can manipulate the request and access the response, to see what the dispatched action does. For example an action that requires post data, and then redirects us to another page:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public testPostAction() {
  $request = $this-&gt;getRequest();

  $request-&gt;setMethod('POST');
  $request-&gt;setPost(array(
    'foo' =&gt; 'bar',
    'baz' =&gt; 'x',
  ));

  $this-&gt;dispatch('/my/post/action');
  $this-&gt;assertRedirectTo('/my/expected/redirect');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Checking data manipulation&lt;/h3&gt;

&lt;p&gt;
If we're working with data manipulations in our tests, we could use models to create the data we manipulate, and then to evaluate it after the controller has been dispatched. Finally we'll clean up after the test. Of course you'd want to have stable models at that point.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public function testSave() {
  $my_id = $model-&gt;create();

  $request = $this-&gt;getRequest();

  $request-&gt;setMethod('POST');
  $request-&gt;setPost(array(
    'name' =&gt; 'unittest modified',
    'id' =&gt; $my_id,
  ));

  $this-&gt;dispatch(&quot;/save/object/&quot;);
  $this-&gt;assertRedirectRegex('#/edit/object/id/[\d]+$#');

  $data = $model-&gt;get($my_id);
  $this-&gt;assertEquals($data['name'], 'unittest modified');

  $my_id = $model-&gt;delete($my_id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Related links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.test.html&quot;&gt;Zend_Test Reference Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/article/2772-An-Introduction-to-the-Art-of-Unit-Testing-in-PHP&quot;&gt;An Introduction to the Art of Unit Testing in PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fedecarg.com/2008/12/27/phpunit-testing-zend-framework-controllers/&quot;&gt;PHPUnit: Testing Zend Framework Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zfforums.com/zend-framework-general-discussions-1/installation-configuration-3/zend_test-how-set-up-1569.html&quot;&gt;Zend_Test: how to set up?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>

    <entry>
      <title>Zend_Translate with dynamic parameters</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/zendtranslate-with-dynamic-parameters/index.html"/>
      <updated>2009-03-13T11:46:57+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/zendtranslate-with-dynamic-parameters/zendtranslate-with-dynamic-parameters</id>
      <content type="html">&lt;p&gt;Just a quick snippet to have dynamic parameters in the underscore function, without having to write sprintf every time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
class Translate extends Zend_Translate {
  public function _() {
    $args = func_get_args();
    $num = func_num_args();

    $adapter = $this-&gt;getAdapter();
    $args[0] = $adapter-&gt;_($args[0]);

    if($num &amp;lt;= 1) {
      return $args[0];
    }

    return call_user_func_array('sprintf', $args);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage would be something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$t = new Translate('array', $array_translation, $lang);
echo $t-&gt;_('My name is %s', 'Pascal');
echo $t-&gt;_('I have a %s and a %s', 'Cat', 'Horse');
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>My take on jQuery charts</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/my-take-on-jquery-charts/index.html"/>
      <updated>2009-02-28T20:24:47+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/my-take-on-jquery-charts/my-take-on-jquery-charts</id>
      <content type="html">&lt;p&gt;A while back I did &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/search/canvas&quot;&gt;a couple of posts&lt;/a&gt; touching the subject HTML 5 and the canvas tag. Of course I have been tinkering around with chart drawing APIs and so on, and couldn't help to write a little script myself.&lt;/p&gt;

&lt;p&gt;I started out with pie charts, and essentially did a mashup between &lt;a href=&quot;http://joncom.be/code/excanvas-piechart&quot;&gt;Jon Combes approach&lt;/a&gt; and &lt;a href=&quot;http://www.mattknott.com/content/blog/2008/04/Advanced_Canvas_Based_Pie_Chart.html&quot;&gt;Advanced Canvas Based Pie Chart by Matthew Knott&lt;/a&gt;, then wrapped a JQuery plugin around it.&lt;/p&gt;

&lt;p&gt;Later I added some sidebar charts, which were much simpler to do and don't require to understand the fact that javascript does trigonometric functions in radians rather than degrees, a fact that made my brain boil when I tried to add in the labels, because I was expecting different numbers to come back from my calculations ...&lt;/p&gt;

&lt;p&gt;I was keen on passing the chart values in as array, so I could gather data from an HTML table with a couple of lines of JS, for example. I left this out in &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/jquery_canvascharts_demo/index.html&quot;&gt;the little demo that I mocked up&lt;/a&gt;, which I uploaded &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/jquery_canvascharts_demo.zip&quot;&gt;as a zip file&lt;/a&gt; as well, but I am sure you guys figure what I mean.&lt;/p&gt;

&lt;p&gt;The whole thing is nothing new, and &lt;a href=&quot;http://www.liquidx.net/plotkit/&quot;&gt;Plotkit&lt;/a&gt; or &lt;a href=&quot;http://bluff.jcoglan.com&quot;&gt;Bluff&lt;/a&gt; are way more advanced, but I think it's a nice little demo to read and understand, without being overwhelmed by large files of code. So I hope you enjoy it.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Perl validation from PHP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/perl-validation-from-php/index.html"/>
      <updated>2009-02-26T11:07:31+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/perl-validation-from-php/perl-validation-from-php</id>
      <content type="html">&lt;p&gt;A quick method to validate perl scripts from PHP. Took me a long time that perl-c does not use stdout but stderr as output stream ...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public function validationErrorPerl($content) {
  $hash = md5(microtime() . $content);
  $infile = CACHE_DIR . '/validation_' . $hash . '.pl';
  $outfile = CACHE_DIR . $this-&amp;gt;config-&amp;gt;cache-&amp;gt;dir . '/validation_' . $hash . '.txt';
  file_put_contents($infile, $content);
  $cmd = &quot;/usr/bin/perl -c $infile 2&amp;gt; /dev/null &amp;amp;&amp;gt; $outfile&quot;;
  exec($cmd);
  $result = file_get_contents($outfile);
  unlink($infile);
  unlink($outfile);
  $result = str_replace($infile, 'perl script', $result);

  if(strpos($result,'syntax OK') !== false) {
    return false;
  }

  return $result;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>PyObjC newbie frustration</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/pyobjc-newbie-frustration/index.html"/>
      <updated>2009-02-21T18:27:25+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/pyobjc-newbie-frustration/pyobjc-newbie-frustration</id>
      <content type="html">&lt;p&gt;So I was trying out to build a graphical interface for my VHOST shell script, this time in Python, but couldn't get one past hurdle: I need superuser rights to edit /etc/hosts and the httpd.conf.&lt;/p&gt;

&lt;p&gt;While I was able to build a quick interface for a python script to do essentially the same, using the PyObjC bridge and the Interface Builder, I couldn't figure out how the hell I am supposed to get the authentication going to execute the script as superuser ... and a look into the &lt;a href=&quot;http://developer.apple.com/documentation/Security/Reference/authorization_ref/Reference/reference.html#//apple_ref/c/func/AuthorizationExecuteWithPrivileges&quot;&gt;documentation&lt;/a&gt; does give no clue on how to use Authorization with PyObjC, but only shows a C function ...?&lt;/p&gt;

&lt;p&gt;Apart from that I found the Interface Builder pretty intriguing, and I'm starting to like XCode as well. Of course I haven't got much of a clue of how Python is done properly, and especially the underscore convention for actions threw me off at first. Also, what do people mean when they say Pythonic? What makes an app/script/library exactly that?&lt;/p&gt;

&lt;p&gt;Of course I am way out of my comfort zone here. Would appreciate some hints and guidance.&lt;/p&gt;

</content>
    </entry>

    <entry>
      <title>You and the stu nicholls guy</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/you-and-the-stu-nicholls-guy/index.html"/>
      <updated>2009-02-09T10:25:26+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/you-and-the-stu-nicholls-guy/you-and-the-stu-nicholls-guy</id>
      <content type="html">&lt;p&gt;It amazes me time and time again how much emotion goes into our work life. Not that I can exclude myself, I don't even want to: I'm proud if I've achieved a great end result, be it in code or in planning an application, I'm happy when my machines and applications run as expected. Equally I feel the discomfort of a bug that's down to my sloppiness, or worse, a conceptual error that has me repeating or redoing my work, because I couldn't be bothered to fully understand a concept or the implications of a decision made early.&lt;/p&gt;
&lt;p&gt;To avoid the latter, I've never stopped learning, reading up on how it's supposed to be done, and trying to see the benefit in generalizations others have suggested.&lt;/p&gt;
&lt;p&gt;Web Standards and the people that actively try shaping them is such a subject. Over the years I've followed a number of blogs and web publications, and looked at how &lt;em&gt;they&lt;/em&gt; do it, taking on suggestions when they seemed to make sense, trying to work out the benefits when the don't. Lucky me, living in London, even had a chance to see, and at times even chat to some of &lt;em&gt;them&lt;/em&gt;, the people who seem to have so many good ideas.&lt;/p&gt;
&lt;p&gt;One of them is &lt;a href=&quot;http://www.flickr.com/photos/ptg/216749262/&quot;&gt;Dean Edwards&lt;/a&gt;, who I've met several times at the Pub Standards, when his and my occasional attendance overlapped.&lt;/p&gt;
&lt;p&gt;Now, he's forgotten to renew his domain, and the reminder didn't reach its intended target. That's kinda &lt;a href=&quot;http://www.reddit.com/r/programming/comments/7vl0t/what_can_i_do_to_get_a_stolen_domain_back/c07j4yd&quot;&gt;stupid&lt;/a&gt;, but I can confirm that although it has so far not happened to me, I'm uncomfortable about this subject every 2 years, because my registrar has such a bad user interface that I'm never sure if it updated credit card details, if a changed status means that everything is (going to be) ok, etc. (feel free to suggest a registrar that tells me in simple words where I'm at)&lt;/p&gt;
&lt;p&gt;Maybe I'm just too forgiving, but imagine: Somebody who has been publicly, on the web and elsewhere, trying to standardize and improve his work universe, forgets something important. That's crazy, and clearly deserves a &lt;a href=&quot;http://www.reddit.com/r/programming/comments/7vl0t/what_can_i_do_to_get_a_stolen_domain_back/c07j5t0&quot;&gt;telling-off, throwing everything in&lt;/a&gt; except the kitchen sink.&lt;/p&gt;
&lt;p&gt;Oh, it's so funny, I have to quote it here (who knows, maybe it'll be taken down). So, on the erroneously titled subject of a lost-and-snatched domain with unlicensed content replication, someone called &quot;gmn17&quot; had this to say:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;man oh man what happens to you guys?, you and the quirksmode guy and the stu nicholls guy, you guys get burned out and then whore yourselves out and can't handle what you created and started, putting down people for using tables and innerhtml like the guy who explains how different the internet and the world wide web are so different, trying to create an atmosphere of holier than thou web design and make people feel like crap for using tables and document.write, it's hard to feel sorry for you, you yourself said many times on that site that you only use it sparingly or can not update it as frequently, and that stu nicholls guy, man what a sellout, someone needs to tell him his javascript is horrible, you just have to be patient, I always liked your site too, lots of nice stuff, can't believe you can write code like that and get into a situation like this, what a world,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Amazing! I mean, it's hilarious, it looks so menacing! I wanted to only quote one sentence, but, there is no full stop. I'm interpreting a lot of pent-up anger in there, and the chance of a lifetime. Ironically, his comment wouldn't have been too out of place at Ajaxian, where a &lt;a href=&quot;http://ajaxian.com/archives/css-for-layout-another-rant&quot;&gt;discussion about CSS (or tables)for layout&lt;/a&gt; was reheated and served.&lt;/p&gt;
&lt;p&gt;I'm sure you'll find a lot of flak in the comments, too, maybe even some condescending advice. But as far as I read, they only get as personal as &quot;you're probably a backend dev&quot; or the general denial of professionalism on the part of the original author. A great week for making the web a better place, that's for sure.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Shell script for adding virtual hosts in Leopard</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/shell-script-for-adding-virtual-hosts-in-leopard/index.html"/>
      <updated>2009-02-08T08:22:59+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/shell-script-for-adding-virtual-hosts-in-leopard/shell-script-for-adding-virtual-hosts-in-leopard</id>
      <content type="html">&lt;p&gt;I was getting annoyed with constantly editing config files myself. That's why I hacked together a shell script to add the vhosts for me.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;
Open the Terminal and execute the following commands:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo sed -i -e s@^#Include\ /private/etc/apache2/extra/httpd-vhosts.conf@Include\ /private/etc/apache2/extra/httpd-vhosts.conf@ /private/etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
This will enable the vhost include file to be read from the httpd conf.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo sed -i -e s/^\&amp;lt;/#\&amp;lt;/ /private/etc/apache2/extra/httpd-vhosts.conf
sudo sed -i -e s/^\ /#\ / /private/etc/apache2/extra/httpd-vhosts.conf
sudo sed -i -e s/^#NameVirtualHost/NameVirtualHost/ /private/etc/apache2/extra/httpd-vhosts.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
This will enable the Virtualhosts in apache.
&lt;br /&gt;
Now let's enable PHP as well:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo sed -i -e s@^#LoadModule\ php5_module@LoadModule\ php5_module@ /private/etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
All we need to do is restart apache:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding a vhost&lt;/h2&gt;

&lt;p&gt;
Now we're all set, and can create the shell script in some location of your choice. In the example below it's assumed that it is called add.sh.
&lt;/p&gt;

&lt;p&gt;The shell script itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/sh
#
# Script to validate files in directory
#
add_host_entry() {
	echo &quot;127.0.0.1	$1&quot; &amp;gt;&amp;gt; /etc/hosts
}

add_vhost_conf() {
	cat localvhost.tpl | sed &quot;s/{VHOSTNAME}/$1/&quot; | sed &quot;s@{VHOSTDIRECTORY}@$2@&quot; &amp;gt;&amp;gt; /private/etc/apache2/extra/httpd-vhosts.conf
}

if [ $# -lt 2 ]; then
	echo &quot;syntax: sh add.sh vhostname vhostdir&quot;
	exit
fi

add_host_entry $1
add_vhost_conf $1 $2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The template file 'localvhost.tpl' needs to sit in the same folder like 'add.sh':&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#VHOSTSTART {VHOSTNAME}
&amp;lt;VirtualHost *:80 &amp;gt;
	DocumentRoot &quot;{VHOSTDIRECTORY}&quot;
	ServerName {VHOSTNAME}
	ErrorLog /private/var/log/apache2/{VHOSTNAME}-error_log
	CustomLog /private/var/log/apache2/{VHOSTNAME}-access_log common
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;Directory {VHOSTDIRECTORY}&amp;gt;
	Options Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
	AllowOverride All
	Order allow,deny
	Allow from all
&amp;lt;/Directory&amp;gt;
#VHOSTEND {VHOSTNAME}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
You should now be able to add vhosts by typing:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cd /path/to/shellscript/folder
sudo add.sh vhostname /path/to/vhost/webroot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Once you're done do an apache restart again:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Installing APC on Leopard</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/installing-apc-on-leopard/index.html"/>
      <updated>2009-02-03T12:02:17+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/installing-apc-on-leopard/installing-apc-on-leopard</id>
      <content type="html">&lt;p&gt;There are a few steps needed to install &lt;a href=&quot;http://www.php.net/apc&quot;&gt;APC&lt;/a&gt; on OS X Leopard. Don't worry, it may look a bit daunting if you've never had to compile anything before but it's very straight forward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, download the appropriate version of the &lt;a href=&quot;http://pecl.php.net/package/APC&quot;&gt;APC package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unpack it (doesn't matter where)&lt;/li&gt;
&lt;li&gt;Now start Terminal and cd to the unpacked directory from the above step&lt;/li&gt;
&lt;li&gt;Run 'phpize'&lt;/li&gt;
&lt;li&gt;Now it needs to be configured. Copy the following configuration (note: it must be entered into the Terminal prompt as a &lt;strong&gt;single&lt;/strong&gt; line)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;MACOSX_DEPLOYMENT_TARGET=10.5 CFLAGS=&quot;-arch ppc -arch ppc64 -arch i386 -arch x86_64 -g -Os -pipe -no-cpp-precomp&quot; CCFLAGS=&quot;-arch ppc -arch ppc64 -arch i386 -arch x86_64 -g -Os -pipe&quot; CXXFLAGS=&quot;-arch ppc -arch ppc64 -arch i386 -arch x86_64 -g -Os -pipe&quot; LDFLAGS=&quot;-arch ppc -arch ppc64 -arch i386 -arch x86_64 -bind_at_load&quot; ./configure&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Nearly there: now type 'make'&lt;/li&gt;
&lt;li&gt;sudo make install (you will need to enter your root password)&lt;/li&gt;
&lt;li&gt;Finally, add 'extension=apc.so' into your php.ini&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

</content>
    </entry>

    <entry>
      <title>Spotify now in the news</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/spotify-now-in-the-news/index.html"/>
      <updated>2009-01-29T14:20:10+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/spotify-now-in-the-news/spotify-now-in-the-news</id>
      <content type="html">&lt;p&gt;One of my favourite apps lately, &lt;a href=&quot;http://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt; has now reached the &lt;a href=&quot;http://www.guardian.co.uk/technology/2009/jan/29/spotify&quot;&gt;technology news section of the Guardian&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To me this doesn't come as such a  big surprise, since I have been raving about it ever since I got myself a cheeky login without invitation code, something that a google search will reveal If you can't get the latter.&lt;/p&gt;

&lt;p&gt;It's no often that I do big up an application, but spotify seems to do everything right that other music players didn't quite achieve. For example, I really liked last.fm, but I always wanted to be able to search for a track and then play the album.&lt;/p&gt;

&lt;p&gt;Even more amazing that it does get things right that I didn't even ask for. Already my listening behaviour has changed, because I started to use Spotify's direct URLs and collaborative play lists. Let's just wait an see what else is coming in terms of nifty integration.&lt;/p&gt;

&lt;p&gt;Also let's hope that they don't screw it up big time. Already they had to &lt;a href=&quot;http://www.spotify.com/blog/archives/2009/01/28/some-important-changes-to-the-spotify-music-catalogue/&quot;&gt;remove some tracks&lt;/a&gt;, and the potential to bomb the application with adverts until everyone tunes out is huge. If they get it right it might be as much of an important app like the iplayer or hulu.&lt;/p&gt;
</content>
    </entry>

    <entry>
      <title>CwS blog posts now on twitter</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/cws-blog-posts-now-twitter/index.html"/>
      <updated>2009-01-29T08:00:19+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/cws-blog-posts-now-twitter/cws-blog-posts-now-twitter</id>
      <content type="html">&lt;p&gt;Posts from our blog will now automatically pop up on &lt;a href=&quot;https://twitter.com/contentwstyle&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is only a couple of lines of code, thanks to the &lt;a href=&quot;http://framework.zend.com/manual/en/zend.service.twitter.html&quot;&gt;API wrapper&lt;/a&gt; that Zend Framework now offers, but also thanks to the &lt;a href=&quot;http://www.scripting.com/stories/2007/06/27/tinyurlHasAnApi.html&quot;&gt;TinyURL API&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// TinyURL for the blog post
$client = new Zend_Http_Client($config-&amp;gt;tinyurl-&amp;gt;endpoint);
$client-&amp;gt;setParameterGet('url', $url);
$response = $client-&amp;gt;request('GET');
$tiny_url_response = $response-&amp;gt;getBody();

// TinyURL into the message
$message = $message . ' ' . $tiny_url_response;

// Twitter
$twitter = new Zend_Service_Twitter($config-&amp;gt;twitter-&amp;gt;user, $config-&amp;gt;twitter-&amp;gt;password);
$twitter-&amp;gt;status-&amp;gt;update($message);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So feel free to follow us, even though twittering to &lt;strong&gt;ME&lt;/strong&gt; only makes sense if it happens automatically, as I personally am no big fan of messages like &quot;I am going outside now&quot; or anything like that.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Remove .AppleDouble folders on *NIX boxes</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/remove-appledouble-folders-on-nix-boxes/index.html"/>
      <updated>2009-01-22T22:54:42+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/remove-appledouble-folders-on-nix-boxes/remove-appledouble-folders-on-nix-boxes</id>
      <content type="html">&lt;p&gt;Quick note to myself on how to get rid of those silly .AppleDouble folders&lt;/p&gt;

&lt;p&gt;This fails, if there's funny characters in the filenames:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
find . -name '.AppleDouble' | xargs rm -Rf
xargs: unmatched single quote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Hence we need to wrap the string into quotation marks:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
find . -name '.AppleDouble' -printf '&quot;%p&quot;\n' | xargs rm -Rf
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Make sure firebug console debug doesn't break everything.</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/make-sure-that-firebug-console-debug-doesnt-break-everything/index.html"/>
      <updated>2009-01-16T14:49:49+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/make-sure-that-firebug-console-debug-doesnt-break-everything/make-sure-that-firebug-console-debug-doesnt-break-everything</id>
      <content type="html">&lt;p&gt;Maybe some of you have already had problems with leaving debug statements in JS code. A &lt;code&gt;console.log()&lt;/code&gt; left in the deployed code can break the whole application, and it might only come up when someone without firebug is testing it at a later stage.&lt;/p&gt;

&lt;p&gt;Very embarrassing indeed, and I recall a story where the whole development team had neglected to test without firebug, but a scheduled session of Acceptance Tests held at a different site was about to fail. Someone then had to rush there and managed to save the day by installing firebug on the test machine, so that they could get on with it. This taught me a valuable lesson about what can happen in an environment where there are many developers: &lt;strong&gt;Mistakes WILL happen!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
People that do flash will know the &lt;code&gt;trace()&lt;/code&gt; function, which gives you debug output, but can be turned off in the export settings, so that the compiler removes those calls from the generated SWF.
&lt;br /&gt;
But javascript isn't a compiled language so there is no auto removal of debug specific code.
&lt;br /&gt;
This is why we have to ensure that, even though code does still contain debug code, it shouldn't break. For javascript development this means that at least console.log and console.dir statements need to be dealt with. And yes, I agree: It shouldn't be in there in the first place. But we have to either make sure that calls to the console get removed or that the rest of the javascript application isn't affected when they're made.
&lt;/p&gt;

&lt;h2&gt;Suggestions&lt;/h2&gt;

&lt;h3&gt;Version control hooks&lt;/h3&gt;

&lt;p&gt;
CVS, SVN or GIT offer hooks. I haven't tried this out properly, but I imagine a simple shell script could help. Like doing a &lt;em&gt;grep&lt;/em&gt; for console.log and stopping the commit if there's anything in there that should only be debug code.
&lt;br /&gt;
Of course with this method the downside would be that there would be no means to share the debugging code with other developers through the version control.
&lt;/p&gt;

&lt;h3&gt;Build tools&lt;/h3&gt;

&lt;p&gt;
A similar check/removal process could be done in the deployment stage.
Using &lt;em&gt;grep&lt;/em&gt;, &lt;em&gt;sed&lt;/em&gt; or something similar on the project files to remove any debug related code would ensure that the javascript always gets deployed without debug code.
&lt;/p&gt;

&lt;h3&gt;A mock object&lt;/h3&gt;

&lt;p&gt;We could provide a mock object, so that calls to the console wouldn't result in an error. This would ensure that the javascript doesn't fail, even though debug code is still in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
if(!window.console) {
  window.console = new function() {
    this.log = function(str) {};
    this.dir = function(str) {};
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Wrapping the debug code&lt;/h3&gt;

&lt;p&gt;Another valid approach would be to wrap the calls to console.log, and provide error checking or try-catch inside the wrapper.
&lt;br /&gt;
Of course this only works if all developers will use the wrapper instead of the firebug console object.
&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
var Logger = new function() {
  this.log = function(str) {
    try {
      console.log(str);
    } catch(e) {
      // do nothing
    }
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Finally ...&lt;/h2&gt;

&lt;p&gt;Please keep in mind that what I've written is about keeping code from breaking the testing or staging environment. The truth is that, if there is anything that breaks the App in it's live deployment, then something is wrong with the testing process.&lt;/p&gt;

&lt;h2&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ajax-prototype.blogspot.com/2006/12/workaround-to-make-firebug-consolelog.html&quot;&gt;Workaround to make firebug console.log function bug free on IE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jennyandlih.com/resolved-logging-firebug-console-breaks-ie&quot;&gt;jennyandlih on firebug console and IE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wordaligned.org/articles/a-subversion-pre-commit-hook&quot;&gt;A subversion pre commit hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>Looking forward, looking back</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/looking-forward-looking-back/index.html"/>
      <updated>2009-01-08T17:44:03+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/looking-forward-looking-back/looking-forward-looking-back</id>
      <content type="html">&lt;h2&gt;Looking back to 2008&lt;/h2&gt;
&lt;p&gt;The biggest change of 2008 must've been the relaunch of Content with Style. We talked through the theory back in Autumn/Winter 2007, and Pascal and I made some room in our schedules in January. The first day we met, we looked at the then current Wordpress release, weighed the pros and cons against turning our backs to PHP and use Python. Wordpress seemed the quicker option, and as Pascal was going on a big trip a week later, I felt more comfortable pushing something I know. After doing some amazing doodles on A2 paper I lifted from the office, we were all psyched up and ready to go, and it was only early afternoon!&lt;/p&gt;
&lt;p&gt;The rest of the day we spent realizing that our &quot;customized&quot; pre-1.0 release of Textpattern was in no way happy to work with the importer tool for Wordpress. It later turned out that both our data format as well as the importer were broken, and an import that would keep all IDs intact would be a pest. Sadly that realization took place late in the second day. What then followed was some last minute woes in planning Pascal's trip, and me getting a stinking cold, that knocked me out for the whole week. The next thing we knew it was May, and nothing was done.&lt;/p&gt;
&lt;p&gt;With work and other commitments I will mention further down both Mike and I were blocked. As Pascal was worried that we'd never get it done, he took on development on his own (with a few really minor additions by myself) and commissioned &lt;a href=&quot;http://koopd.com/&quot;&gt;Alastair Holt&lt;/a&gt; from our good friends at &lt;a href=&quot;http://seventytwo.co.uk/&quot;&gt;Seventy-two&lt;/a&gt;. You're looking at &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-new-style-for-our-content&quot;&gt;the result&lt;/a&gt; right now!&lt;/p&gt;
&lt;p&gt;On top of all the work invested into CwS, Pascal also extended his server-farm to two, and successfully carved himself a very nice career out of &lt;a href=&quot;http://www.ilikecode.co.uk/&quot;&gt;contracting around London&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a parallel universe, Mike has not only managed to make a successful move from freelance to permanent back in 2007 and keep it that way, but he also blossomed in his position as &lt;a href=&quot;http://www.trampolinesystems.com/about/people&quot;&gt;Head of User Experience at Trampoline&lt;/a&gt;, taking a good step away from development, while exploring his communicative side as speaker all around the world. London, Brighton, USA, &lt;a href=&quot;http://iceweb.svef.is/speakers/&quot;&gt;Iceland&lt;/a&gt; (post-bank-collapse!), you name it, he'll grab some slides and a glass of water.&lt;/p&gt;
&lt;p&gt;All this engagement around the world lead him to take a back seat in the world of Content with Style; out of which he &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/reading-up-on-cloud-computing#comment-4541&quot;&gt;sometimes rises to the occasion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Needless to say, his legacy of &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/archive/author/3/Mike+Stenhouse&quot;&gt;amazing CSS and Javascript-related posts&lt;/a&gt; is still in the top10 of most visited pages on CwS.&lt;/p&gt;
&lt;p&gt;As much as I would like to take a back seat, it's not in cards for the near future. In the beginning of the year, some changes of personnel lead to me pretending to be the Technical Director of Designjunction (now &lt;a href=&quot;http://www.designscienceoffice.com/&quot;&gt;Design Science Office&lt;/a&gt;), a post that was made official with the rebranding in May. I thoroughly enjoyed the role, especially mentoring my junior developer, who will no doubt get very far in the future. I would've loved to stay where I was, but the economy had other plans for me.&lt;/p&gt;
&lt;p&gt;So I started looking for new work and landed a very nice Systems Developer position at &lt;a href=&quot;http://www.photobox.co.uk/&quot;&gt;Photobox&lt;/a&gt;, where I am finally in a position that is mostly about developing in Zend Framework, something I've been wanting to do much more for a good year. I'm sure I've projected some of my wishful thinking on Pascal during the year, which lead to the technology behind the CwS relaunch.&lt;/p&gt;
&lt;p&gt;Only days after starting my new position, I also ventured on a new endeavor of a more personal kind: On November 22 my baby daughter Esmé was born, and I keep making fun of her with inappropriate comparisons in &lt;a href=&quot;http://www.willerich.com/900days&quot; title=&quot;900 days - a baby blog&quot;&gt;another corner of the internet&lt;/a&gt; ever since.&lt;/p&gt;
&lt;p&gt;As a final look back, here's a list of the 15 most popular (by views) posts from 2008:&lt;/p&gt;
&lt;ol id=&quot;most-popular-posts&quot;&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps&quot;&gt;Fixing the Back Button and Enabling Bookmarking for AJAX Apps&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-css-framework&quot;&gt;A CSS Framework&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/modular-css&quot;&gt;Modular CSS&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/clean-urls-for-a-better-search-engine-ranking&quot;&gt;Clean URLs for a better search engine ranking&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/comments-on-comments&quot;&gt;Comments on Comments&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-to-zee-with-p3p&quot;&gt;A to Z(ee) with P3P&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/dynamic-tables-with-xslt&quot;&gt;Dynamic tables with XSLT&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/dom-scripting-or-how-to-keep-the-code-clean&quot;&gt;DOM scripting or how to keep the code clean&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/safari-ajax-and-the-back-button&quot;&gt;Safari, Ajax and the back button&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/xsl-the-other-way-of-styling-up-content&quot;&gt;XSL: the other way of styling up content&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/css-is-worthless&quot;&gt;CSS is Worthless&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/figure-microformats&quot;&gt;Figure microformats&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/find-your-node-advanced-xpath-commands&quot;&gt;Find your node: Advanced XPATH commands&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/playing-nice-with-the-other-css-kids&quot;&gt;Playing Nice with the Other CSS Kids&lt;/a&gt;&lt;/li&gt;
	 &lt;li&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/ie-conditional-comments-in-xsl&quot;&gt;IE Conditional comments in XSL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;If you've been a long-term follower of CwS or know us personally, you'll probably remember some of our pledges and promises for the future that never made it.&lt;/p&gt;
&lt;p&gt;To avoid this, I simply won't promise anything :-). I'd rather tell you about the situation we're in, and some of the things that are up our sleeves as you read this:&lt;/p&gt;
&lt;p&gt;We're still looking for collaborators! There are several good intentions and ideas been floating around for new authors on CwS, but so far there are no real commitments or even drafts that might go out any minute. So, if you're looking for a well-read platform to spread the word, drop us a line right here in the comments.&lt;/p&gt;
&lt;p&gt;I've prepared a small series of articles that we'll post over the year, which will mainly deal with the next generation of web developers. While we gain seniority in our working lives, the focus of what lies ahead splits into two: Either we keep on specializing, and push the envelope of what's possible in our fields of expertise, or we do more and more strategy and managerial work as team leads, telling our juniors how to do it right. The series is about handing down working patterns that are second nature to us, that speed up our work dramatically.&lt;/p&gt;
&lt;p&gt;On the other hand we want to keep doing what we've always done: Write posts about the technologies we use every day right now, and provide useful nuggets of information, small and large, to expand the horizon or pick the brains of our readers.&lt;/p&gt;
&lt;p&gt;Finally you can see from our higher rate of short posts, that we started using CwS not only as means to provide information for you, but also as our little black book of quick notes, details we come across once and want to offload our brains for future use. As a side effect we hope to give a little insight into how we work.&lt;/p&gt;
&lt;h2&gt;Wrap it up already...&lt;/h2&gt;
&lt;p&gt;All that's left for me now is to wish you all a Happy New Year 2009. May your lives and work pan out nicely, even in uncertain times like this. See you around, and all the best,&lt;/p&gt;
&lt;p&gt;from all of us at Content with Style&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>GET parameters and caching</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/get-parameters-and-caching/index.html"/>
      <updated>2009-01-07T16:55:27+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/get-parameters-and-caching/get-parameters-and-caching</id>
      <content type="html">&lt;p&gt;
Once you do care about caching and set expiry headers for static files in the far future, you'll have to make sure that crucial new functionality is not pulled from the cache. But a GET parameter is NOT the way to do this ....
&lt;/p&gt;

&lt;p&gt;
Have a look into the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.9&quot;&gt;HTTP protocol 1.1 specs about caching&lt;/a&gt;, and it becomes obvious why:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
We note one exception to this rule: since some applications have traditionally used GETs and HEADs with query URLs (those containing a &quot;?&quot; in the rel_path part) to perform operations with significant side effects, caches MUST NOT treat responses to such URIs as fresh unless the server provides an explicit expiration time. This specifically means that responses from HTTP/1.0 servers for such URIs SHOULD NOT be taken from a cache.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/&quot;&gt;People have tested this&lt;/a&gt;, and the bottom line is that you should change the filename instead. Interestingly (I didn't verify this, btw.) &lt;a href=&quot;http://stackoverflow.com/questions/131061/do-fancy-mvc-urls-affect-how-caching-is-done#133160&quot;&gt;it seems that Firefox and IE just ignore this part of the spec sometimes, while Safari does it the right way&lt;/a&gt;.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>XHTML Validation with the W3C validator and PHP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xhtml-validation-with-the-w3c-validator-and-php/index.html"/>
      <updated>2009-01-04T12:25:44+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xhtml-validation-with-the-w3c-validator-and-php/xhtml-validation-with-the-w3c-validator-and-php</id>
      <content type="html">&lt;p&gt;
Amongst other changes, I am working on getting this blog over to use application/xhtml+xml as the content type. Of course this calls for a much stricter validation before content can be put live, otherwise users will be confronted with a broken page. The W3C validator and Zend_Http_Client make validation in PHP easy.
&lt;/p&gt;

&lt;p&gt;
People that remember my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-mass-validation-shellscript&quot;&gt;validation shell script&lt;/a&gt; from last year (cough) already know that &lt;a href=&quot;http://validator.w3.org/feed/docs/soap.html&quot;&gt;there is a SOAP-like response format available from the w3c validator&lt;/a&gt;. Like other people I am &lt;a href=&quot;http://yoast.com/w3c-validator-api/&quot;&gt;unhappy that the whole thing is not really a proper SOAP endpoint&lt;/a&gt;, but merely the same script that returns a SOAP envelope when the post parameter 'output' is set to 'soap12'.
&lt;br /&gt;
This is very unfortunate. I wasn't able to use &lt;a href=&quot;http://framework.zend.com/manual/en/zend.soap.client.html&quot;&gt;Zend_Soap_Client&lt;/a&gt; to construct the request, since the passed parameters are wrapped into a SOAP envelope as well, which the validator doesn't interpret.
&lt;/p&gt;

&lt;p&gt;
Instead I used the &lt;a href=&quot;http://framework.zend.com/manual/en/zend.http.html#zend.http.client.parameters&quot;&gt;Zend_Http_Client to do a POST request&lt;/a&gt;, which works neatly, but requires processing of the SOAP response as XML document. Below is an example of a validation controller that validates a URL and handles the SOAP response:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
class Admin_ValidationController extends Zend_Controller_Action
{
  public function indexAction() {
    $url = $this-&amp;gt;_request-&amp;gt;getParam('url');
    $client = new Zend_Http_Client($url);
    $response = $client-&amp;gt;request();
    $fragment = $response-&amp;gt;getBody();

    $params = array(
      'fragment' =&amp;gt; $fragment,
      'output' =&amp;gt; 'soap12',
    );

    $client = new Zend_Http_Client('http://validator.w3.org/check');
    $client-&amp;gt;setParameterPost('fragment', $fragment);
    $client-&amp;gt;setParameterPost('output', 'soap12');
    $validator_response = $client-&amp;gt;request('POST');
    $soap_response = $validator_response-&amp;gt;getBody();

    $xml = new DomDocument();
    @$xml-&amp;gt;loadXML($soap_response);
    $xpath = new DOMXpath($xml);
    $xpath-&amp;gt;registerNamespace(&quot;m&quot;, &quot;http://www.w3.org/2005/10/markup-validator&quot;);
    $elements = $xpath-&amp;gt;query(&quot;//m:errorcount&quot;);

    $error_str = '';

    if($elements-&amp;gt;item(0) &amp;amp;&amp;amp; $elements-&amp;gt;item(0)-&amp;gt;nodeValue &amp;gt; 0) {
      $errors = $xpath-&amp;gt;query(&quot;//m:errors/m:errorlist/m:error/m:message&quot;);
      foreach ($errors as $node) {
          $error_str .= $node-&amp;gt;nodeValue. &quot;\n&quot;;
      }
    }

    if(!empty($error_str)) {
      $this-&amp;gt;view-&amp;gt;message = $error_str;
    } else {
      $this-&amp;gt;view-&amp;gt;message = 'Validation of ' . $url . ' passed without errors.';
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;No Zend_Http_Client?&lt;/h2&gt;

&lt;p&gt;
For people that cannot or don't want to use Zend Framework at all (or need a facility to encode post parameters as multipart form data), maybe it's worth having a look at the &lt;a href=&quot;http://uk2.php.net/manual/en/ref.curl.php&quot;&gt;cURL functions in PHP&lt;/a&gt;. They provide another easy interface to do HTTP and even FTP requests. A possible snippet could look like this:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$params = array(
  'fragment' =&amp;gt; '&amp;lt;html /&amp;gt;',
  'output' =&amp;gt; 'soap12',
);

$url = 'http://validator.w3.org/check';

$recieved_headers = &quot;&quot;;
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL,$url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $params); // multipart encoding
curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
curl_setopt($ch, CURLOPT_REFERER,'');
curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
curl_setopt($ch, CURLOPT_TIMEOUT,30);

$recieved_headers = curl_exec($ch);
if (curl_errno($ch)) {
   print curl_error($ch);
} else {
   curl_close($ch);
}

echo $recieved_headers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example I didn't include the handling of the SOAP response, but you can easily grab that from the previous example.&lt;/p&gt;

&lt;p&gt;Happy validating everyone!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Conditional get in PHP - with some problems on the way</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/conditional-get-in-php-with-some-problems-on-the-way/index.html"/>
      <updated>2009-01-01T18:05:03+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/conditional-get-in-php-with-some-problems-on-the-way/conditional-get-in-php-with-some-problems-on-the-way</id>
      <content type="html">&lt;p&gt;Happy new year everyone. If you're anything like me, the credit crunch doomsday news and the gross overeating of the past festivities make you want to slim down and become more resourceful. Using Caching, &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_ETag&quot;&gt;ETags&lt;/a&gt; and the &lt;a href=&quot;http://www.checkupdown.com/status/E304.html&quot;&gt;304 HTTP code&lt;/a&gt; can help to cut down on traffic. But working on a conditional get came with some problems ...&lt;/p&gt;

&lt;p&gt;The first issue I had is that Firefox didn't send the proper headers. I was't entirely sure why, but after a long google search and trial and error it turned out that it was happening as long as there weren't the correct Cache-Control or Pragma directives. Setting Cache-Control to 'public, must-revalidate' and Pragma to 'cache' got it finally working.&lt;/p&gt;

&lt;p&gt;However, the PHP snippets that &lt;a href=&quot;http://annevankesteren.nl/2005/05/http-304&quot;&gt;I looked at&lt;/a&gt; &lt;a href=&quot;http://simonwillison.net/2003/Apr/23/conditionalGet/&quot;&gt;for reference&lt;/a&gt; utilize the HTTP_IF_MODIFIED_SINCE and HTTP_IF_NONE_MATCH entries in the $_SERVER array. Something that I could not get to work at all. Using the &lt;code&gt;apache_request_headers()&lt;/code&gt; circumnavigates this issue, and the headers If-None-Match and If-Modified-Since are pulled correctly.&lt;/p&gt;

&lt;p&gt;So here's the code that works for me as it stands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function checkBrowserCache($identifier, $last_modified) {
  $arr = apache_request_headers();
  $etag = '&quot;' . md5($last_modified . $identifier) . '&quot;';
  $client_etag = @$arr['If-None-Match'] ? trim(@$arr['If-None-Match']) : false;
  $client_last_modified_date = @$arr['If-Modified-Since'] ? trim(@$arr['If-Modified-Since']) : false;
  $client_last_modified = date('D, d M Y H:i:s \G\M\T', strtotime($client_last_modified_date));

  $etag_match = true;

  if(!$client_last_modified || !$client_etag) {
    $etag_match = false;
  }

  if($etag_match &amp;amp;&amp;amp; $client_last_modified &amp;gt; $last_modified) {
    $etag_match = false;
  }

  if($etag_match &amp;amp;&amp;amp; $client_etag != $etag) {
    $etag_match = false;
  }

  header('Cache-Control:public, must-revalidate', true);
  header('Pragma:cache', true);
  header('ETag: '.$etag);

  if($etag_match) {
    header('Not Modified',true,304);
    die();
  }

  header('Last-Modified:'.date('D, d M Y H:i:s \G\M\T', $last_modified));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, one problem remained: Firefox refuses to do as all other browsers that I tested. After getting a 304 correctly, it will pull the page again in its entirety. This means a full 200 OK response every second time Firefox does a request.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Merry Xmas everyone</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/merry-xmas-everyone/index.html"/>
      <updated>2008-12-19T13:21:18+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/merry-xmas-everyone/merry-xmas-everyone</id>
      <content type="html">&lt;p&gt;
Now that the year has come to an end, I just wanted to wish everyone a &lt;a href=&quot;#&quot; onclick=&quot;(function(){var k=document.getElementsByTagName('body')[0];var i=document.createElement('canvas');var p=i.getContext('2d');var j,g=50,o=1,l,f,d;i.style.cursor='pointer';i.style.zIndex='999999';i.style.left=0;i.style.top=0;i.style.position='absolute';k.appendChild(i);i.onclick=function(){i.parentNode.removeChild(i)};window.onresize=function(){window.clearTimeout(d);n()};function n(){l=window.innerWidth;f=window.innerHeight;i.setAttribute('width',l);i.setAttribute('height',f);j=[];for(var b=0;b&lt;g;b++){j.push({x:Math.random()*l,y:((Math.random()*f)-o),})}a()}function e(b,c){p.fillStyle='#ffffff';p.beginPath();p.arc(b,c,5,0,Math.PI*2,true);p.closePath();p.fill()}function m(b,c){p.fillStyle='white';p.strokeStyle='black';p.globalAlpha='1.0';p.lineWidth='1';p.lineCap='butt';p.lineJoin='round';p.mitterLimit='1';p.font='normal normal 12 Courier';p.fillStyle='#cf7122';p.beginPath();p.moveTo(190.5+b,110+c);p.bezierCurveTo(212.76+b,137.04+c,228.7+b,183.28+c,201+b,214.5+c);p.bezierCurveTo(177.76+b,240.7+c,137.26+b,243.54+c,115+b,216.5+c);p.bezierCurveTo(92.74+b,189.46+c,95.24+b,144.54+c,117.5+b,117.5+c);p.bezierCurveTo(139.76+b,90.46+c,168.24+b,82.96+c,190.5+b,110+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#dd381b';p.beginPath();p.moveTo(164+b,125+c);p.bezierCurveTo(189.77+b,161.32+c,206.77+b,222.68+c,181+b,259+c);p.bezierCurveTo(155.23+b,295.32+c,77.77+b,296.32+c,52+b,260+c);p.bezierCurveTo(26.23+b,223.68+c,36.21+b,158.1+c,66+b,125+c);p.bezierCurveTo(93+b,95+c,138.23+b,88.68+c,164+b,125+c);p.closePath();p.fill();p.fillStyle='#f8d5a1';p.beginPath();p.moveTo(48+b,169.5+c);p.bezierCurveTo(52.06+b,174.75+c,44.75+b,178+c,45.82+b,190.33+c);p.bezierCurveTo(46.7+b,200.46+c,38.15+b,193.63+c,33.92+b,188.06+c);p.bezierCurveTo(29.69+b,182.48+c,29.69+b,173.45+c,33.92+b,167.88+c);p.bezierCurveTo(38.15+b,162.3+c,43.94+b,164.25+c,48+b,169.5+c);p.closePath();p.fill();p.beginPath();p.moveTo(184.25+b,209+c);p.bezierCurveTo(179.33+b,204.25+c,187.98+b,205.19+c,186.25+b,190.5+c);p.bezierCurveTo(184.87+b,178.73+c,189.51+b,181.16+c,193.03+b,186.04+c);p.bezierCurveTo(196.56+b,190.93+c,197.1+b,199.29+c,194.24+b,204.71+c);p.bezierCurveTo(191.38+b,210.14+c,189.17+b,213.75+c,184.25+b,209+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#ffd5a2';p.beginPath();p.moveTo(142.82+b,38.47+c);p.bezierCurveTo(160.39+b,56.44+c,160.39+b,85.56+c,142.82+b,103.53+c);p.bezierCurveTo(125.25+b,121.49+c,96.75+b,121.49+c,79.18+b,103.53+c);p.bezierCurveTo(61.61+b,85.56+c,61.61+b,56.44+c,79.18+b,38.47+c);p.bezierCurveTo(96.75+b,20.51+c,125.25+b,20.51+c,142.82+b,38.47+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.strokeStyle='#000000';p.lineWidth='1.000000';p.lineJoin='miter';p.beginPath();p.moveTo(-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.bezierCurveTo(-122+b,-146+c,-122+b,-146+c,-122+b,-146+c);p.closePath();p.stroke();p.fillStyle='#4f4f4f';p.lineWidth='1';p.lineJoin='round';p.beginPath();p.moveTo(100.03+b,54.81+c);p.bezierCurveTo(101.59+b,56.42+c,101.59+b,59.03+c,100.03+b,60.64+c);p.bezierCurveTo(98.47+b,62.25+c,95.93+b,62.25+c,94.37+b,60.64+c);p.bezierCurveTo(92.81+b,59.03+c,92.81+b,56.42+c,94.37+b,54.81+c);p.bezierCurveTo(95.93+b,53.2+c,98.47+b,53.2+c,100.03+b,54.81+c);p.closePath();p.fill();p.beginPath();p.moveTo(128.83+b,54.81+c);p.bezierCurveTo(130.39+b,56.42+c,130.39+b,59.03+c,128.83+b,60.64+c);p.bezierCurveTo(127.27+b,62.25+c,124.73+b,62.25+c,123.17+b,60.64+c);p.bezierCurveTo(121.61+b,59.03+c,121.61+b,56.42+c,123.17+b,54.81+c);p.bezierCurveTo(124.73+b,53.2+c,127.27+b,53.2+c,128.83+b,54.81+c);p.closePath();p.fill();p.fillStyle='#ffffff';p.beginPath();p.moveTo(135.06+b,89.53+c);p.bezierCurveTo(142.85+b,107.86+c,130.06+b,138.27+c,123.51+b,157.06+c);p.bezierCurveTo(110.97+b,192.98+c,111.61+b,192.98+c,95.27+b,157.06+c);p.bezierCurveTo(87.02+b,138.91+c,77.83+b,108.48+c,85.62+b,90.14+c);p.bezierCurveTo(93.42+b,71.81+c,127.26+b,71.19+c,135.06+b,89.53+c);p.closePath();p.fill();p.fillStyle='#4f4f4f';p.beginPath();p.moveTo(117.93+b,97.68+c);p.bezierCurveTo(122.03+b,95.92+c,122.03+b,93.08+c,117.93+b,91.32+c);p.bezierCurveTo(113.82+b,89.56+c,107.18+b,89.56+c,103.07+b,91.32+c);p.bezierCurveTo(98.97+b,93.08+c,98.97+b,95.92+c,103.07+b,97.68+c);p.bezierCurveTo(107.18+b,99.44+c,113.82+b,99.44+c,117.93+b,97.68+c);p.closePath();p.fill();p.fillStyle='white';p.strokeStyle='black';p.fillStyle='#dc381b';p.beginPath();p.moveTo(127.25+b,12.09+c);p.bezierCurveTo(146.48+b,27.35+c,158.99+b,59.74+c,147+b,52.5+c);p.bezierCurveTo(123+b,38+c,92+b,40+c,72.5+b,54.5+c);p.bezierCurveTo(65.64+b,59.6+c,77+b,29.5+c,89.5+b,16+c);p.bezierCurveTo(103.44+b,0.94+c,109.5+b,-2+c,127.25+b,12.09+c);p.closePath();p.fill()}function a(){p.clearRect(0,0,l,f);m(100,100);for(var b in j){var c=j[b];c.y+=o;if(c.y&gt;f){c.y=-10;c.x=Math.random()*l}e(c.x,c.y)}d=window.setTimeout(a,20)}n()})();return false;&quot;&gt;merry merry christmas&lt;/a&gt;.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A mass validation shellscript</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-mass-validation-shellscript/index.html"/>
      <updated>2008-12-14T19:45:09+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-mass-validation-shellscript/a-mass-validation-shellscript</id>
      <content type="html">&lt;p&gt;I was looking for a CLI script that validates a whole site for me, but I couldn't find one that would work without installation issues. So I hacked together an example shell script that does the job for me by downloading the whole site and then running the files through a validation.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;The shell script uses &lt;a href=&quot;http://curl.haxx.se/&quot;&gt;CURL&lt;/a&gt; and &lt;a href=&quot;http://www.gnu.org/software/wget/&quot;&gt;WGET&lt;/a&gt; (&lt;a href=&quot;http://www.statusq.org/archives/2008/07/30/1954/&quot;&gt;WGET for OSX&lt;/a&gt;, in my case), plus the &quot;SOAP API&quot; of the w3c validator.&lt;/p&gt;

&lt;p&gt;I am putting &quot;SOAP API&quot; in quotation marks, because it is not really supporting SOAP calls, but only wraps the response into a Soap Envelope. That's why I am using CURL to post the files.&lt;/p&gt;

&lt;p&gt;For this example I installed &lt;a href=&quot;http://habilis.net/validator-sac/&quot;&gt;Validator S.A.C.&lt;/a&gt; and followed the &lt;a href=&quot;http://habilis.net/validator-sac/#advancedtopics&quot;&gt;instructions to get it running as local service&lt;/a&gt;. Of course, if you are on linux, you can &lt;a href=&quot;http://validator.w3.org/source/&quot;&gt;install it from source&lt;/a&gt; or as package. Alternatively you can change the script to use validator.w3.org/check instead of localhost/w3c-validator/check, but it might run pretty slow and create a lot of traffic.&lt;/p&gt;

&lt;h2&gt;The script&lt;/h2&gt;

&lt;p&gt;Also a word of warning: The script creates a temp directory and a log.txt file, which it deletes before creating them. I am in no way responsible for any of your stuff getting deleted by running this.&lt;/p&gt;

&lt;p&gt;But hey: Feel free to alter this to fit your needs (and maybe post improvements in the comments, for example for my sloppy way of detecting whether it is an HTML file).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/sh
#
# Script to validate files in directory
#
is_html() {
  file=$1
  htmlstart=`grep '&amp;lt;html' $1`

  if [ &quot;$htmlstart&quot; != &quot;&quot; ];
  then
    echo &quot;1&quot;;
  fi
}

validate_file() {
  curl -s -F uploaded_file=@$1 -F output=soap12 localhost/w3c-validator/check
}

download_site() {
  cd temp
  echo 'downloading files ...'
  wget -r -q -k -x -E -l 0 $1
  echo 'done downloading files'
  cd ..
}

setup() {
  rm -f log.txt
  rm -Rf temp
  mkdir temp
  touch log.txt
}

run_validation() {
  for file in `find $1`;
    do
      htmltrue=`is_html $file`

      if [ &quot;$htmltrue&quot; = &quot;1&quot; ];
      then
        echo &quot;request validation: $file&quot;
        rpc=`validate_file $file`

        echo &quot;checking response: $file&quot;
        noerror=`echo $rpc | grep '&amp;lt;m:errorcount&amp;gt;0&amp;lt;/m:errorcount&amp;gt;'`

        if [ &quot;$noerror&quot; = &quot;&quot; ];
        then
          echo &quot;Error in file $file&quot;
          echo &quot;----------------&quot; &amp;gt;&amp;gt; log.txt
          echo &quot;Error in file $file\n&quot; &amp;gt;&amp;gt; log.txt
          echo $rpc &amp;gt;&amp;gt; log.txt
          echo &quot;\n&quot; &amp;gt;&amp;gt; log.txt
          echo &quot;----------------&quot; &amp;gt;&amp;gt; log.txt
        fi
      fi
    done;

  has_errors=`cat ./log.txt | grep Error`

  if [ &quot;$has_errors&quot; = &quot;&quot; ];
  then
    echo &quot;no errors found\n&quot; &amp;gt;&amp;gt; log.txt
  fi
}

setup
download_site $1
run_validation ./temp/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;I slightly modified it, so I do get better error messages. I use &lt;a href=&quot;http://xmlsoft.org/XSLT/xsltproc2.html&quot;&gt;xsltproc&lt;/a&gt; for parsing the &lt;a href=&quot;http://validator.w3.org/docs/api.html#soap12format&quot;&gt;SOAP envelope returned by the validator&lt;/a&gt;. Here is the updates script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/sh
#
# Script to validate files in directory
#
is_html() {
  file=$1
  htmlstart=`grep '&amp;lt;html' $1`

  if [ &quot;$htmlstart&quot; != &quot;&quot; ];
  then
    echo &quot;1&quot;;
  fi
}

validate_file() {
  curl -s -F uploaded_file=@$1 -F output=soap12 localhost/w3c-validator/check
}

download_site() {
  cd temp
  echo 'downloading files ...'
  wget -r -q -k -x -E -l 0 $1
  echo 'done downloading files'
  cd ..
}

setup() {
  rm -f log.txt
  rm -Rf temp
  mkdir temp
  touch log.txt
}

run_validation() {
  for file in `find $1`;
    do
      htmltrue=`is_html $file`

      if [ &quot;$htmltrue&quot; = &quot;1&quot; ];
      then
        echo &quot;request validation: $file&quot;
        rpc=`validate_file $file`

        echo &quot;checking response: $file&quot;
        noerror=`echo $rpc | grep '&amp;lt;m:errorcount&amp;gt;0&amp;lt;/m:errorcount&amp;gt;'`

        if [ &quot;$noerror&quot; = &quot;&quot; ];
        then
		  filelocation=`echo $file | sed &quot;s/\/\//\//g&quot;`
          echo $rpc &amp;gt; temp_error.xml
          xsltproc --stringparam location $filelocation error_template.xsl temp_error.xml &amp;gt;&amp;gt; log.txt
          rm temp_error.xml

          echo &quot;Error in file $file&quot;
        fi
      fi
    done;

  has_errors=`cat ./log.txt | grep Error`

  if [ &quot;$has_errors&quot; = &quot;&quot; ];
  then
    echo &quot;no errors found\n&quot; &amp;gt;&amp;gt; log.txt
  fi
}

setup
download_site $1
run_validation ./temp/ $1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we need a file called error_template.xsl as well, here is an example file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
 xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;
 xmlns=&quot;http://www.w3.org/TR/xhtml1/strict&quot;
 xmlns:m=&quot;http://www.w3.org/2005/10/markup-validator&quot;
 xmlns:env=&quot;http://www.w3.org/2003/05/soap-envelope&quot;
&amp;gt;
  &amp;lt;xsl:output
    method=&quot;text&quot;
    omit-xml-declaration=&quot;yes&quot;
  /&amp;gt;

  &amp;lt;xsl:param name=&quot;location&quot; /&amp;gt;

  &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
  	&amp;lt;xsl:call-template name=&quot;divider&quot; /&amp;gt;
  	&amp;lt;xsl:value-of select=&quot;//m:errorcount&quot; /&amp;gt;
  	&amp;lt;xsl:text&amp;gt; Errors in &amp;lt;/xsl:text&amp;gt;
  	&amp;lt;xsl:value-of select=&quot;$location&quot; /&amp;gt;
  	&amp;lt;xsl:call-template name=&quot;lb&quot; /&amp;gt;
    &amp;lt;xsl:apply-templates select=&quot;//m:error&quot; /&amp;gt;
  &amp;lt;/xsl:template&amp;gt;


  &amp;lt;xsl:template match=&quot;m:error&quot;&amp;gt;
  	&amp;lt;xsl:text&amp;gt; Line &amp;lt;/xsl:text&amp;gt;
  	&amp;lt;xsl:value-of select=&quot;m:line&quot; /&amp;gt;
  	&amp;lt;xsl:text&amp;gt;, Col &amp;lt;/xsl:text&amp;gt;
  	&amp;lt;xsl:value-of select=&quot;m:col&quot; /&amp;gt;
  	&amp;lt;xsl:text&amp;gt;:&amp;lt;/xsl:text&amp;gt;
  	&amp;lt;xsl:call-template name=&quot;lb&quot; /&amp;gt;
  	&amp;lt;xsl:value-of select=&quot;m:message&quot; /&amp;gt;
  	&amp;lt;xsl:call-template name=&quot;lb&quot; /&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template name=&quot;lb&quot;&amp;gt;&amp;lt;xsl:text&amp;gt;
&amp;lt;/xsl:text&amp;gt;&amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template name=&quot;divider&quot;&amp;gt;
    &amp;lt;xsl:text&amp;gt;--------------&amp;lt;/xsl:text&amp;gt;&amp;lt;xsl:call-template name=&quot;lb&quot; /&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think this would be easily adaptable to produce XML or HTML files. I'd like to figure out where WGET did download the file from, so I could insert that into the output generation, as hyperlink for example. But apart from that I think it performs pretty neat.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A quick look at XInclude and XLink</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-quick-look-at-xinclude-and-xlink/index.html"/>
      <updated>2008-12-13T16:47:26+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-quick-look-at-xinclude-and-xlink/a-quick-look-at-xinclude-and-xlink</id>
      <content type="html">&lt;p&gt;Part of my current project is to transform thousands of static XML files, all interlinked and some of them referencing others as data subset that I need for the transformation. Time to have a quick look at XInclude and XLink.&lt;/p&gt;

&lt;h2&gt;XLink&lt;/h2&gt;

&lt;p&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/XLink&quot;&gt;Xlink&lt;/a&gt; is an XML application that defines hyperlinks in XML documents. While &lt;a href=&quot;http://www.w3.org/TR/xlink/#extended-link&quot;&gt;XLink supports extended links&lt;/a&gt;, which are able to define multiple hyperlinks from one XML node, the form that is easy to deal with straight away is the one defined by &lt;code&gt;type=&quot;simple&quot;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Like with all XML applications that use certain definitions, don't forget to include the namespaces in the XML and XSL document, and if you generate HTML, exclude them from being outputted by the transformation using the &lt;code&gt;exclude-result-prefixes&lt;/code&gt; attribute.
&lt;br /&gt;
Below is an example for a transformation in XSL.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
    xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;
    xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
    exclude-result-prefixes=&quot;xlink&quot;&amp;gt;

    &amp;lt;xsl:output method=&quot;html&quot;/&amp;gt;

    &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
        &amp;lt;xsl:apply-templates/&amp;gt;
    &amp;lt;/xsl:template&amp;gt;

    &amp;lt;xsl:template match=&quot;*[@xlink:type = 'simple' and @xlink:href]&quot;&amp;gt;
        &amp;lt;a href=&quot;{@xlink:href}&quot;&amp;gt;&amp;lt;xsl:apply-templates/&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As for the extended type of XLink references, this could come in handy to generate link lists for certain text elements and similar stuff where a 1:N relationship is needed.&lt;/p&gt;

&lt;h2&gt;XInclude&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/XInclude&quot;&gt;XInclude&lt;/a&gt; is an inclusion mechanism for XML, think SSI or PHP's &lt;code&gt;include()&lt;/code&gt;. Just that it is that bit more powerful, because it can use &lt;a href=&quot;http://en.wikipedia.org/wiki/XPointer&quot;&gt;XPointer&lt;/a&gt; to identify the nodes that it needs to include from the referenced document, and it provides a &lt;a href=&quot;http://www.w3.org/TR/xinclude/#fallback_element&quot;&gt;fallback element&lt;/a&gt; for when the inclusion fails.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;xi:include href=&quot;my.xml#xpointer(//node)&quot;&amp;gt;
  &amp;lt;xi:fallback&amp;gt;
   &amp;lt;fb&amp;gt;error&amp;lt;/fb&amp;gt;
  &amp;lt;/xi:fallback&amp;gt;
&amp;lt;/xi:include&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly this is not natively supported in browsers, but various DOM parsers have a mechanism in place that will include the referenced files, e.g. &lt;a href=&quot;http://uk2.php.net/manual/en/function.domdocument-xinclude.php&quot;&gt;PHP's &lt;code&gt;DomDocument-&amp;gt;xinclude&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$xml = new DomDocument;
$xml-&gt;load('data.xml');
$xml-&gt;xinclude();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again make sure that the namespaces are included. Also, if you use nested levels of includes, depending on the DOM parser, this might not automatically get resolved. For how to address this behaviour in PHP, &lt;a href=&quot;http://uk2.php.net/manual/en/function.domdocument-xinclude.php#44954&quot;&gt;see the comments at PHP.net&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>XSLT and HTML 5 problems</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xslt-and-html-5-problems/index.html"/>
      <updated>2008-12-09T17:47:46+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xslt-and-html-5-problems/xslt-and-html-5-problems</id>
      <content type="html">&lt;p&gt;Sometimes I'm really getting annoyed about the lack of control that
XSLT sometimes gives about what target formats are supported and what
output it generates&lt;/p&gt;

&lt;p&gt;I'm trying to utilize a canvas tag, and &lt;a href=&quot;http://excanvas.sourceforge.net/&quot;&gt;excanvas&lt;/a&gt;. Now the problem that I'm having is that excanvas is hooking up to onreadystatechange, and therefore will be executed before the ondomready event that jQuery offers.&lt;/p&gt;

&lt;p&gt;Which means I have to either do inline JS, and generate the canvas tags per JS, in order to create valid HTML 4, or I have to use the HTML 5 Doctype and can write the canvas tag in there just like that.&lt;/p&gt;

&lt;p&gt;Problem is: XSLT 1.0 doesn't support the HTML 5 to generate a doctype, and the output encoding meta tag that it selfishly applies is not valid in HTML 5 either. Any ideas anyone?&lt;/p&gt;

&lt;h2&gt;&lt;em&gt;UPDATE&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;
Quite a fruitful discussion in the comments.
&lt;br /&gt;
So for anyone else who's reading this: Bottom line is that, even with existing technology for XSLT, it is possible to create HTML 5.
&lt;/p&gt;

&lt;p&gt;
The first issue we were discussing was the DTD. HTML 5 in its current draft caters the generation with XSLT by providing a fallback DTD:
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;!DOCTYPE html PUBLIC &quot;XSLT-compat&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
The other issue was the meta tag with the charset attribute, that HTML 5 introduces in order to target the character set:
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;meta charset=&quot;...&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
It is just not possible to generate exactly that with libXSL, because libXSL forcefully replaces it with an HTML 4 style meta tag.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
This is not a problem though, as the old meta tag in its encoding state is a valid declaration of the character set, too.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Random thoughts on: SVG, JS toolkits and more</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/random-thoughts-on-svg-js-toolkits-and-more/index.html"/>
      <updated>2008-12-07T02:53:04+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/random-thoughts-on-svg-js-toolkits-and-more/random-thoughts-on-svg-js-toolkits-and-more</id>
      <content type="html">&lt;p&gt;For various reasons I seem to do much more reading on new techniques
and web stuff lately, and today brought up some for me fascinating
finds that I wanted to share.&lt;/p&gt;

&lt;p&gt;After discovering the merits of the canvas tag last week, and getting myself into rendering stats, I continued reading up on web based vector graphics. &lt;a href=&quot;http://starkravingfinkle.org/blog/2006/09/canvassvgvml-drawing-roundup/&quot;&gt;Mark Finkle's roundup on Canvas/SVG/VML&lt;/a&gt; was a good start point, and triggered some interest in his list of web based drawing tools. Are there any good ones based on canvas, rather than SVG? Very interesting to me is the little &lt;a href=&quot;http://annevankesteren.nl/2006/08-paintr21&quot;&gt;Paintr&lt;/a&gt; script, especially becasue of the use of &lt;a href=&quot;http://cow.neondragon.net/index.php/681-Canvas-Todataurl&quot;&gt;toDataURL()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, a very good overview are the &lt;a href=&quot;http://people.mozilla.com/%7Evladimir/xtech2006/&quot;&gt;slides by Vladimir Vukićević&lt;/a&gt; covering SVG and canvas. Hey, is there a SVG to canvas importer, where I can load a file and then display it on canvas, or is that a completely ridiculous idea? Or how about &lt;a href=&quot;http://weblogs.mozillazine.org/roc/archives/2008/06/applying_svg_ef.html&quot;&gt;boosting your CSS stuff with SVG FX&lt;/a&gt;, will that really take off?&lt;/p&gt;

&lt;p&gt;On to toolkits! There are so many out there. The so far unknown ones are &lt;a href=&quot;http://www.mochikit.com/&quot;&gt;Mochikit&lt;/a&gt;, which I discovered through &lt;a href=&quot;http://www.liquidx.net/plotkit/&quot;&gt;Plotkit&lt;/a&gt;, and a pretty obscure one called &lt;a href=&quot;http://www.uize.com/&quot;&gt;UIZE&lt;/a&gt;, as so often discovered &lt;a href=&quot;http://ajaxian.com/archives/uize-javascript-ui-toolkit&quot;&gt;via the almighty Ajaxian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sure, diversity sparks politics, and it is always interesting to read project politics, as seen in &lt;a href=&quot;http://mootools.net/blog/2008/12/04/sizzle/#more-115&quot;&gt;this post about why mootools would not use Sizzle&lt;/a&gt;.
Discussions like this show so much that we are all a bit self centric
and ego driven, when we expose ourselves on the web through
contribution and publication, really.&lt;/p&gt;

&lt;p&gt;Mochikit, by the way, is part of &lt;a href=&quot;http://turbogears.org/about/mochikit.html&quot;&gt;Turbogears&lt;/a&gt;, a mainly python based rapid development framework. Myself being focussed on &lt;a href=&quot;http://framework.zend.com/&quot;&gt;Zend Framework&lt;/a&gt; for the moment, I am always curious whether I should move on to the next tool and get into something completely different? I had a little play around with &lt;a href=&quot;http://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; and &lt;a href=&quot;http://www.rubyonrails.org/&quot;&gt;RoR&lt;/a&gt;, but in the end I didn't really wanted to invest the time to get that darn mod_python or to learn a whole new language. Unless someone wants me to do it while I get paid for it, that is ... anyone? &lt;/p&gt;

&lt;p&gt;However, if you already struggle with the diversity of js toolkits, it gets even worse when you look at the vast amount of MVC style frameworks that run on the server. At the moment I am working together with a team of Perl developers, and they use &lt;a href=&quot;http://www.catalystframework.org/&quot;&gt;Catalyst&lt;/a&gt;, a Perl based one that I hadn't heard of before, either. &lt;/p&gt;

&lt;p&gt;But the choices are endless, the egos fired up, and &lt;a href=&quot;http://grails.org/&quot;&gt;some people even say that the search is over&lt;/a&gt;. Well, until the next fashionable paradigm comes up, that is ... but before we get there, &lt;a href=&quot;http://www.railsenvy.com/2007/9/10/ruby-on-rails-vs-django-commercial-7&quot;&gt;we can watch the frameworks battle each other&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Onenaught on jQuery, testability and events</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/onenaught-on-jquery-testability-and-events/index.html"/>
      <updated>2008-12-05T11:11:02+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/onenaught-on-jquery-testability-and-events/onenaught-on-jquery-testability-and-events</id>
      <content type="html">&lt;p&gt;Over at &lt;a href=&quot;http://www.onenaught.com&quot;&gt;OneNaught&lt;/a&gt; Anup Shah gives some &lt;a href=&quot;http://www.onenaught.com/posts/85/turn-your-jquery-code-into-a-richer-unit-testable-plugin&quot;&gt;hints about how to utilize Events to make your jQuery plugins ready for unit testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anup is one of the head developers at &lt;a href=&quot;http://www.ivisgriup.com&quot;&gt;IVIS&lt;/a&gt;, a company that I was contracting for in the past. They heavily use XSLT, and very often Anup steps up as the main advocate for standards based techniques in an environment where not every middle-tier developer cares about quality markup and accessibility.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Looking at free charts and stats APIs</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/looking-at-free-chart-and-stat-apis/index.html"/>
      <updated>2008-12-04T14:28:06+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/looking-at-free-chart-and-stat-apis/looking-at-free-chart-and-stat-apis</id>
      <content type="html">&lt;p&gt;At the moment I am looking for a nice way to convert HTML tables into stats. I am thinking along the lines of &lt;a href=&quot;http://www.mikeindustries.com/blog/archive/2004/12/sifr-2.0-release-candidate-2&quot;&gt;SIFR&lt;/a&gt;, where flash replaces markup and displays dynamic data. But first I need something that displays dynamic stats ...&lt;/p&gt;


&lt;h2&gt;Flash Based:&lt;/h2&gt;

&lt;p&gt;The first thing that I found was &lt;a href=&quot;http://www.maani.us/xml_charts/&quot;&gt;XML/SWF Charts&lt;/a&gt;, which did look brilliant at first glance. Unfortunately the free version includes a link to their homepage, whenever one clicks on the object, and of course that's out of discussion.&lt;/p&gt;

&lt;p&gt;I then looked at &lt;a href=&quot;http://www.fusioncharts.com/Free/&quot;&gt;FusionCharts Free&lt;/a&gt;, but didn't find a way to quickly modify the shadows for the bar charts. Another Google search lead me to &lt;a href=&quot;http://teethgrinder.co.uk/open-flash-chart-2/bar-chart.php&quot;&gt;Open Flash Chart 2&lt;/a&gt;, which pretty much does want I want it to.&lt;/p&gt;

&lt;p&gt;All of the above are meant to work with a datafile that is loaded, like XML or JSON, and to get them to work with inline data requires a bit of JavaScript trickery, as this example for OpenFlashChart illustrates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;
function get_data(id) {
 return $.toJSON(data_obj);
}

var data_obj = {
  &quot;elements&quot;: [ { &quot;type&quot;: &quot;bar&quot;, &quot;values&quot;: [ 9, 8] } ],
  &quot;title&quot;: { &quot;text&quot;: &quot;Thu Dec 04 2008&quot; }
};
var swf_config = { &quot;get-data&quot;: &quot;get_data&quot;, &quot;id&quot;: &quot;my_chart&quot;};
$.swfobject.embedSWF(&quot;../3rdparty/open_flash_chart_2/open-flash-chart.swf&quot;, &quot;my_chart&quot;, &quot;200&quot;, &quot;200&quot;, &quot;9.0.0&quot;, &quot;expressInstall.swf&quot;, swf_config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Not ideal in my books, I thought to myself, but I could work around this somehow. Some further Google search (and at the same time, Matthias), however, pointed me towards solutions based on the canvas tag.
&lt;/p&gt;

&lt;h2&gt;Canvas Based:&lt;/h2&gt;

&lt;p&gt;The lack of support for canvas in IE was one of the reasons for me to pretty much ignore it. Probably the reason why I missed the ventures that try to work around the lack of support, namely a&lt;a href=&quot;http://ajaxian.com/archives/using-canvas-in-ie-via-flash&quot;&gt; flash based canvas integration&lt;/a&gt;, but also an emulated &lt;a href=&quot;http://me.eae.net/archive/2005/12/29/canvas-in-ie/&quot;&gt;canvas for IE&lt;/a&gt; implementation based on SVG, and its successor, &lt;a href=&quot;http://sourceforge.net/projects/excanvas/&quot;&gt;excanvas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some tools utilizing this technique are &lt;a href=&quot;http://www.liquidx.net/plotkit/&quot;&gt;PlotKit&lt;/a&gt;, &lt;a href=&quot;http://webfx.eae.net/dhtml/chart/chart.html&quot;&gt;WebFX Chart&lt;/a&gt;, its rewrite &lt;a href=&quot;http://www.sprymedia.co.uk/article/Canvas+Charts#download&quot;&gt;Canvas Charts&lt;/a&gt; and &lt;a href=&quot;http://bluff.jcoglan.com/&quot;&gt;Bluff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I managed to quickly get something off the ground with Bluff, and not only does the built in facility to use an HTML table as data source works great towards what I want to do, but the whole script looks considerably more tidy as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;
window.onload = function() {
var g = new Bluff.Mini.Bar('example', 400);
 g.theme_keynote();
 g.minimum_value = 0;
 g.maximum_value = 10;
 g.data_from_table('data');
 g.draw();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Others:&lt;/h2&gt;

&lt;p&gt;Of course there is a variety of other techniques and APIs to generate charts and stats. From the &lt;a href=&quot;http://www.smashingapps.com/2008/01/10/the-google-chart-api-lets-you-dynamically-generate-free-charts-in-your-website.html&quot;&gt;Google Charts API&lt;/a&gt; down to &lt;a href=&quot;http://search.cpan.org/dist/SVG-TT-Graph/&quot;&gt;Perl based CPAN modules that generate SVG&lt;/a&gt;. But most of those won't work on the client, but will require some server action, and client based rendering was one of my initial requirements.&lt;/p&gt;

&lt;h2&gt;Bottom Line:&lt;/h2&gt;

&lt;p&gt;It will canvas rather than SWF based charts, I think.&lt;/p&gt;

&lt;p&gt;Also it seams that canvas offers better answers to the problems that we were facing before, like the image replacement for headlines, nicely tackled by &lt;a href=&quot;http://css-tricks.com/typefacejs-a-sifr-alternative/&quot;&gt;Typface.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While for some of you web folks this might all be yesterdays news, I am amazed about how far the dynamic client side has come now. The &lt;a href=&quot;http://squeedlyspooch.com/firelight/xaml.xhtml&quot;&gt;Silverlight implementation without Silverlight&lt;/a&gt;, for example, is a step that goes so far beyond anything that I'd have ever expected, that I can only say: Amazing stuff.&lt;/p&gt;

&lt;h2&gt;Related:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ajaxian.com/archives/round-the-web-vector-graphics&quot;&gt;Nice little vector graphics roundup by the Ajaxian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ajaxian.com/by/topic/canvas&quot;&gt;Canvas tag on Ajaxian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/Canvas_tutorial&quot;&gt;Canvas tutorial at the Mozilla Developer Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://free-wiz.blogspot.com/2008/07/best-free-chart-apis.html&quot;&gt;Free Wiz: 10 Best Free Chart APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;
The longer I do search around the web, the more I discover:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.phpied.com/canvas-pie/&quot;&gt;Canvas Pie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.atalayasec.org/dev/2008/02/a-jquery-plugin-for-canvas-pies/&quot;&gt;Canvas Pie jQuery plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/flot/&quot;&gt;Flot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.filamentgroup.com/lab/creating_accessible_charts_using_canvas_and_jquery/&quot;&gt;fgCharting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>MySQL client output logging with tee</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/mysql-client-output-logging-with-tee/index.html"/>
      <updated>2008-12-03T13:44:08+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/mysql-client-output-logging-with-tee/mysql-client-output-logging-with-tee</id>
      <content type="html">&lt;p&gt;James, the sys admin guy here at &lt;a href=&quot;http://www.sportingstatz.com/&quot;&gt;Opta&lt;/a&gt;, where I am working at the moment, brought this up, and it is one of those neat tricks that can make life very easy but I still didn't know about.&lt;/p&gt;&lt;p&gt;A look in the &lt;a href=&quot;http://www.aip.de/%7Eweber/doc/mysql/manual_Client-Side_Scripts.html&quot;&gt;manual&lt;/a&gt; reveals that in the command line 'tee /path/to/file.txt' sets the output file, and 'notee' unsets it and therefore stops the logging.&lt;/p&gt;&lt;p&gt;Alternatively \T and \t can be used.&lt;/p&gt;&lt;p&gt;Happy logging.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Hello there, and congratulations ...</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/hello-there-and-congratulations/index.html"/>
      <updated>2008-12-02T23:23:04+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/hello-there-and-congratulations/hello-there-and-congratulations</id>
      <content type="html">&lt;p&gt;The last week was full of events for two of us. &lt;a href=&quot;http://www.willerich.com/900days/2008/12/crossing-the-start-line/&quot;&gt;While Matthias has just started the most amazing start-up one can think of&lt;/a&gt;, I went past my use-by date to hit the magic number: 30.&lt;/p&gt;

&lt;p&gt;And in order to avoid the struggle with loads of guests at some weird party that makes me wanna be 18 again, I tried to escape by going to Big Apple and celebrate thanksgiving with a 19 lbs turkey.&lt;/p&gt;

&lt;p&gt;I felt a bit drowsy thereafter, and couldn't get myself to write anything ... Matthias sure had better reasons not to write anything, &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/charles-proxy-review-by-snookca&quot;&gt;but somehow he managed&lt;/a&gt;. I hope he's got some sleep, finally. In any case, forgive us dear reader. We'll be on the case again soon.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Charles proxy review by Snook.ca</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/charles-proxy-review-by-snookca/index.html"/>
      <updated>2008-12-02T22:24:46+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/charles-proxy-review-by-snookca/charles-proxy-review-by-snookca</id>
      <content type="html">&lt;p&gt;I've been mentioning &lt;a href=&quot;http://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; in comments here and on other sites for a good 3 years now. It's been a great companion in debugging server communication with flash and ajax applications, especially before firebug had its network monitoring capabilities.&lt;/p&gt;&lt;p&gt;Jonathan Snook, who has been writing a consistently amazing blog for many years now, has written &lt;a href=&quot;http://snook.ca/archives/review/charles-http-monitoring/&quot;&gt;a post about how he monitors his HTTP traffic with Charles&lt;/a&gt;, and he seems to use a setup very similar to what I use; Charles as a weapon of choice, when you're not 100% on what the server/client sends, when you need to resend requests to the server, etc. and the Firefox extension &lt;a href=&quot;http://livehttpheaders.mozdev.org/&quot;&gt;Live HTTP Headers&lt;/a&gt; when you want to see what the result does in your browser.&lt;/p&gt;&lt;p&gt;He writes: &lt;/p&gt;&lt;p&gt;&quot;Charles ia a cross-platform desktop application that acts as a proxy
for all web requests, no matter what browser they come from; it can
even inspect Flash-originated requests and Adobe AIR application
requests. As the proxy, it's able to see all the information flowing
back and forth and provide a detailed peek at every request and
response. &lt;/p&gt;&lt;p&gt;One of my favourite features — and where it stands out from the
Firefox addons — is the ability to view XML, JSON and even AMF data
structures. It's easy to see right away if a request was successful or
not and you get access to all of the request and response headers.&quot;&lt;/p&gt;&lt;p&gt;I can only recommend that you give it a spin.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>XSL: Recursive template for counting up</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xsl-recursive-template-for-counting-up/index.html"/>
      <updated>2008-11-20T11:20:29+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xsl-recursive-template-for-counting-up/xsl-recursive-template-for-counting-up</id>
      <content type="html">&lt;p&gt;Thought I'd share this with you, even though it's nothing special: A simple XSL template that recursively increments a counter, so you can do a set number of operations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;xsl:template name=&quot;empty-score&quot;&amp;gt;
 &amp;lt;xsl:param name=&quot;target_cnt&quot; /&amp;gt;
 &amp;lt;xsl:param name=&quot;current_cnt&quot; /&amp;gt;

 &amp;lt;xsl:if test=&quot;$target_cnt &amp;gt; $current_cnt&quot;&amp;gt;
  &amp;lt;p&amp;gt;
   Target Cnt: &amp;lt;xsl:value-of select=&quot;$target_cnt&quot; /&amp;gt;
   Current Cnt: &amp;lt;xsl:value-of select=&quot;$current_cnt&quot; /&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;xsl:call-template name=&quot;empty-score&quot;&amp;gt;
   &amp;lt;xsl:with-param name=&quot;target_cnt&quot; select=&quot;$target_cnt&quot; /&amp;gt;
   &amp;lt;xsl:with-param name=&quot;current_cnt&quot; select=&quot;$current_cnt + 1&quot; /&amp;gt;
  &amp;lt;/xsl:call-template&amp;gt;
 &amp;lt;/xsl:if&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Zend Framework: XSL and self-serializing Views</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/zend-framework-xsl-and-self-serializing-views/index.html"/>
      <updated>2008-11-17T01:39:34+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/zend-framework-xsl-and-self-serializing-views/zend-framework-xsl-and-self-serializing-views</id>
      <content type="html">&lt;p&gt;A long time ago I argued that MVC style frameworks should use XSL instead of inline PHP code and so on. That's why I knocked together a little proof of concept for Zend Framework where the views files are XSLs and the View object serializes itself into XML for rendering.&lt;/p&gt;

&lt;h2&gt;Basic MVC structure&lt;/h2&gt;

&lt;p&gt;I just created a demo layout, utilizing the standard MVC structure of Zend_Controller:&lt;/p&gt;

&lt;pre&gt; |-application
 |---default
 |-----controllers
 |-----models
 |-----views
 |-------filters
 |-------helpers
 |-------scripts
 |---------index
 |---------test
 |-library
 |---demo
 |---zendframework_1.6.2
 |-webroot
&lt;/pre&gt;

&lt;p&gt;Of course now we need a bootstrap file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;set_include_path('.'
	. PATH_SEPARATOR . '../library/zendframework_1.6.2/'
	. PATH_SEPARATOR . '../library/demo/'
	. PATH_SEPARATOR . '../application/default/controllers'
	. PATH_SEPARATOR . get_include_path());

require_once('Zend/Loader.php');
Zend_Loader::loadClass('Zend_Controller_Front');
Zend_Loader::loadClass('Zend_Controller_Action_Helper_ViewRenderer');

$frontController = Zend_Controller_Front::getInstance();
$frontController-&amp;gt;setControllerDirectory(array(
	'default' =&amp;gt; '../application/default/controllers',
));

require_once 'View_Xslt.php';
$view = new View_Xslt;
$options = array();
$viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer($view, $options);
$viewRenderer-&amp;gt;setViewSuffix('xsl');
Zend_Controller_Action_HelperBroker::addHelper($viewRenderer);

$frontController-&amp;gt;dispatch();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I have provided a new viewRenderer and view object, which is called View_Xslt.php and is located in the library/demo folder.
Also I set the view suffix to xsl.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/xslt_views_demo.zip&quot;&gt;A ZIP file containing the whole demo (excluding the Zend Framework files) can be downloaded here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;The View Object&lt;/h2&gt;

&lt;p&gt;
The view object itself needs to be a class that extends Zend_View_Abstract. The rendering of the views happens in the _run method, and the view file will be passed as the first argument. However, this argument needs to be accessed with func_get_arg, otherwise we're confronted with a neat error message that our declaration is incompatible with Zend_View_Abstract.&lt;/p&gt;&lt;p&gt;In order to make my view object self-serializing later, I also added the Serializer in the constructor magic method, plus I added a private function that serializes the view into XML using the Serializer just created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;require_once('Serializer.php');

class View_Xslt extends Zend_View_Abstract
{
 private $serializer;
 private $rootName;

 public function __construct($data = array()) {
 $this-&amp;gt;serializer = new Serializer();
 parent::__construct($data);
 }

 public function setRootName($name) {
 $this-&amp;gt;rootName = $name;
 }

 protected function _run() {
 $template = func_get_arg(0);
 $xslDoc = new DOMDocument();
 $xslDoc-&amp;gt;load($template);
 $xmlDoc = $this-&amp;gt;toXml();
 $proc = new XSLTProcessor();
 $proc-&amp;gt;importStylesheet($xslDoc);
 echo $proc-&amp;gt;transformToXML($xmlDoc);
 }

 private function toXml() {
 $xml_str = $this-&amp;gt;serializer-&amp;gt;Serialize($this, $this-&amp;gt;rootName);
 return $xml_str;
 }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Serializer&lt;/h2&gt;

&lt;p&gt;So what does this Serializer do? It utilizes the &lt;a href=&quot;http://uk2.php.net/manual/en/language.oop5.reflection.php&quot;&gt;Reflection&lt;/a&gt; functionality to serialize the object into an XML string. This enables us to normally assign variables to the view from within our controller actions, just by saying &lt;code&gt;$this-&amp;gt;foo = 'bar'&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/xml-serialization-and-php-reflection&quot;&gt;I did a quick post on XML Serialization before&lt;/a&gt;, and the Serializer I have provided is inspired by what I have found there. DISCLAIMER: Keep in mind that this is just a proof of concept, and to get this working perfectly it probably needs a bit more work.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;class Serializer
{
 private $xmlDoc;

 public function __construct() {
 $this-&amp;gt;xmlDoc = new DOMDocument();
 }

 public function Serialize($inst, $nodeName=null) {
 if(is_object($inst))
 {
  $nodeName = ($nodeName == null) ? get_class($inst) : $nodeName;
  $root = $this-&amp;gt;xmlDoc-&amp;gt;createElement($nodeName);
  $this-&amp;gt;xmlDoc-&amp;gt;appendChild($root);
  $this-&amp;gt;SerializeObject($inst, $nodeName, $root);
 } else if(is_array($inst)) {
  $nodeName = ($nodeName == null) ? get_class($inst) : $nodeName;
  $root = $this-&amp;gt;xmlDoc-&amp;gt;createElement($nodeName);
  $this-&amp;gt;xmlDoc-&amp;gt;appendChild($root);
  $this-&amp;gt;SerializeArray($inst, $nodeName, $root);
 }

 return $this-&amp;gt;xmlDoc;
 }

 private function SerializeObject($inst, $nodeName, $parent) {
 $obj = new ReflectionObject($inst);
 $properties = $obj-&amp;gt;getProperties();

 foreach($properties as $prop) {
  if(!$prop-&amp;gt;isPrivate()) {
  $elem = $this-&amp;gt;SerializeData($prop-&amp;gt;getName(), $prop-&amp;gt;getValue($inst), $parent);
  }
 }
 }

 private function SerializeArray($array, $nodeName, $parent) {
 foreach($array as $key =&amp;gt; $val) {
  $keyStr = (is_numeric($key)) ? 'ArrayValue' : $key;
  $elem = $this-&amp;gt;SerializeData($keyStr, $val, $parent);

  if(is_numeric($key)) {
  $elem-&amp;gt;setAttribute('index', $key);
  }
 }
 }

 private function SerializeData($key, $val, $parent) {
 if(is_object($val)) {
  $propNodeName = get_class($val);
  $elem = $this-&amp;gt;xmlDoc-&amp;gt;createElement($propNodeName);
  $parent-&amp;gt;appendChild($elem);
  $this-&amp;gt;SerializeObject($val, $propNodeName, $parent);
  $elem-&amp;gt;setAttribute('type', 'object');
 } else if(is_array($val)) {
  $elem = $this-&amp;gt;xmlDoc-&amp;gt;createElement($key);
  $parent-&amp;gt;appendChild($elem);
  $this-&amp;gt;SerializeArray($val, $key, $elem);
  $elem-&amp;gt;setAttribute('type', 'array');
 } else {
  $elem = $this-&amp;gt;xmlDoc-&amp;gt;createElement($key, $val);
  $parent-&amp;gt;appendChild($elem);
  $elem-&amp;gt;setAttribute('type', 'property');
 }

 return $elem;
 }
}&lt;/code&gt;&lt;/pre&gt;



&lt;h2&gt;Controller and View files&lt;/h2&gt;&lt;p&gt;Nearly there. We'll just need some XSL file and a controller with an action to get the demo running. First the controller and action. I included a little Demo class, so we can see the Serializer in action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;class IndexController extends Zend_Controller_Action {
	public function indexAction() {
	 $this-&amp;gt;view-&amp;gt;setRootName('DataObject');

	 $this-&amp;gt;view-&amp;gt;foo = 'bar';
	 $this-&amp;gt;view-&amp;gt;super = array(
	 'here' =&amp;gt; 'there', 'foo' =&amp;gt; array(1,2,'test'),
	 );
	 $this-&amp;gt;view-&amp;gt;testObject = new DemoObject();
	 $this-&amp;gt;view-&amp;gt;testObject-&amp;gt;var = 'testObjectVar';
	}
}

class DemoObject {}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the view file(s). You could get away with just one, but because I wanted to imitate Zend_Layout, I did utilize xsl:import in order to do something similar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
 &amp;lt;xsl:import href=&quot;../layout.xsl&quot;/&amp;gt;

 &amp;lt;xsl:template match=&quot;DataObject&quot;&amp;gt;
 &amp;lt;xsl:apply-templates select=&quot;*&quot; /&amp;gt;
 &amp;lt;/xsl:template&amp;gt;

 &amp;lt;xsl:template match=&quot;*&quot;&amp;gt;
 &amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;xsl:value-of select=&quot;name()&quot; /&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;xsl:apply-templates select=&quot;text()&quot; /&amp;gt;
  &amp;lt;xsl:apply-templates select=&quot;*&quot; /&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
 &amp;lt;xsl:output method=&quot;xml&quot; encoding=&quot;ISO-8859-1&quot; omit-xml-declaration=&quot;no&quot; doctype-public=&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; doctype-system=&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot; indent=&quot;yes&quot; /&amp;gt;
 &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
 &amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
  &amp;lt;xsl:apply-templates select=&quot;/*&quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
 &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Result&lt;/h2&gt;

&lt;p&gt;And that's it! Rendering the index page should give you an output looking somehow like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot; /&amp;gt;
 &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;foo&amp;lt;/h2&amp;gt;bar&amp;lt;/div&amp;gt;

 &amp;lt;div&amp;gt;
 &amp;lt;h2&amp;gt;super&amp;lt;/h2&amp;gt;
 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;here&amp;lt;/h2&amp;gt;there&amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;h2&amp;gt;foo&amp;lt;/h2&amp;gt;
 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;ArrayValue&amp;lt;/h2&amp;gt;1&amp;lt;/div&amp;gt;

 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;ArrayValue&amp;lt;/h2&amp;gt;2&amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;ArrayValue&amp;lt;/h2&amp;gt;test&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;h2&amp;gt;DemoObject&amp;lt;/h2&amp;gt;

 &amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;var&amp;lt;/h2&amp;gt;testObjectVar&amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Be Box CLI and security issues</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/be-box-cli-security-issues/index.html"/>
      <updated>2008-11-15T18:43:04+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/be-box-cli-security-issues/be-box-cli-security-issues</id>
      <content type="html">&lt;p&gt;An interesting insight into the Be Box, and how much functionality is lurking behind the simple face &lt;a href=&quot;http://rory.allford.net/2007/03/30/bebox-got-root/&quot;&gt;is what I found here&lt;/a&gt;,
stating that the box is a dressed down version of a Speedtouch 780WL,
and therefore much more capable than the web interface suggests.&lt;/p&gt;

&lt;p&gt;This made me curious, and I did a google search on the topic, and I found a &lt;a href=&quot;http://www.beforum.co.uk/showthread.php?t=6667&quot;&gt;variety of CLI commands and some good explanations on the adsl2forum&lt;/a&gt;. Finally I took a look into the &lt;a href=&quot;http://rory.allford.net/wp-content/uploads/2007/03/st-780wl_cli.pdf&quot;&gt;CLI reference for the 780WL&lt;/a&gt;, which the Be Box is based on. This does reveal the whole complexity of the commands that the little box offers.&lt;/p&gt;

&lt;p&gt;So far so good. But careful readers of above links will also discover that there are a couple of weird security issues which are hidden in the default settings of the router. The services ftp, https and telnet are exposed to the WAN by default, and on top of that there are some users stored in the settings, which are not visible through the web interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
_{Administrator}=&amp;gt;user list
User    Flags Role
----    ----- ----
Administrator   U Administrator
tech    R TechnicalSupport
BeTech     TechnicalSupport &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The suspicion that &lt;em&gt;tech&lt;/em&gt; and &lt;em&gt;BeTech&lt;/em&gt; always have the same password, so the Be guys can telnet into your router quietly, might not be to far off? This means that the door is open to an easy attack for everyone.&lt;/p&gt;

&lt;p&gt;To anyone who's using the BeBox, I recommend to remove those users, change the Administrator password and, if not needed, disable the telnet, ftp and https services for the WAN. The easiest way to do this is exporting the settings to an ini file, edit them and then re-import them.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Reglib, an Event Delegation based Framework</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/reglib-an-event-delegation-based-framework/index.html"/>
      <updated>2008-11-14T22:50:27+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/reglib-an-event-delegation-based-framework/reglib-an-event-delegation-based-framework</id>
      <content type="html">&lt;p&gt;Via the &lt;a href=&quot;http://ajaxian.com&quot;&gt;ajaxian&lt;/a&gt; I came across the javascript based framework &lt;a href=&quot;http://blogs.sun.com/greimer/entry/reglib_javascript_library_now_available&quot;&gt;reglib&lt;/a&gt;, written by Gregory Reimer. It is based on some very clever thoughts and makes heavy use of &lt;a href=&quot;http://icant.co.uk/sandbox/eventdelegation/&quot;&gt;Event Delegation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Event Delegation is a technique I used quite a lot at Tesco. Back then &lt;a href=&quot;http://www.linkedin.com/in/matthewjdunn&quot;&gt;Matt Dunn&lt;/a&gt;, who was the lead UI developer there, introduced me to its benefits and how it &lt;a href=&quot;http://cherny.com/webdev/70/javascript-event-delegation-and-event-hanlders&quot;&gt;helps to keep the memory footprint down&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;reglib goes a step further. It utilizes the body element as single entry point for all events, and identifies the nodes that triggered the event so it can match them with&amp;nbsp; functions that were assigned through the library and execute them.&lt;/p&gt;&lt;p&gt;This cuts out the wait for until the DOM is&lt;span&gt; Loaded by the browser, something that is pretty much essential and implemented into most other frameworks like &lt;a href=&quot;http://docs.jquery.com/Events/ready&quot;&gt;JQuery&lt;/a&gt; or &lt;a href=&quot;http://mootools.net/docs/Utilities/DomReady&quot;&gt;MooTools&lt;/a&gt;&lt;/span&gt;. Gregory Reimer, who has written reglib based on his work for &lt;a href=&quot;http://www.sun.com&quot;&gt;sun.com&lt;/a&gt;, seems to dislike this and even &lt;a href=&quot;http://blogs.sun.com/greimer/entry/on_the_inelegance_of_modern&quot;&gt;describes this as anti-pattern&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Controller separation with ActionStack and Zend_Layout</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/controller-separation-with-actionstack-and-zend-layout/index.html"/>
      <updated>2008-11-06T22:47:11+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/controller-separation-with-actionstack-and-zend-layout/controller-separation-with-actionstack-and-zend-layout</id>
      <content type="html">&lt;p&gt;Thinking about my past projects, I realized that previously my
controllers where doing way too much that they shouldn't, and quickly
the comments controller would update user content and so on. I had
a good look at how I wanted to structure my code, and
decided that the controllers only should do things that belong to them,
but call other controllers if they needed stuff from them.&lt;/p&gt;

&lt;h2&gt;A Built In Solution&lt;/h2&gt;

&lt;p&gt;The Zend view renderer actually gives you a mechanism for this. In
every action you can set the response segment that you are targeting.
In combination with the action stack helper, this enables you to call
all the actions that you need and then output all the response segments
you have created where you'd need them within the layout, separating
bits of markup into single actions.&lt;/p&gt;
&lt;p&gt;Let's have a look at a code example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class FooController extends BaseController {
 public function indexAction() {
 $this-&amp;gt;_helper-&amp;gt;actionStack('list', 'foo');
 $this-&amp;gt;_helper-&amp;gt;actionStack('foo', 'bar');
 $this-&amp;gt;_helper-&amp;gt;actionStack('bar', 'bar');
 }

 public function listAction() {
 $this-&amp;gt;_helper-&amp;gt;viewRenderer-&amp;gt;setResponseSegment('list');
 }
}

class BarController extends BaseController
{
 public function fooAction() {
 $this-&amp;gt;_helper-&amp;gt;viewRenderer-&amp;gt;setResponseSegment('foo');
 }

 public function barAction() {
 $this-&amp;gt;_helper-&amp;gt;viewRenderer-&amp;gt;setResponseSegment('bar');
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in the layout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;?php
 echo $this-&amp;gt;layout()-&amp;gt;bar;
 echo $this-&amp;gt;layout()-&amp;gt;foo;
 echo $this-&amp;gt;layout()-&amp;gt;list;
?&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Further Reading&lt;/h2&gt;&lt;ul&gt;

&lt;li&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.controller.actionhelpers.html#zend.controller.actionhelpers.actionstack&quot;&gt;Zend Action Stack Helper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nabble.com/Zend_Layout-and-ActionStack-td15788789.html&quot;&gt;Zend_Layout and ActionStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>The credit crunch deja vu</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/the-credit-crunch-deja-vu/index.html"/>
      <updated>2008-11-05T10:25:18+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/the-credit-crunch-deja-vu/the-credit-crunch-deja-vu</id>
      <content type="html">&lt;p&gt;Of course everyone follows the news about the financial sector
crisis right now, and from a personal point of view I feel reminded
about the time around 9/11. Back then many many agencies in Germany,
where I am born and was doing my apprenticeship at the time, got hit hard and
had to lay off people.&lt;/p&gt;

&lt;p&gt;I remember group meetings, strong worries, and as the company that I worked for was directly dependent on the financial markets (doing websites for fund management organizations and other financial sector companies), they pretty much got hit immediately and did lay off about 20 people all together. I was worried whether my apprenticeship was worthwhile, or if I even was able to finish with it.&lt;/p&gt;

&lt;p&gt;I then switched to another company based in Berlin. They sounded a bit more optimistic in the interviews, so I joined them just to find that after three months of working there the same cost-cutting process was happening all over again.&lt;/p&gt;

&lt;p&gt;German economy in general went through tough times until about 2006, way past the date that I decided it's time to move somewhere else, and has just recently come out of the pessimism and fear that was so dominant through this whole time. The style that a lot of agencies, many of them new and inexperienced with tough situations, handled the layoffs was often borderline cruel, and where I worked relationships between management and staff became bitter and fearful. Websites like dotcomtod (now &lt;a href=&quot;http://www.boocompany.com/&quot;&gt;boocompany [german]&lt;/a&gt;) sarcastically documented companies swiveling towards going bust and cheered every time it happened.&lt;/p&gt;

&lt;p&gt;Maybe having seen times like this is one reason for the German IT magazine &lt;a href=&quot;http://www.heise.de/jobs/Die-IT-Branche-und-die-Krise-Sie-kommt-sie-kommt-nicht-sie-kommt--/news/meldung/118260&quot;&gt;&quot;Heise&quot; to sound so more pessimistic than everything else I read before [german]&lt;/a&gt; about the credit crunch, and one director of a german agency that I did work for verbally expressing something like &quot;the fat years are over now, that's for sure&quot;.&lt;/p&gt;

&lt;p&gt;Chris Heilmann of Yahoo &lt;a href=&quot;http://www.wait-till-i.com/2008/10/31/working-in-the-now/&quot;&gt;seems to have a similar feeling of deja vu&lt;/a&gt;, and I can imagine that the fact that &lt;a href=&quot;http://www.nytimes.com/2008/01/30/technology/30yahoo.html?_r=3&amp;amp;ei=5088&amp;amp;en=e797ae37305e5c8f&amp;amp;ex=1359435600&amp;amp;adxnnl=1&amp;amp;oref=slogin&amp;amp;partner=rssnyt&amp;amp;emc=rss&amp;amp;adxnnlx=1225785754-1uaunmzdvJZCW47tKsu88g&quot;&gt;Yahoo was one of the first IT companies that came up in the news with reports of staff reduction&lt;/a&gt; does make his outlook more pessimistic than others, but not necessarily inaccurate. &lt;/p&gt;

&lt;p&gt;This stands in big contrast to many other people that think (or maybe they're just wishing) that the IT industry is somehow the exception of economy, and will do well despite the downturn. But already I hear contractors asking about how the market does now, and I'm worried to find out for myself in December, when I need to get contracting work sorted once more.&lt;/p&gt;

&lt;p&gt;Of course, we Germans are pessimists, and the outlook that &lt;a href=&quot;http://www.computerweekly.com/Articles/2008/10/10/232620/credit-crunch-reverberates-across-it-industry.htm&quot;&gt;Computer Weekly has on the topic&lt;/a&gt; is talking of &quot;chances&quot; and &quot;positive impact of the credit crunch&quot;, but at the same time it points out that there will be drastic changes in IT investment strategies and what investors ask for as return value for these investments.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Be box and iplayer = crash?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/be-box-and-iplayer--crash/index.html"/>
      <updated>2008-11-03T22:28:47+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/be-box-and-iplayer--crash/be-box-and-iplayer--crash</id>
      <content type="html">&lt;p&gt;I thought I was going mad: Everytime I watched some iplayer content,
my wireless dropped out and it looked like the router reset itself.
&lt;/p&gt;

&lt;p&gt;Then, last time I tried it was all fine, and I kind of forgot about it. But &lt;a href=&quot;http://www.guardian.co.uk/technology/askjack/2008/oct/30/vista-wifi&quot;&gt;a post on the Guardians &quot;Ask Jack&quot;&lt;/a&gt; blog about trouble with wireless remined me of my troubles. Curiosity prompted me to look in the &lt;a href=&quot;https://www.bethere.co.uk/&quot;&gt;be&lt;/a&gt; forums now, and I found &lt;a href=&quot;http://www.theregister.co.uk/2008/08/28/bt_router_bbc_iplayer_bug/&quot;&gt;a BBC article on it&lt;/a&gt;, that a) tells me I'm not crazy and b) they fixed it. YAY!&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>JS custom events roundup</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/js-custom-events-roundup/index.html"/>
      <updated>2008-11-02T20:06:22+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/js-custom-events-roundup/js-custom-events-roundup</id>
      <content type="html">&lt;p&gt;With independent UI components, that not always know about each other, custom events come in handy. They enable us to code components that will populate hooks for other objects that then can be used to trigger different behaviours. Even better, the various objects that do pick up on our custom events don't necessarily have to be anticipated, but can subscribe to the provided events at any point throughout the development process. &lt;a href=&quot;http://ajaxian.com/archives/enjoying-the-observer-pattern-with-custom-events&quot;&gt;The observer pattern&lt;/a&gt; is a good example for this.&lt;/p&gt;

&lt;p&gt;But with different implementations in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot;&gt;IE&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/En/DOM/Element.addEventListener&quot;&gt;Firefox&lt;/a&gt; to start with, scripting you own custom events hasn't been easy from the start.&lt;/p&gt;

&lt;p&gt;Thankfully, a while ago some folk did good work in &lt;a href=&quot;http://www.truerwords.net/articles/web-tech/custom_events.html&quot;&gt;wrapping up the two implementations into a single class&lt;/a&gt; for custom events.&lt;/p&gt;

&lt;p&gt;Nowadays, most major javascript toolkits have some sort of custom event facility.&lt;/p&gt;

&lt;p&gt;From YUI I am familiar with the CustomEvents class, which enables us to create custom events, then fire them or subscribe to them&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = new YAHOO.util.CustomEvent('foo event');
foo.subscribe(function(type, args){}, true);
foo.fire();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way JQuery uses custom events is by attaching custom events with
the bind function to a DOM element wrapped in the $ function, which
then can be triggered:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$('#foo').bind('bar_event', function(event, param){});
$('#foo').trigger('bar_event');&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn't read up on this yet, but I am sure that other toolkits like prototype, dojo and mootools will have similar event models at hand.&lt;/p&gt;&lt;h2&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;



&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/event/#customdefine&quot;&gt;YUI Documentation for CustomEvent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://www.yuiblog.com/blog/2007/09/13/bubbling-library-by-caridy/&quot;&gt;YUI blog&lt;/a&gt; for a more detailed reading on YUI custom events and event bubbling&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dustindiaz.com/custom-events/&quot;&gt;Dustin Diaz - Publishing Custom Events in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.jquery.com/Events&quot;&gt;JQuery Events documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ajaxian on the &lt;a href=&quot;http://ajaxian.com/archives/enjoying-the-observer-pattern-with-custom-events&quot;&gt;Observer Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>DNS clustering in WHM/Cpanel accounts</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/dns-clustering-in-whmcpanel-accounts/index.html"/>
      <updated>2008-11-01T16:00:10+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/dns-clustering-in-whmcpanel-accounts/dns-clustering-in-whmcpanel-accounts</id>
      <content type="html">&lt;p&gt;Dealing with multiple CPANEL/WHM installs, DNS clustering is a way
to use redundant nameservers in order to keep your zones created by
CPANEL/WHM in sync.&lt;/p&gt;&lt;p&gt;In order to set it up, you need to go into &quot;Cluster/Remote Access &amp;gt;&amp;gt; Configure Cluster&quot; and check the radio button &quot;Enable Dns Clustering&quot;. Then you have to add the remote servers and establish a trust relationship between the remote and the local server, by storing an authorization key.&lt;/p&gt;&lt;p&gt;Also, you have to make sure that the DNS role is set to &quot;Synchronize changes&quot;.&lt;/p&gt;
&lt;p&gt;Do this on every installation that should be able to receive upodates from other DNS servers.&lt;/p&gt;&lt;p&gt;Once this is done, you might have to restart the BIND installations. Now you should be able to create an account or modify a DNS zone and afterwards synchronize the servers with the functions found in &quot;&lt;span&gt;DNS Functions&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;&lt;span&gt;Synchronize DNS Records&lt;/span&gt;&quot;.&lt;/p&gt;&lt;p&gt;If all zones are available on both servers, you will now be able to use nameservers on both installations as DNS entries for your domains.&lt;/p&gt;&lt;p&gt;The process with screenshots is described in the &lt;a href=&quot;http://www.cpanel.net/docs/dnsclustering-quickstart/&quot;&gt;CPANEL dns clustering quickstart guide&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Random thoughts on: Cloud computing</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/reading-up-on-cloud-computing/index.html"/>
      <updated>2008-11-01T15:14:32+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/reading-up-on-cloud-computing/reading-up-on-cloud-computing</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cloud_computing&quot;&gt;Cloud computing&lt;/a&gt;, as in &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_as_a_service&quot;&gt;Software as a Service&lt;/a&gt; and web based applications and APIs, is hailed as the &lt;a href=&quot;http://www.techcrunchit.com/2008/08/01/welcome-to-web-30-now-your-other-computer-is-a-data-center/&quot;&gt;Web 3.0&lt;/a&gt; and might also be the &lt;a href=&quot;http://www.readwriteweb.com/archives/google_apps_serious_threat_to_microsoft_office.php&quot;&gt;nail in the coffin for vendors that sell expensive office suites&lt;/a&gt;, at least it's trying to be.&lt;/p&gt;&lt;p&gt;And they are brilliant, those apps. The fact that pretty much everyone I ask uses Gmail, just to handle the spam volume, and finds that it works much better than Thunderbird or Outlook, speaks for itself. Providers of large scale services of course have more money than we ever imagine, more man power to refine their apps, more hardware, more redundancy, more you name it...&lt;/p&gt;&lt;p&gt;And who could overhear the amazing stories behind all the mashups, &lt;a href=&quot;http://googlemapsmania.blogspot.com/2006/12/50-things-to-do-with-google-maps.html&quot;&gt;that use google maps for example&lt;/a&gt;, or some other cool API, to do something amazing that otherwise would have been unachievable or at least very expensive and therefore not happening at all?

&lt;/p&gt;
&lt;p&gt;Of course, harvesting the benefits of cloud computing means that I surrender the power to control my information, and its privacy, to someone else, often more powerful and of trustworthy intentions. Also, the more I trust external services the more I am building up dependencies that could really rock my boat, if one of them stops provision of services for whatever reason, like in the case of poor &lt;a href=&quot;http://www.guardian.co.uk/technology/blog/2008/oct/20/google-cloudcomputing&quot;&gt;Loren Baker&lt;/a&gt;, who got locked out of his Google accounts and therefore &lt;a href=&quot;http://www.guardian.co.uk/technology/blog/2008/oct/20/google-cloudcomputing&quot;&gt;couldn't access any of his business email or documents&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Quite worrying indeed,
and while many people ask something like &quot;well, what did he do in
order to be locked out, the poor sod&quot; and others, like GNU guru &lt;a href=&quot;http://www.stallman.org/&quot;&gt;Richard Stallman&lt;/a&gt;, feel that &lt;a href=&quot;http://www.guardian.co.uk/technology/2008/sep/29/cloud.computing.richard.stallman&quot;&gt;cloud computing is a trap&lt;/a&gt; that we're falling into, as soon as we give up control.&lt;/p&gt;&lt;p&gt;But how safe are private computers, really? Who didn't have a failed hard
drive here, please raise your hand now? &lt;a href=&quot;http://ask-leo.com/why_dont_people_back_up.html&quot;&gt;How good is your backup
strategy&lt;/a&gt;? And how different is renting a mailserver from a company to do your business from using Gmail to the same?&lt;/p&gt;&lt;p&gt;My guess is that, if you have a root server somewhere, at least you can point at the contract and say: &quot;I am renting this service from you, so as long as I pay you have no right to change the mode of provision&quot;. &lt;/p&gt;&lt;p&gt;Otherwise, with major companies changing their minds about strategies, about what they do want to support and what they don't, all we are left with is their good will and kindness, something that we cannot always count on, &lt;a href=&quot;http://news.cnet.com/2100-1040-946379.html?tag=fd_top&quot;&gt;as seen with apples .Mac &lt;/a&gt;service, which was promised to us as the email that was &quot;&lt;a href=&quot;http://www.macobserver.com/editorial/2002/07/21.1.shtml&quot;&gt;free for life&lt;/a&gt;&quot;.&lt;/p&gt;&lt;p&gt;Also, if things like this happen, how do you get the data out of these services? It seems immoral to introduce changes and not offer a transition period where some sort of migration should be possible. But I haven't yet found &quot;export all emails to other imap server&quot; function in Gmail (only the other way round is instantly possible), even though this might be exactly what's needed to make cloud computing a fair deal for the user. &lt;/p&gt;&lt;p&gt;So for all of you out there, that base their businesses entirely on other businesses APIs, what is your strategy to overcome issues like this? Is there a fallback strategy, when one service that you're utilizing drops out?&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Why the relaunch?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/why-the-relaunch/index.html"/>
      <updated>2008-10-28T07:03:29+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/why-the-relaunch/why-the-relaunch</id>
      <content type="html">&lt;p&gt;Ok, as &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/content/a-new-style-for-our-content#comment-4378&quot; title=&quot;Comment by Matthias&quot;&gt;Matthias already said&lt;/a&gt;, I'd like to give an insight into what has changed in this relaunch, but above all I want to share what we're trying to achieve.&lt;/p&gt;
&lt;h2&gt;Where we're coming from&lt;/h2&gt;
&lt;p&gt;If you still remember our old layout in its first version, you'll remember the three columns on the homepage: Articles, Elsewhere and Events. Also you'll remember that at some point the Elsewhere column has been replaced with the Blogs column.&lt;/p&gt;
&lt;p&gt;Historically we planned to write long and elaborate how-tos and detailed articles on what we were dealing with in our jobs on a day to day basis. Also we were planning to give you UK related web events in a calendar-like style. Great ideas, both of them, but after the initial honeymoon period we all got very busy in our private lives, and the first thing that we realized was that the Events list was much more work than we expected, with very little interest from our audience. The second thing, however, had a much bigger impact: Our article releases were going down to only a few per year. Not enough to keep anyone reading our output, really.&lt;/p&gt;
&lt;p&gt;This is when the Blog section came to life. Replacing the Events list found on the homepage, it enabled us to quickly share some thoughts and observations, without having the &quot;overwhelming&quot; task of writing a proper article. This somehow revived the site's publishing frequency, but since the original layout was article centric, the Blog section seemed a bit ... well ... misplaced.&lt;/p&gt;
&lt;p&gt;This is why the main goal for this relaunch was to get rid of the distinction between Articles and Blog. The site is a blog, and everything should be worth reading, no matter how long it is.&lt;/p&gt;
&lt;h2&gt;Ancient technicalities&lt;/h2&gt;
&lt;p&gt;Another thing that got to my head, especially, was the fact that the old site was running on a pre 1.0 version of Textpattern. Certain things were never really possible to do, it took quite a toll on the server, the database log took up something like 3GB, and two times we had to move hosting providers because we found out that the small print of their contracts enables them to kick you off their shared servers without warning, even though you neither exceed the stated space or bandwidth.&lt;/p&gt;
&lt;p&gt;Even worse, it was really hard to implement new functionality properly, and when we did, we were hacking the system so much that we'd never be able to port it. When we tried to port it over to wordpress, which should be possible when using an newer version of Textpattern, we miserably failed.&lt;/p&gt;
&lt;h2&gt;Did we do the right thing?&lt;/h2&gt;
&lt;p&gt;This, dear reader, is something that time will tell. The things to be judged by are the amount of writing we'll do in the future, but also whether you folks out there do like the new look of the relaunch and find it easy enough to use. Also we're planning to slowly jazz it up here and there, and the new Zend Framework based system should make it quite simple to plug new functionality in.&lt;/p&gt;
&lt;h2&gt;Technical details to come!&lt;/h2&gt;
&lt;p&gt;Since the sytem is a complete custom rewrite, there are a few code snippets that might be interesting. But this is a pretty long post already, so I'll save writing about the technical details of the relaunch for a follow up post. In the meantime, you can just subscribe to &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/feeds/rss&quot;&gt;our RSS feed&lt;/a&gt; to make sure you're gonna be the first to find out.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A new style for our content</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-new-style-for-our-content/index.html"/>
      <updated>2008-10-26T18:02:05+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-new-style-for-our-content/a-new-style-for-our-content</id>
      <content type="html">&lt;p&gt;We've announced it a couple of times, and here we are: A new face for Content with Style is live.&lt;/p&gt;
&lt;p&gt;So we're happy to say that we didn't lie, we've just been slow. Forgive us if the whole thing doesn't work perfectly from the start, but let us know what's broken and you'll help us to fix it quicker. Thanks for your patience.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>You've got new mail. 3500 actually.</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/youve-got-new-mail-3500-actually/index.html"/>
      <updated>2008-10-21T13:48:53+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/youve-got-new-mail-3500-actually/youve-got-new-mail-3500-actually</id>
      <content type="html">	&lt;p&gt;Today my folder for mailing list digests hit the mark of 3500 unread mails. Time to cut them off, I think.&lt;/p&gt;

	&lt;p&gt;Already checking the uk-usability list, I subscribed to 5 more of them at around the time Content with Style went online, so that&amp;#8217;s May 2005 or so. And I used to read a lot of the digests, sometimes helping a lost developer on the way, sometimes pimping our site.&lt;/p&gt;

	&lt;p&gt;Maybe three times I actually asked a technical question in the more or less anonymous round, but as far as I remember, never got a useful reply (so I had to wait until shaun inman promoted the obvious, using opacity to style the file input/submit button &lt;strong&gt;without&lt;/strong&gt; deleting the value). What I got instead is an average of 10 spam mails a day. &lt;/p&gt;

	&lt;p&gt;It&amp;#8217;s not all bad, though. First of all there were a lot of hacks and small insights learnt on every list, not so much the &amp;#8220;how to do it&amp;#8221;, but rather the &amp;#8220;how to do it better&amp;#8221; or &amp;#8220;how to do it differently&amp;#8221;. Then there&amp;#8217;s the exception to all the others, the rest-discuss list on yahoo groups. I don&amp;#8217;t know how many times I&amp;#8217;ve seen questions replied that would make people understand the possibilities and concept of REST, also there&amp;#8217;s not a lot of comments that tell you to use google, RTFM or what else.&lt;/p&gt;

	&lt;p&gt;But enough is enough, and now is the time to cut down on this mess. It&amp;#8217;s all archived online, so I don&amp;#8217;t need to do that. Before I delete this part of my career development, I want to let you know my recommendations for your development needs, whenever google lets you down:&lt;/p&gt;

	&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.chinwag.com/lists/uk-usability&quot;&gt;uk usability&lt;/a&gt;: pretty silent most of the time, but reasonable questions are usually discussed instead of given the silent treatment&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://news.php.net/php.i18n&quot;&gt;php-i8n&lt;/a&gt;: One list that helped me close the serious gap in my programming knowledge about how to deal with planning and building websites with different languages and character encodings.&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://news.php.net/php.db&quot;&gt;php-db&lt;/a&gt;: This one seems to have more of a junior crowd appeal, for folks new to dealing with the server side of things. No use for me now, not bad back then. There&amp;#8217;s &lt;a href=&quot;http://news.php.net/&quot;&gt;tons more specialized php mailing lists&lt;/a&gt;, by the way.&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://lists.evolt.org/&quot;&gt;thelist@evolt&lt;/a&gt; and &lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://www.webdesign-l.com/&quot;&gt;webdesign-l&lt;/a&gt;: Both the evolt list and webdesign-l are very likeable, each have a reasonably sized group of returning and helpful contributors. Member of those lists were so kind to help me (mostly off-list) when I started out as freelancer, and I&amp;#8217;d love to contribute more than my current total of maybe half a dozen replies if I ever have a less time-demanding job. Another &lt;a href=&quot;http://alistapart.com/articles/tenyears&quot;&gt;authority on web development&lt;/a&gt; recently bigged them up, too.&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://tech.groups.yahoo.com/group/rest-discuss/&quot;&gt;rest-discuss@yahoogroups&lt;/a&gt;: As I said above, a brilliant resource, and a brilliant discussion forum. Definitely sign up when you grind your teeth on REST. I think I still owe them a long announced, never completed Ajax-to-REST demo.&lt;/li&gt;
	&lt;/ul&gt;

	&lt;p&gt;Never forget the etiquette: Try googling it first, also look into the archive of the list you&amp;#8217;d like to ask, and try to understand the issue at hand. Be nice, be concise, and help others if you can.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Friday fun: Sokoban</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/friday-fun-sokoban/index.html"/>
      <updated>2008-10-17T06:31:02+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/friday-fun-sokoban/friday-fun-sokoban</id>
      <content type="html">	&lt;p&gt;I had this great moment in my kitchen recently, when we had a new washing machine and fridge delivered.&lt;br /&gt;
The delivery guys were in a bit of a rush, and our road as well as our hallway are fairly narrow, which added to the tension. So, instead of doing the logical thing of taking the old appliances out first, they decided to roll the new boxed up ones in right away.&lt;br /&gt;
This created a comedy scene I&amp;#8217;ll never forget: 4 people in the kitchen, one big kitchen table, and 4 boxes that had to be moved in a specific order into a specific place. Real life Sokoban! Needless to say, I cracked up laughing, leaving my wife puzzled and one of the delivery guys visibly angry.&lt;/p&gt;

	&lt;p&gt;For those who don&amp;#8217;t know, Sokoban is an old computer game &lt;br /&gt;
&lt;cite&gt;in which the player pushes boxes around a maze, viewed from above, and tries to put them in designated locations. Only one box may be pushed at a time, and boxes cannot be pulled. The puzzle is usually implemented as a video game.&lt;/cite&gt; (source: &lt;a href=&quot;http://en.wikipedia.org/wiki/Sokoban&quot;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

	&lt;p&gt;After that I felt the urge to play Sokoban again. Finding the original on the web wasn&amp;#8217;t too hard, although I won&amp;#8217;t give you a link here. Use google wisely and live with the fact that you&amp;#8217;re illegally downloading a random collection of exe files that might or might not unleash hell on your machines.&lt;/p&gt;

	&lt;p&gt;I felt that it&amp;#8217;s a great time waster and banned it from my work, instead I tried and bought &lt;a href=&quot;http://www.gtsystem.eu/naboko/&quot;&gt;Naboko&lt;/a&gt; for the iPhone, which is amazing. The shear fact that it has something like 2400 levels, made by a handful of bright mathematical-type brainiacs is astonishing. One of them is &lt;a href=&quot;http://sapiens.ya.com/sokobanhomz/intro.html&quot;&gt;Marti Homs&lt;/a&gt;, who has contributed a ton of levels to Naboko, but also set them up online to play in a javascript version, built by another, &lt;a href=&quot;http://sokoban.e-contento.com/en.index.php&quot;&gt;Juan Antonio Jim&amp;#233;nez&lt;/a&gt;, who has done the same with his levels as well as the original levels the game came.&lt;/p&gt;

	&lt;p&gt;Enjoy!&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Remove the mac sync icon in Leopard</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/remove-the-mac-sync-icon-in-leopard/index.html"/>
      <updated>2008-10-03T02:27:17+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/remove-the-mac-sync-icon-in-leopard/remove-the-mac-sync-icon-in-leopard</id>
      <content type="html">	&lt;p&gt;&lt;a href=&quot;http://www.kianhean.com/&quot;&gt;Lim Kien Hean&lt;/a&gt; describes the &lt;a href=&quot;http://www.kianhean.com/2007/10/30/remove-that-mac-sync-icon-in-leopard/&quot;&gt;removal of the .mac sync icon from the OSX top bar&lt;/a&gt; as a small but important trick.&lt;br /&gt;
I happen to agree! Thanks.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Over @Natbat.net: CSS systems for writing maintainable CSS</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/over-natbatnet-css-systems-for-writing-maintainable-css/index.html"/>
      <updated>2008-10-01T11:44:18+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/over-natbatnet-css-systems-for-writing-maintainable-css/over-natbatnet-css-systems-for-writing-maintainable-css</id>
      <content type="html">	&lt;p&gt;Very very good slides for download at &lt;a href=&quot;http://natbat.net/2008/Sep/28/css-systems/&quot;&gt;natbat.net&lt;/a&gt; , and a nice discussion in the comments as well.&lt;/p&gt;

	&lt;p&gt;Interestingly Natalie Downe argues against CSS frameworks as such, but for a structured and reusable approach. Myself, I have never utilized a CSS framework, and apart from a little toolset for clearfix and inline-block I write every CSS for a site from scratch.&lt;/p&gt;

	&lt;p&gt;I like the fact that she takes version control into consideration when she chooses against multiple rule statements in one line, which is something that I have to argue again and again &amp;#8230;&lt;/p&gt;




 </content>
    </entry>

    <entry>
      <title>Command line search and replace?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/command-line-search-and-replace/index.html"/>
      <updated>2008-09-30T06:24:54+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/command-line-search-and-replace/command-line-search-and-replace</id>
      <content type="html">&lt;p&gt;
So I'm asking around for the best way to do search and replace in command line ... I have to copy files into another folder, but replace one word.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.cyberdummy.co.uk/&quot;&gt;Tom&lt;/a&gt; pointed me towards using perl:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cp ./source/* ./destination/
cd ./destination/
perl -pi -e 's/foo/bar/' *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.redwiredesign.com/profile/justin_finkelstein.html&quot;&gt;Justin&lt;/a&gt; in contrast uses sed, and a loop:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cd ./source
for A in `ls`; do  echo sed 's/foo/bar/' $A &gt; ./destination/$A; done;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Which brought me to finally look into the man pages for &lt;a href=&quot;http://lowfatlinux.com/linux-sed.html&quot;&gt;sed&lt;/a&gt; , the linux stream editor.
Apparanetly the -i flag enables in-place editing there as well, and you could do something like tom did with sed:
&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
cp ./source/* ./destination/
cd ./destination/
sed -i '' 's/foo/bar/' *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Initially, trying the -i flag, I got weird warnings like this:
&lt;br /&gt;
sed: 1: &quot;index.shtml&quot;: command i expects  followed by text
&lt;/p&gt;

&lt;p&gt;
This is due to the missing extension that you need to provide for the -i flag, in the case above I used '' to not create any backup files.
If you provide '.bak' it will create backup files, i.e. index.shtml.bak before editing.
&lt;/p&gt;

&lt;p&gt;
Happy search and replace!
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>More background image fun</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/more-background-image-fun/index.html"/>
      <updated>2008-09-22T14:21:56+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/more-background-image-fun/more-background-image-fun</id>
      <content type="html">	&lt;p&gt;Tying in with Pascal&amp;#8217;s recent &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Blog/183/css-background-image-on-html-image-element/&quot;&gt;post about background images for images&lt;/a&gt;, here is more image-related css magic, this time combined with a little jQuery, to create beautifully animated rollover effects (or whatever trigger you can think of, progress bars etc). Yay, eyecandy!&lt;/p&gt;

	&lt;p&gt;If you like it or not is of course personal preference, but I think Jonathan Snook&amp;#8217;s &lt;a href=&quot;http://snook.ca/archives/javascript/jquery-bg-image-animations/&quot;&gt;examples of utilizing jQuery to animate background images&lt;/a&gt; are very slick, especially because it&amp;#8217;s only using fairly obvious techniques.&lt;/p&gt;

	&lt;p&gt;His work is based on the &lt;a href=&quot;http://alistapart.com/articles/sprites2&quot;&gt;ideas of Dave Shea&lt;/a&gt; in an article in the late August issue of A List Apart, but he cleans up and improves the readability of the css by miles.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Textmate search &#38; reg exp</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/textmate-search-reg-exp/index.html"/>
      <updated>2008-09-17T11:53:02+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/textmate-search-reg-exp/textmate-search-reg-exp</id>
      <content type="html">	&lt;p&gt;One of the nicest things about &lt;a href=&quot;http://macromates.com/&quot;&gt;Textmate&lt;/a&gt; is the that you keep discovering things even after a year of using it. The project wide search and replace functionality already helped me, but I kept ignoring that little check box saying &amp;#8220;Regular expression&amp;#8221;.&lt;/p&gt;

	&lt;p&gt;Of course, for someone that quite likes regular expressions, using search and replace with regular expression matches is a very powerful I gave it a try, fired up the project wide search (cmd+shift+F) and changed CSS file names in various locations and folders by searching for &lt;/p&gt;

	&lt;p&gt;href=&amp;#8221;(.+)foo.css&amp;#8221; &lt;/p&gt;

	&lt;p&gt;, then replaced it with &lt;/p&gt;

	&lt;p&gt;href=&amp;#8221;$1bar.css&amp;#8221;&lt;/p&gt;

	&lt;p&gt;and, after double checking for what it did, just clicked on File-&gt;Save All (alt+cmd+S).&lt;/p&gt;

	&lt;p&gt;Very powerful, very neat!&lt;br /&gt;
One thing that I am still missing, though, is the muti-line search and replace field found in BBEdit or Homesite, which comes in handy when searching for whole blocks of HTML. Dealing with line breaks in the Textmate search is just too fiddly, and maybe there&amp;#8217;s a better way but I haven&amp;#8217;t found it yet? &lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>CSS Background image on html image element?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/css-background-image-on-html-image-element/index.html"/>
      <updated>2008-09-15T07:01:26+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/css-background-image-on-html-image-element/css-background-image-on-html-image-element</id>
      <content type="html">	&lt;p&gt;My co-worker &lt;a href=&quot;http://fuzzyoutline.com/&quot;&gt;Paul&lt;/a&gt; showed how helpful it is to question the obvious: Can you apply a background image to an image?&lt;/p&gt;

	&lt;p&gt;And, as he found out, the answer is: Yes!&lt;/p&gt;

	&lt;p&gt;Switch the image to display: block, apply a padding, and there you go, you can set up backgrounds for images &amp;#8230;&lt;/p&gt;

	&lt;p&gt;See the &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/img_bg_demo/index.html&quot;&gt;little demo&lt;/a&gt; I&amp;#8217;ve built to achieve a paralax like scrolling with just a div and an img.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Firefox 3 keeps logging me out. Not any more it's not.</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/firefox-3-keeps-logging-me-out-not-any-more-its-not/index.html"/>
      <updated>2008-09-01T09:51:33+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/firefox-3-keeps-logging-me-out-not-any-more-its-not/firefox-3-keeps-logging-me-out-not-any-more-its-not</id>
      <content type="html">	&lt;p&gt;Like many others I&amp;#8217;ve been enjoying Firefox 2&amp;#8217;s ongoing session functionality that had me logged in on frequently used sites. This recently changed with the Firefox 3 upgrade. All of a sudden Basecamp and some other random sites kept asking for my login. &lt;/p&gt;

	&lt;p&gt;At first I thought that maybe Basecamp changed policies, or that some rolled out code went wrong. That went until last Friday, when I stopped ignoring the &amp;#8220;remember me&amp;#8221; checkbox, which also failed and an old client of mine contacted me and stated the same problem for a website I built for them ages ago. Now, when other people&amp;#8217;s code breaks, that&amp;#8217;s one thing, but of course I couldn&amp;#8217;t let it lie if it&amp;#8217;s my stuff, legacy or not.&lt;/p&gt;

	&lt;p&gt;Today I got around researching the problem and found this &lt;a href=&quot;http://forums.mozillazine.org/viewtopic.php?p=3561225#p3561225&quot;&gt;all-explaining forum post on mozillazine&lt;/a&gt; . Seems that some people&amp;#8217;s upgrade has corrupted the cookies database, which moved from cookies.txt to cookies.sqlite, with varying and downright weird consequences, like the guy who seemed to be able to log into 10 sites, and the 11th killed them all.&lt;/p&gt;

	&lt;p&gt;Some of the suggested solutions involve safe-mode and digging through add-ons (as some apparently trigger said safe-mode or break other functionality), others claim it has something to do with the way you quit firefox, but mine was as simple as this:&lt;/p&gt;

	&lt;p&gt;&lt;cite&gt;I shut down my browser and deleted both my cookies.txt and cookies.sqllite files, then restarted the browser. Worked like a charm. Apparently the files had gotten corrupted somehow, and session information was not being saved correctly. It took a complete purge to start again from scratch.&lt;/cite&gt;&lt;/p&gt;

	&lt;p&gt;That&amp;#8217;s all, and not a grey hair in sight. &lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>SSI trouble in parent directories</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ssi-trouble-in-parent-directories/index.html"/>
      <updated>2008-08-28T10:32:15+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ssi-trouble-in-parent-directories/ssi-trouble-in-parent-directories</id>
      <content type="html">	&lt;p&gt;Sometimes it helps to read the manual, especially when one makes a really silly mistake.&lt;/p&gt;

	&lt;p&gt;For example today I tried to figure out which permission prevented my SSI based pages to work if the include file was to sit in the parent directory.&lt;/p&gt;

	&lt;p&gt;Of course, when one reads a &lt;a href=&quot;http://russell.dyerhouse.com/cgi-bin/article.cgi?article_id=84&quot;&gt;manual&lt;/a&gt; and looks for &amp;#8220;relative paths&amp;#8221; one will find that there is the &amp;#8220;file&amp;#8221; attribute in the include statement which resolves system paths, but also there is the &amp;#8220;virtual&amp;#8221; attribute which resolves relative paths. DOH!&lt;/p&gt;

	&lt;p&gt;P.S.: Classic example for &amp;#8220;Dealt with a problem many times but always keep forgetting the solution&amp;#8221; ...&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>JS and objects</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/js-and-objects/index.html"/>
      <updated>2008-08-28T10:22:43+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/js-and-objects/js-and-objects</id>
      <content type="html">&lt;p&gt;Just a quick moment trying to explain the different approaches to using objects in Javascript to a fellow co-worker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// Normal object with new keyword
var myClass = function() {
	var privateMethod = function() {
	}

	this.publicFunc = function() {
	}
}

var myObj1 = new myClass();
var myObj2 = new myClass();
var myObj3 = new myClass();


// Singleton with new keyword
var mySingleton = new function() {
	this.foo = function() {}
}
mySingleton.foo();


// Singleton without assignment - YUI style
(function(){
})();

// Object literal
var myObjLiteral = {
	'foo' : function() {},
	'bar' : function() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am sure that I missed out some important ones, but feel free just to put them into the comments.&lt;/p&gt;


</content>
    </entry>

    <entry>
      <title>How to delete files when argument list is to long ...</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/how-to-delete-files-when-argument-list-is-to-long-/index.html"/>
      <updated>2008-08-12T11:42:11+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/how-to-delete-files-when-argument-list-is-to-long-/how-to-delete-files-when-argument-list-is-to-long-</id>
      <content type="html">	&lt;p&gt;I had trouble with deleting files, because a simple&lt;/p&gt;

	&lt;pre&gt;&lt;code&gt;rm -Rf *&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;would fail because the argument list was to long.&lt;br /&gt;
&lt;a href=&quot;http://www.cyberdummy.co.uk&quot;&gt;Tom&lt;/a&gt; , my former co-worker from &lt;a href=&quot;http://www.redwiredesign.com&quot;&gt;Redwire&lt;/a&gt; times, pointed out that I should utilize xargs.&lt;/p&gt;

	&lt;p&gt;A simple &lt;/p&gt;

	&lt;pre&gt;&lt;code&gt;ls | xargs rm -f&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;took quite a while, but did the trick!&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>PHP Deployment With Capistrano</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-deployment-with-capistrano/index.html"/>
      <updated>2008-08-11T08:33:27+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-deployment-with-capistrano/php-deployment-with-capistrano</id>
      <content type="html">	&lt;p&gt;Today I&amp;#8217;d like to share 2 links with you that have helped me quite a bit recently.&lt;br /&gt;
I finally found the time at work to move a couple of further-ran projects from the initial &amp;#8220;building it&amp;#8221; stage to &amp;#8220;maintaining it&amp;#8221;. Using this opportunity I followed &lt;a href=&quot;http://www.simplisticcomplexity.com/2006/08/16/automated-php-deployment-with-capistrano/&quot;&gt;Jon Maddox&amp;#8217; post&lt;/a&gt; about utilizing my installed (and older) version of &lt;a href=&quot;http://www.capify.org/&quot;&gt;Capistrano&lt;/a&gt; to get more control over deploying PHP projects. As most of them are Wordpress installations, this Made By Many post about &lt;a href=&quot;http://www.madebymany.co.uk/using-capistrano-with-php-specifically-wordpress-0087&quot;&gt;Capistrano and Wordpress&lt;/a&gt; was also of good use.&lt;/p&gt;

	&lt;p&gt;The biggest criticism I come across when mentioning this is &amp;#8220;why bother with this when I can use shell scripts&amp;#8221;, referring to scp, ssh, rsync, and all the rest. I find &lt;a href=&quot;http://www.simplisticcomplexity.com/2006/08/16/automated-php-deployment-with-capistrano/#comment-10668&quot;&gt;this is a valid point&lt;/a&gt;, and except for the &amp;#8220;maybe I can&amp;#8217;t be bothered writing a shell script containing all that&amp;#8221; argument, I&amp;#8217;m clueless. Is it simply the collection of all this functionality and presenting it in an apparently easy way? Maybe someone can enlighten me here or over on the other side?&lt;/p&gt;

	&lt;p&gt;For me, I just like to have the good feeling that, after configuring it, I can do my changes locally, test them, check in the changes once I&amp;#8217;m happy, hit &amp;#8220;cap deploy&amp;#8221; and go for lunch/dinner/over to more exciting things in life than uploading files. And if I really screw up (because I secretly make sure it&amp;#8217;s fine live as well, and it&amp;#8217;s not), i can simply roll back. &lt;br /&gt;
With a little scripting magic wrapped into the configuration I can sync databases and files back and forth (yeah, yeah, why not do this in the console to start with?). And, paths amended for a different machine (if necessary), it&amp;#8217;s portable, too. &lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>View variables in Zend Framework Partial Loop</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/view-variables-in-zend-framework-partial-loop/index.html"/>
      <updated>2008-07-30T10:58:50+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/view-variables-in-zend-framework-partial-loop/view-variables-in-zend-framework-partial-loop</id>
      <content type="html">	&lt;p&gt;One of the fun things about Zend Framework is the possibility to extend the Framework classes with extras functionality.&lt;br /&gt;
I got slightly annoyed that in a partialLoop I couldn&amp;#8217;t access the view variables. here&amp;#8217;s how I fixed it.&lt;/p&gt;

	&lt;p&gt;First of all we need to understand that the Helpers get overwritten, if we declare custom ones with the same name.&lt;/p&gt;

	&lt;p&gt;Therefore, if I create a helper class partialLoop and load it via declaring a helper path, it will overwrite the Zend Framework one.&lt;/p&gt;

	&lt;p&gt;In my case I just added this into the init function of the Base Controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public function init() {
	$this-&gt;view-&gt;addHelperPath('/path/', 'Extended_Helper');
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Within the declared path I now have to add a file called PartialLoop.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?php

require_once 'Zend/View/Helper/PartialLoop.php';

class Extended_Helper_PartialLoop extends Zend_View_Helper_PartialLoop {

	public $view;

	public function setView($view) {
		$this-&gt;view = $view;
		$this-&gt;config = Zend_Registry::get('config');
	}

	public function partialLoop($path, $array) {
		return parent::partialLoop($path, $array);
	}


	public function partial($name, $module, $item) {
		$item['view'] = $this-&gt;view;
		$item['config'] = $this-&gt;config;
		return parent::partial($name, $module, $item);
	}
}

&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;And voila, we now can access the view from within a partialLoop.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>JS and CSS minification with YUI</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/js-and-css-minification-with-yui/index.html"/>
      <updated>2008-07-25T10:49:51+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/js-and-css-minification-with-yui/js-and-css-minification-with-yui</id>
      <content type="html">	&lt;p&gt;At the moment I am working on a large website project for &lt;a href=&quot;http://uktv.co.uk&quot;&gt;UKTV&lt;/a&gt;, where for maintainability reasons I keep files separated and pretty verbose.&lt;br /&gt;
Every box and page type would get its own CSS file, and all would be included through one big CSS, which looks somehow like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
@import url('../global/tools.css');
@import url('../global/foo.css');
@import url('../global/bar.css');
@import url('../content/foo.css');
@import url('../content/bar.css');
@import url('../sidebar/foo.css');
@import url('../sidebar/bar.css');
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;The same would go for the JS files, which were broken down into class files and then included one by one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/js/project.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/js/project/foo.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/js/project/bar.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;All together this generated more than different 35 hits, something that inevitably makes the rendering of an HTML page very slow.&lt;/p&gt;

	&lt;p&gt;The solution came to me when my friend Simon from &lt;a href=&quot;http://seventytwo.co.uk/&quot;&gt;Seventytwo&lt;/a&gt; highlighted the &lt;a href=&quot;http://developer.yahoo.com/yui/compressor/&quot;&gt;YUI compression tools&lt;/a&gt; to me, first just as a &lt;a href=&quot;http://bundleforge.com/&quot;&gt;Textmate bundle&lt;/a&gt;, but then he pointed out to me that there is &lt;a href=&quot;http://www.julienlecomte.net/yuicompressor/&quot;&gt;a jar file&lt;/a&gt; for it as well.&lt;/p&gt;

	&lt;p&gt;20 minutes and one little shellscript later I have one CSS files and one JS file, all nicely minified, plus an IE6 and IE7 stylesheet in conditional comments. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cat
./templates/css/global/tools.css
./templates/css/global/layout.css
./templates/css/global/foo.css
./templates/css/global/bar.css
./templates/css/global/flyouts.css
./templates/css/content/foo.css
./templates/css/content/bar.css
./templates/css/sidebar/foo.css
./templates/css/sidebar/bar.css
&gt; ./templates/css/shared_concated.css

java -jar yuicompressor-2.3.5.jar
./templates/css/shared_concated.css &gt;
./templates/css/shared_minified.css

rm ./templates/css/shared_concated.css

cat
./templates/js/project.js
./templates/js/project/foo.js
./templates/js/project/bar.js
&gt; ./templates/js/project_concated.js

java -jar yuicompressor-2.3.5.jar
./templates/js/project_concated.js &gt;
./templates/js/project_minified.js

rm ./templates/js/project_concated.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat, me thinks!&lt;/p&gt;



</content>
    </entry>

    <entry>
      <title>Net neutrality rant</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/net-neutrality-rant/index.html"/>
      <updated>2008-06-19T12:07:24+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/net-neutrality-rant/net-neutrality-rant</id>
      <content type="html">	&lt;p&gt;So I&amp;#8217;m reading the guardian technology section today, and a rant about &lt;a href=&quot;http://www.guardian.co.uk/technology/2008/jun/19/digitalvideo.internet&quot;&gt;how net neutrality seemingly incapacitates the internet&lt;/a&gt; by making it possible for content providers like youtube to eat up the whole bandwidth.&lt;/p&gt;

	&lt;p&gt;Makes me wonder how much the author considered that net neutrality also ensures that the little mans blog site gets the same priority as any other company big wig paid download service?&lt;/p&gt;

	&lt;p&gt;While he&amp;#8217;s calling for more regulation to &amp;#8220;free up the pipes&amp;#8221;, I also wonder  how often he has been annoyed with blocked ports to services like SMTP, to force you using the ISPs SMTP server.&lt;/p&gt;

	&lt;p&gt;And while some ports might indicate a certain type of service, and therefore be blocked, you might have recently put your servers&amp;#8217; ssh access on there.&lt;/p&gt;

	&lt;p&gt;Come on, the most likely scenario here is that you get Youtube and  Ebay with perfect speed, and that the Itunes shop works like a charm, but independent small businesses will have to pay extra to be able to run a web shop, just to fall into the priority band.&lt;br /&gt;
And the next thing you know is that any private website will dribble with 5k per second, you cannot access any port other than 80 and 225, and you&amp;#8217;d better forget about using any open source VOIP software but skype &amp;#8230;&lt;/p&gt;

	&lt;p&gt;... Now that&amp;#8217;s better!&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>XML Serialization and PHP Reflection</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xml-serialization-and-php-reflection/index.html"/>
      <updated>2008-06-18T09:56:05+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xml-serialization-and-php-reflection/xml-serialization-and-php-reflection</id>
      <content type="html">	&lt;p&gt;Browsing the web for a way to serialize PHP objects into XML I came across this &lt;a href=&quot;http://groups.google.com/group/Professional-PHP/browse_thread/thread/2b0623bfc46cc336&quot;&gt;interesting thread&lt;/a&gt;  &lt;/p&gt;

	&lt;p&gt;The most interesting thing to have a look at is the use of the &lt;a href=&quot;http://uk2.php.net/manual/en/language.oop5.reflection.php#language.oop5.reflection.reflectionclass&quot;&gt;Reflection functionality in PHP&lt;/a&gt; , which gives you access to the objects, their methods and members.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>PHP Benchmark</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-benchmark/index.html"/>
      <updated>2008-06-02T12:17:26+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-benchmark/php-benchmark</id>
      <content type="html">	&lt;p&gt;Via &lt;a href=&quot;http://magnetikonline.com/&quot;&gt;Peter Mescalchin&lt;/a&gt; I got hold of this &lt;a href=&quot;http://www.phpbench.com/&quot;&gt;PHP benchmark&lt;/a&gt;.&lt;/p&gt;

	&lt;p&gt;I was particularly surprised that while loops runs o much quicker than foreach and for loops. Also it turns out that one can safely use double quotes if one likes to, without loosing much performance at all. Definitely worth a look.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>likes and don't likes</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/likes-and-dont-likes/index.html"/>
      <updated>2008-05-14T06:30:46+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/likes-and-dont-likes/likes-and-dont-likes</id>
      <content type="html">	&lt;p&gt;Just because I&amp;#8217;m working with things &amp;#8230;&lt;/p&gt;

	&lt;p&gt;I do Like:&lt;/p&gt;
	&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.config.adapters.ini.html&quot;&gt;Zend_Config_Ini&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.layout.html&quot;&gt;Zend_Layout&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.controller.html&quot;&gt;Zend_Controller&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://www.notepad2.com/&quot;&gt;Notepad2&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/editor/&quot;&gt;YUI Editor&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://www.en.wampserver.com/&quot;&gt;WAMP&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;

	&lt;p&gt;I don&amp;#8217;t like:&lt;/p&gt;
	&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.twinhelix.com/css/iepngfix/&quot;&gt;.htc files&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt; to render content, instead of having real markup&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Duplicate_code&quot;&gt;Duplicate Code&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/God_object&quot;&gt;God objects&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Mixing &lt;a href=&quot;http://en.wikipedia.org/wiki/Hungarian_notation&quot;&gt;Hungarian&lt;/a&gt; with other coding notations&lt;/li&gt;
	&lt;/ul&gt;



 </content>
    </entry>

    <entry>
      <title>Javascript libraries</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/javascript-libraries/index.html"/>
      <updated>2008-04-25T03:06:58+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/javascript-libraries/javascript-libraries</id>
      <content type="html">	&lt;p&gt;If you came across some of my comments in other blogs about this subject, you probably know already that I&amp;#8217;m a moo-man.&lt;br /&gt;
&lt;a href=&quot;http://moofx.mad4milk.net/&quot;&gt;moo.fx&lt;/a&gt;, the addons moo.dom and moo.ajax, I found them really easy to use. &lt;br /&gt;
They have been derived from the early releases of &lt;a href=&quot;http://prototype.conio.net/&quot;&gt;prototype&lt;/a&gt; (which I initially used as well), and the mentioned libraries come with a lite version of that, stripped to the bear essentials. Now &lt;a href=&quot;http://mad4milk.net/&quot;&gt;mad4milk&lt;/a&gt; has released their &lt;a href=&quot;http://mootools.net/&quot;&gt;mootools&lt;/a&gt;, basically a rewrite of the existing libraries, and a nice downloads page where you can mix and match modules for your needs, compiled into one handy file.&lt;br /&gt;
If you want to check or extend the code, download an unpacked version for your perusal, only to use a packed version when going live. So many things can be done with such little files. Crazy. &lt;br /&gt;
It also incorporates a version of &lt;a href=&quot;http://dean.edwards.name/weblog/2006/06/again/&quot;&gt;Dean Edwards&amp;#8217; DOMContentLoaded&lt;/a&gt;.&lt;/p&gt;

	&lt;p&gt;Mike&amp;#8217;s library of choice is &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, which itself stems from prototype (and it&amp;#8217;s &lt;a href=&quot;http://www.eweek.com/article2/0,1895,2010602,00.asp&quot;&gt;partly based&lt;/a&gt; on &lt;a href=&quot;http://www.mad4milk.net/entry/links-of-interest&quot;&gt;moo.fx&lt;/a&gt;, too). It came up with the same concept of keeping the filesize low, and it&amp;#8217;s selling point must be the &lt;a href=&quot;http://www.visualjquery.com/&quot;&gt;excellent documentation&lt;/a&gt;. It possibly used to be the pick and mix download panel, but that&amp;#8217;s &amp;#8220;borrowed&amp;#8221; back and improved by mootools now.&lt;br /&gt;
They have in turn released the first issue of &lt;a href=&quot;http://www.visualjquery.com/magazine/&quot;&gt;Visual jQuery magazine&lt;/a&gt; to help their and their developer community&amp;#8217;s cause.&lt;br /&gt;
But the biggest present for their own first birthday must be the release of &lt;a href=&quot;http://jquery.com/blog/2007/01/14/jquery-birthday-11-new-site-new-docs/&quot;&gt;jQuery 1.1&lt;/a&gt; a couple of days ago. The improvements seem massive, and I&amp;#8217;m very tempted to switch&amp;#8230; &lt;/p&gt;

	&lt;p&gt;Both of these come from prototype, which I got to know around the same time as the &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo Toolkit&lt;/a&gt;. Prototype is very well integrated into Ruby on Rails, and liked by many in combination with the &lt;a href=&quot;http://www.ujs4rails.com/&quot;&gt;UJS Rails plugin&lt;/a&gt;. Sadly, both prototype and dojo are, compared to the aforementioned libraries, quite heavy, and I don&amp;#8217;t need their particular features in my projects. &lt;/p&gt;

	&lt;p&gt;Content with Style&amp;#8217;s own Pascal uses mainly moo.ajax and &lt;a href=&quot;http://bennolan.com/behaviour/&quot;&gt;Behaviour&lt;/a&gt; to easily register, well, behaviours on dom elements. He extends those with custom written object literals in order to ensure separated scopes.&lt;br /&gt;
All of us tend to pick and mix for our needs, extending where necessary, always with an eye on filesize.&lt;/p&gt;

	&lt;p&gt;Of course there&amp;#8217;s &lt;a href=&quot;http://edevil.wordpress.com/2005/11/14/javascript-libraries-roundup/&quot;&gt;a million more javascript libraries&lt;/a&gt;, and a bazillion ways to use them. That leads me to the question: What do you use? Is it in commercial projects, and where do you see the importance of a filesize/used code ratio? Have you abandoned other frameworks because you found something more tailored to your needs?&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>MVC explanations - I love mailing lists</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/mvc-explanations---i-love-mailing-lists/index.html"/>
      <updated>2007-12-21T06:07:22+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/mvc-explanations---i-love-mailing-lists/mvc-explanations---i-love-mailing-lists</id>
      <content type="html">	&lt;p&gt;I came across this &lt;a href=&quot;http://mail.python.org/pipermail/python-list/2006-January/360901.html&quot;&gt;very elaborate explanation of MVC&lt;/a&gt; in a python mailing list.&lt;br /&gt;
Just want to take this as an occasion to say thank you to all people that take time to explain things in mailing lists.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Hi guys, what's happening with CwS?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/hi-guys-whats-happening-with-cws/index.html"/>
      <updated>2007-11-20T09:03:26+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/hi-guys-whats-happening-with-cws/hi-guys-whats-happening-with-cws</id>
      <content type="html">	&lt;p&gt;Good question! We were about to ask ourselves the same question.&lt;br /&gt;
Even though Matthias came up with a &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/161/figure-microformats/&quot;&gt;new article&lt;/a&gt; today, we cannot deny that not much that has happened here in the past couple of months. We&amp;#8217;re basically facing some descisions wether to leave CwS to die quietly, or to keep it alive &amp;#8230; &lt;/p&gt;

	&lt;p&gt;... and the bad news is: We&amp;#8217;re all awfully busy at the moment. In fact we&amp;#8217;re so busy, that with the way the site is set up currently, we&amp;#8217;re sure we cannot make it a more lively place, as none of us really has the time to write full fledged articles. And since we didn&amp;#8217;t even get around to set up a pagination yet, the Blog hasn&amp;#8217;t really got the capacity to grow much more, either &amp;#8230;&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;BUT:&lt;/strong&gt;&lt;/p&gt;

	&lt;p&gt;We don&amp;#8217;t want CwS to die like this. We&amp;#8217;ve made up our minds, and we decided to invest some serious time into a brand new CwS, wich will happen somewhen in the beginning of 2008. We&amp;#8217;re going to have a new design, we&amp;#8217;ll migrate to a new platform, we&amp;#8217;re going to focus on the blog more, with many more authors, still have the occasional article, we&amp;#8217;re going to introduce a new categorizations, and we&amp;#8217;re pondering what other features we should bring to you, dear reader.&lt;/p&gt;

	&lt;p&gt;So why don&amp;#8217;t you let us know? Any suggestions/criticism/feature requests are really appreciated, so please don&amp;#8217;t hesitate.&lt;br /&gt;
We&amp;#8217;re looking forward to hear from you.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Figure microformats</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/figure-microformats/index.html"/>
      <updated>2007-11-20T08:28:44+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/figure-microformats/figure-microformats</id>
      <content type="html">	&lt;p&gt;Recently I&amp;#8217;ve built a &lt;a href=&quot;http://www.iwm.org.uk/myboyjack&quot;&gt;very small and compact project&lt;/a&gt;, an 8-page static website actually (first time I&amp;#8217;ve built anything static in about 7 years!), and I took the opportunity to get a bit deeper into the microformat madness that seems to be so en vogue since the last year or so.&lt;/p&gt;

	&lt;h2&gt;hCard yay, figure nay?&lt;/h2&gt;

	&lt;p&gt;While the whole hCard/vCard thing for contacts is a very nice and half-decent working solution, the &lt;a href=&quot;http://microformats.org/wiki/figure-examples&quot;&gt;discussion for image/figure markup&lt;/a&gt; is just confusing.&lt;/p&gt;

	&lt;p&gt;The issues are that some solutions are worrying mostly about positioning, others about specific output formats, &lt;a href=&quot;http://www.pearsonified.com/2007/06/how-to-format-images-for-feed-readers.php&quot;&gt;for example for feed readers&lt;/a&gt; (&lt;a href=&quot;http://www.simplebits.com/notebook/2005/07/10/figures.html&quot;&gt;also here&lt;/a&gt;).&lt;/p&gt;

	&lt;p&gt;And then of course there&amp;#8217;s &lt;a href=&quot;http://edward.oconnor.cx/2007/04/marking-up-figures&quot;&gt;the solution by Edward O&amp;#8217;Connor&lt;/a&gt; that wants to follow the html 5 draft as closely as possible, which is the reasoning I could follow the easiest, because it&amp;#8217;s also, in my eyes, the one closest to the concept that was used for the hCard.&lt;/p&gt;

	&lt;h2&gt;Break it, fix it&lt;/h2&gt;

	&lt;p&gt;I started using a variation of it, and the first thing that annoyed me was that I did want to mark-up caption and credit individually, but I needed to position it quite freely as a block. The &lt;a href=&quot;http://microformats.org/wiki/figure-examples#Revenue_Watch_Institute_.28website_forthcoming.29&quot;&gt;suggestion on the microformats wiki&lt;/a&gt; would allow for individual positioning, the &lt;a href=&quot;http://www.alistapart.com/articles/figurehandler&quot;&gt;solution at A List Apart&lt;/a&gt; seemed a bit over the top, so I adjusted the original idea as follows:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;div class=&quot;figure&quot;&amp;gt;
  &amp;lt;img src=&quot;look_up_dere__small.jpg&quot; width=&quot;400&quot; height=&quot;602&quot; alt=&quot;Matthias and lots of blue sky&quot; /&amp;gt;
  &amp;lt;div class=&quot;legend&quot;&amp;gt;
&amp;lt;p class=&quot;caption&quot;&amp;gt;
        Matthias and lots of blue sky
 &amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;credit&quot;&amp;gt;
  &amp;lt;abbr class=&quot;type&quot; title=&quot;Photograph&quot;&amp;gt;Photo&amp;lt;/abbr&amp;gt;
  &amp;amp;copy; &amp;lt;cite&amp;gt;Matthias Willerich&amp;lt;/cite&amp;gt;
&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;This follows the html 5 draft as per suggestion on one hand, even more so because &amp;#8220;legend&amp;#8221; is used, on the other it allows me to specify caption and copyright individually, but I have the freedom to style and position it anywhere together or individually.&lt;/p&gt;

	&lt;p&gt;It took me a while to understand what Edward meant by &amp;#8220;This has block-level elements with inline-level siblings, which is gross&amp;#8221;, until I read Anne van Kesteren&amp;#8217;s opinion about &lt;a href=&quot;http://annevankesteren.nl/2005/05/content-models&quot;&gt;Markup content models&lt;/a&gt;.&lt;/p&gt;

	&lt;p&gt;I would&amp;#8217;ve followed what he&amp;#8217;s saying, but at that point my project was already out the door. Nevermind, here&amp;#8217;s a suggested amendment:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;div class=&quot;figure&quot;&amp;gt;
  &amp;lt;p class=&quot;image&quot;&amp;gt;&amp;lt;img src=&quot;look_up_dere__small.jpg&quot; width=&quot;400&quot; height=&quot;602&quot; alt=&quot;Matthias and lots of blue sky&quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;div class=&quot;legend&quot;&amp;gt;
&amp;lt;p class=&quot;caption&quot;&amp;gt;
        Matthias and lots of blue sky
 &amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;credit&quot;&amp;gt;
  &amp;lt;abbr class=&quot;type&quot; title=&quot;Photograph&quot;&amp;gt;Photo&amp;lt;/abbr&amp;gt;
  &amp;amp;copy; &amp;lt;cite&amp;gt;Matthias Willerich&amp;lt;/cite&amp;gt;
&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

	&lt;h2&gt;what&amp;#8217;s the benefit?&lt;/h2&gt;

	&lt;p&gt;With all this highbrow talk I don&amp;#8217;t want to miss the point that I&amp;#8217;ll never be in the situation again where I&amp;#8217;m creating a template with text information associated to an image and I just don&amp;#8217;t know how to do it &lt;em&gt;right&lt;/em&gt;. This had been bugging me forever! With all the other concepts I just default to when I see a screen design the first time, this one fits right in. Here&amp;#8217;s a &lt;a href=&quot;http://www.willerich.com/demo/figure_microformats/&quot;&gt;little example page&lt;/a&gt; to have a look at how flexible this can be used.&lt;/p&gt;

	&lt;h2&gt;Back to the highbrow future&lt;/h2&gt;

	&lt;p&gt;Still, it left me wondering if I&amp;#8217;m breaking a structure that&amp;#8217;s used in other places; but I couldn&amp;#8217;t find any (if you disagree, now is the time). If there was nothing using the figure markup, hell, why think about it in the first place, and not just throw together any old image and paragraph? Now, I was at that point with the hCards a while ago, but since then an hCard extension for firefox has come along, and with the current version it&amp;#8217;s actually reasonably useful. I also agree very much with &lt;a href=&quot;http://www.simplebits.com/notebook/2005/07/10/figures.html&quot;&gt;Dan Cederholms feedreader train of thought&lt;/a&gt; about how it &lt;em&gt;could&lt;/em&gt; be used. While his article is already 2 years old, and not much technical seems to have happened in between, it doesn&amp;#8217;t mean that its theoretical meaning isn&amp;#8217;t picked up and formatted or used otherwise in the future.&lt;/p&gt;

	&lt;h2&gt;Homework&lt;/h2&gt;

	&lt;p&gt;Although they&amp;#8217;re spread out all over the article, here&amp;#8217;s the reading list that helped me with my conclusion. Have fun reading and let me know what you think.&lt;/p&gt;

	&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/figure-examples&quot;&gt;Microformats figure examples&lt;/a&gt;, find more links I&amp;#8217;ve also mentioned here &lt;a href=&quot;http://microformats.org/wiki/figure-examples#Further_discussion&quot;&gt;at the bottom of the article&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Edward O&amp;#8217;Connor, &lt;a href=&quot;http://edward.oconnor.cx/2007/04/marking-up-figures&quot;&gt;Marking up figures&lt;/a&gt; and &lt;a href=&quot;http://edward.oconnor.cx/2007/08/figure-markup-redux&quot;&gt;Figure markup redux&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;Anne van Kesteren, &lt;a href=&quot;http://annevankesteren.nl/2005/05/content-models&quot;&gt;Markup content models&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;SimpleBits, &lt;a href=&quot;http://www.simplebits.com/notebook/2005/07/10/figures.html&quot;&gt;When Floated Figures Attack!&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;


 </content>
    </entry>

    <entry>
      <title>Meebo firefox extension</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/meebo-firefox-extension/index.html"/>
      <updated>2007-10-24T05:27:10+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/meebo-firefox-extension/meebo-firefox-extension</id>
      <content type="html">	&lt;p&gt;Since I&amp;#8217;m a great fan of &lt;a href=&quot;http://www.meebo.com&quot;&gt;meebo&lt;/a&gt; and consider it one of the best examples for an AJAX application, I am pretty thrilled to see the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/5700&quot;&gt;meebo Firefox extension&lt;/a&gt; .&lt;/p&gt;

	&lt;p&gt;It adds popup alerts, i.e. for incoming messages, and a neat sidebar that shows the contact list. Well done, meebo!&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Security: Even the simple stuff is hard it seems!</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/security-even-the-simple-stuff-is-hard-it-seems/index.html"/>
      <updated>2007-08-14T08:23:59+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/security-even-the-simple-stuff-is-hard-it-seems/security-even-the-simple-stuff-is-hard-it-seems</id>
      <content type="html">	&lt;p&gt;So I am reading about &lt;a href=&quot;http://blog.washingtonpost.com/securityfix/2007/08/ftp_files_expose_web_site_cred.html&quot;&gt;the bug in IE that puts your FTP details into the comments plaintext&lt;/a&gt; ...&lt;/p&gt;

	&lt;p&gt;And I must say, it makes me chuckle. A while ago one of my friends sent a bulk mail to all of his contacts, containing an FTP link that he dragged from the address bar of IE into the mail in outlook. Needless to say that this contained username, password and host. &lt;/p&gt;

	&lt;p&gt;A comment about maybe changing the password or so was shrugged off, and when I demonstrated how fast the index.html was changed into a page stating that one should think about security, he was asking me to change it back &amp;#8230; but still couldn&amp;#8217;t be bothered to change the password.&lt;/p&gt;

	&lt;p&gt;What I want to say with this little story is, that even just the very concept of basic security measures doesn&amp;#8217;t really touch the average folk. They are completely oblivious of the world around them being able to exploit private data or damaging their business.&lt;/p&gt;

	&lt;p&gt;Even worse, that, on various occasions when asking for what kind of authentication I should implement and pointing out that the chosen one is really bad, I have been told off for &amp;#8220;overcomplicating things&amp;#8221; and there were ovious security issues in the final application that I wasn&amp;#8217;t allowed to fix, because the client was not being expected to be able to remember a different password to his own username.&lt;/p&gt;

	&lt;p&gt;I think it sometimes is a matter of responsibility for developers to protect people from themselves, making username/password combinations like myname/myname impossible, etc.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Unitless line height in CSS</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/unitless-line-height-in-css/index.html"/>
      <updated>2007-07-09T05:11:16+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/unitless-line-height-in-css/unitless-line-height-in-css</id>
      <content type="html">	&lt;p&gt;For a couple of years now I keep stressing the fact that line-height works best when you don&amp;#8217;t provide a unit. And I am not saying this for no reason.&lt;/p&gt;

	&lt;p&gt;As &lt;a href=&quot;http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/&quot;&gt;neatly explained by Eric Meyer&lt;/a&gt; the unitless line height doesn&amp;#8217;t enforce it&amp;#8217;s computed size onto the inheriting element.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>PHP &#38; Mysql socket error</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-mysql-socket-error/index.html"/>
      <updated>2007-07-07T19:58:36+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-mysql-socket-error/php-mysql-socket-error</id>
      <content type="html">	&lt;p&gt;I keep coming across this whenever I set up MySQL and PHP on a new mac: mysql_connect() fails throwing an error &amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; mysql_connect() [function.mysql-connect]: Can't connect to local
MySQL server through socket '/var/mysql/mysql.sock'&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;And everytime I forget to remember what the solution was:&lt;br /&gt;
This can be fixed by changing settings in /etc/php.ini:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo cp /etc/php.ini.default /etc/php.ini
sudo vim /etc/php.ini
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Then set the mysql default socket to the temp folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mysql.default_socket = /tmp/mysql.sock
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Quite annoying, but then again: Hey, I&amp;#8217;ve got a new Mac!!!&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Sorting by date with XSL</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/sorting-by-date-with-xsl/index.html"/>
      <updated>2007-07-06T04:48:16+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/sorting-by-date-with-xsl/sorting-by-date-with-xsl</id>
      <content type="html">	&lt;p&gt;XSLT architect &lt;a href=&quot;http://migueldemelo.blogspot.com/&quot;&gt;Miguel de Melo&lt;/a&gt; gives an insight into the sorting capabilities of XSL in his article &lt;a href=&quot;http://migueldemelo.blogspot.com/2007/06/sort-by-date-greater-than-other-date.html&quot;&gt;Sort by date greater than other date&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;The other blog entries are well worth a look, as they contain helpful examples of real-life XSL code. His blog is meant to be capturing the most interesting output of his replies to various mailing lists around he replies to.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Firebug can make life easier</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/firebug-can-make-life-easier/index.html"/>
      <updated>2007-06-28T11:06:51+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/firebug-can-make-life-easier/firebug-can-make-life-easier</id>
      <content type="html">	&lt;p&gt;Today I was pointed to a couple of handy functionalities in the &lt;a href=&quot;http://www.getfirebug.com/&quot;&gt;Firebug plugin&lt;/a&gt; by &lt;a href=&quot;http://www.magnetikonline.com&quot;&gt;Peter Mescalchin&lt;/a&gt;, who&amp;#8217;s one of the  UI developers I am currently working with.&lt;/p&gt;

	&lt;p&gt;The highlight here is the &lt;code&gt;console.log()&lt;/code&gt; function for debugging. This first of all gets rid of all those alerts that pause the application till we click the button of the alert box.&lt;/p&gt;

	&lt;p&gt;When we pass a dom node to &lt;code&gt;console.log()&lt;/code&gt; instead of a string, we&amp;#8217;ll have the dom node in the console, that on rollover highlights it&amp;#8217;s position on the page.&lt;/p&gt;

	&lt;p&gt;Amazing is that this is even possible with an array of nodes, i.e. out of &lt;code&gt;getElementsByTagName()&lt;/code&gt; or something similar.&lt;br /&gt;
The output will be a nice little list of nodes that on rollover can be identified in the browser window.&lt;/p&gt;

	&lt;p&gt;Changing &lt;code&gt;console.log()&lt;/code&gt; to &lt;code&gt;console.dir()&lt;/code&gt; gives an even more detailed view on the object, with properties and so on, vaguely similar to a print_r or vardump in PHP, just that the console lets you collapse the single nodes etc.&lt;/p&gt;

	&lt;p&gt;Another great feature is the possibility to set breakpoints and debug your javascript application line by line.&lt;/p&gt;

	&lt;p&gt;For a deeper insight check out the &lt;a href=&quot;http://yuiblog.com/blog/2007/01/26/video-hewitt-firebug/&quot;&gt;video featuring Joe Hewitt&lt;/a&gt; or read the &lt;a href=&quot;http://www.getfirebug.com/console.html&quot;&gt;reference for the firebug console API&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;Thanks for the tip Pete!&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>How long have I been waiting for this?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/how-long-have-i-been-waiting-for-this/index.html"/>
      <updated>2007-06-05T17:48:27+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/how-long-have-i-been-waiting-for-this/how-long-have-i-been-waiting-for-this</id>
      <content type="html">	&lt;p&gt;It must be since I heard the word entity first. Check otu this &lt;a href=&quot;http://leftlogic.com/lounge/articles/entity-lookup/&quot;&gt;brilliant entity reference&lt;/a&gt;. Via &lt;a href=&quot;http://www.ajaxian.com&quot;&gt;ajaxian&lt;/a&gt;. &lt;/p&gt;

	&lt;p&gt;It&amp;#8217;s AJAX powered, it&amp;#8217;s slick and it brings up what you need. Definitely one of my favorites &amp;#8230;&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>DOs and DONTs in XSLT</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/dos-and-donts-in-xslt/index.html"/>
      <updated>2007-06-04T11:43:01+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/dos-and-donts-in-xslt/dos-and-donts-in-xslt</id>
      <content type="html">	&lt;p&gt;A nice little roundup of how to efficiently use XSLT can be found &lt;a href=&quot;http://www2.sims.berkeley.edu/academics/courses/is290-8/s04/lectures/5/dragons/allslides.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;I came accross this link when reading about &lt;a href=&quot;http://copia.ogbuji.net/blog/2005-06-10/Push_vs_pu&quot;&gt;Push vs Pull XSL&lt;/a&gt; , something thatw ill change my approach on XSL quite a lot. Reading up on modes, push vs pull and so on basically gave me one of these moments that you had when you realized that tables and the way you were using them where not really appropriate in HTML.&lt;/p&gt;

	&lt;p&gt;Quite a &lt;a href=&quot;http://www.biglist.com/lists/xsl-list/archives/200102/msg01119.html&quot;&gt;drastic quote&lt;/a&gt;, but true if I consider how I did my XSL code until now, I can only say he&amp;#8217;s right:&lt;/p&gt;

	 &lt;blockquote&gt;&lt;p&gt;
Whether your favorite conceptual module is pipes and filters, tuple spaces, or just good ol&amp;#8217; lambdas, a fundamental understanding of push techniques is essential if you want to ever do any serious development in XSLT. New arrivals to this field take short-cuts only to get lost later. From a purely practical point of view, I think it&amp;#8217;s important to teach apply-templates, modes and friends well before for-each, and bitchin&amp;#8217; value-of tricks.
&lt;/p&gt;&lt;/blockquote&gt;


 </content>
    </entry>

    <entry>
      <title>Hip hip, hooray</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/hip-hip-hooray/index.html"/>
      <updated>2007-06-04T09:22:38+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/hip-hip-hooray/hip-hip-hooray</id>
      <content type="html">	&lt;p&gt;We did it. After more than one year we have a new article online.&lt;/p&gt;

	&lt;p&gt;I wrote &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/151/templates-from-babel/&quot;&gt;Templates from Babel?&lt;/a&gt; after being involved in the development of an XSL driven CMS for &lt;a href=&quot;http://www.redwiredesign.com&quot;&gt;Redwire&lt;/a&gt; and then developing two small projects for &lt;a href=&quot;http://www.sennep.com&quot;&gt;Sennep&lt;/a&gt; using the cakePHP framework.&lt;/p&gt;

	&lt;p&gt;It is meant as a careful  critical remark rather than anything else, and any comments would on the article are most welcome.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Templates from Babel?</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/templates-from-babel/index.html"/>
      <updated>2007-06-04T09:16:11+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/templates-from-babel/templates-from-babel</id>
      <content type="html">&lt;h2&gt;MVC frameworks are in!&lt;/h2&gt;

	&lt;p&gt;With the advent of the &lt;a href=&quot;http://www.google.co.uk/search?hl=en&amp;amp;client=firefox-a&amp;amp;rls=org.mozilla:en-GB:official&amp;amp;hs=YPP&amp;amp;sa=X&amp;amp;oi=spell&amp;amp;resnum=0&amp;amp;ct=result&amp;amp;cd=1&amp;amp;q=Ruby+on+Rails+hype&amp;amp;spell=1&quot;&gt;MVC framework hype&lt;/a&gt; and all its &lt;a href=&quot;http://forevergeek.com/programming/ruby_on_rails_not_so_productive.php&quot;&gt;sceptical voices&lt;/a&gt; and &lt;a href=&quot;http://www.youtube.com/results?search_query=ruby+on+rails&amp;amp;search=Search&quot;&gt;fan videos&lt;/a&gt; side-effects we now see the MVC framework becoming more and more popular to quickly knock out applications. Application scaffolding and various out-of-the-box functions seem to be able to improve development drastically.&lt;/p&gt;

	&lt;p&gt;I have been using &lt;a href=&quot;http://www.cakephp.org/&quot;&gt;cakePHP&lt;/a&gt; recently on 2 professional projects and it definitely has some great advantages, speeding up my development drastically. But some stuff made me feel a bit puzzled, if not disappointed, and that’s the motivation for this article.&lt;/p&gt;

	&lt;h2&gt;Personal observations&lt;/h2&gt;

	&lt;p&gt;First of all, there was a bit of a lost control over the output stream. Views get rendered through an application lifecycle and a flush, for example, just didn’t have the effect that I expected.&lt;/p&gt;

	&lt;p&gt;Second, I felt that the SQL performance of the database abstraction models just wasn’t that great. I mean, let’s think about this: We do an explain on the table, then we get all the stuff back, then we return the result and use it for rendering. And if there’s a relationship between them, then you have selects for every row to join the additional data in. Doesn’t really cut the mustard, does it?&lt;/p&gt;

	&lt;p&gt;But what really struck me bad, and this is what I am going to write about in this article, was the views and how the rendering gets done.&lt;/p&gt;

	&lt;h2&gt;But first, how do these frameworks work?&lt;/h2&gt;

	&lt;p&gt;MVC frameworks usually break up the application into database abstraction (model), business logic (controller) and output rendering (view). This, in most cases, is done with a strict naming convention that has been put in place to make changes easier and the development process faster. To find out more you can read the &lt;a href=&quot;http://en.wikipedia.org/wiki/Model-view-controller&quot;&gt;Wikipedia article&lt;/a&gt; on this subject or &lt;a href=&quot;http://justfuckinggoogleit.com/?q=mvc&quot;&gt;just google for more&lt;/a&gt;&lt;/p&gt;

	&lt;h2&gt;Why Layer Separation?&lt;/h2&gt;

	&lt;p&gt;So why did people come up with layer separation and what do they usually think it is good for?&lt;/p&gt;

	&lt;ul&gt;


	&lt;li&gt;Each layer can be maintained without changes affecting the other parts of the application layers&lt;/li&gt;
		&lt;li&gt;Separate testing of each layer is possible, i.e. through Unit tests&lt;/li&gt;
		&lt;li&gt;It is possible to swap a layer for something different, i.e. MySQL against PostgreSQL&lt;/li&gt;
		&lt;li&gt;It often is easier to find the individual files when they need to be changed (Ruby on Rails calls this “Convention over configuration”)&lt;/li&gt;
	&lt;/ul&gt;

	&lt;h2&gt;A look into how we are rendering the view layer&lt;/h2&gt;

	&lt;h3&gt;We look around …&lt;/h3&gt;

	&lt;p&gt;Starting my look around with cakePHP, I found that the views are embedding inline PHP that is able to call any framework method or custom PHP script. And that’s a lot. Have a look into the &lt;a href=&quot;http://cakephp.org/files/cakesheet.pdf&quot;&gt;cakePHP cheat sheet&lt;/a&gt; and you’ll see what I mean.&lt;/p&gt;

	&lt;p&gt;Researching other frameworks I found that the same approach goes for most of them. Let’s have a look at a Ruby on Rails example, found on &lt;a href=&quot;http://www.onlamp.com/pub/a/onlamp/2007/01/05/revisiting-ruby-on-rails-revisited-2.html&quot;&gt;ONLamp.com&lt;/a&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;%= select(&quot;recipe&quot;, &quot;category_id&quot;, Category.find(:all).collect
{|c| [c.name, c.id] }) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;The same goes for &lt;a href=&quot;http://www.djangoproject.com/documentation/templates/&quot;&gt;Django&lt;/a&gt;, a python based framework, this time using curly brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
{% block content %}
&amp;lt;h1&amp;gt;{{ section.title }}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;Discussing this amongst the CwS writers and other developers reveals that most frameworks offer some kind of mechanism to push data to the template from the controller so that direct method calls can be avoided. Examples would be the &lt;a href=&quot;http://rails.rubyonrails.com/classes/ActionView/Partials.html&quot;&gt;Partials in RoR&lt;/a&gt; or the $controller-&amp;gt;set() method in cakePHP.&lt;/p&gt;

	&lt;p&gt;Still, those mechanisms are language and framework specific.&lt;/p&gt;

	&lt;h3&gt;... and find a lot&lt;/h3&gt;

	&lt;p&gt;So the situation we’re facing is that every individual framework has an different way of rendering the view templates.&lt;/p&gt;

	&lt;p&gt;
Most solutions either incorporate the scripting language directly (i.e. cakePHP using inline PHP calls), are framework/CMS specific (i.e. TypoScript) or non-standard (i.e. Smarty).&lt;/p&gt;

	&lt;p&gt;Just the evaluation of these is already a pain, even when we restrict ourselves to a somehow narrowed down field of research, i.e. “MVC based frameworks in PHP”. &lt;/p&gt;

	&lt;h3&gt;We want power …&lt;/h3&gt;

	&lt;p&gt;Having script languages available makes template rendering extremely powerful. And there are good reasons for why we find those powerful mechanisms in the view rendering process:

To introduce script calls into the template rendering itself usually happens because there is a need for more than just straight output, but somehow more complex processing like conditions, loops, includes or sorting.&lt;/p&gt;

	&lt;h3&gt;... but get confusion?&lt;/h3&gt;

	&lt;p&gt;As we could see earlier, when we looked into different frameworks, we often have function calls directly from the view itself. Sure, it is a powerful mechanism to render templates, but is it a really clean approach?&lt;/p&gt;

	&lt;p&gt;One of the most common &lt;a href=&quot;http://www.43things.com/entries/view/1487677&quot;&gt;arguments against using PHP&lt;/a&gt; is that its leading to &lt;a href=&quot;http://en.wikipedia.org/wiki/Spaghetti_code&quot;&gt;spaghetti code&lt;/a&gt; . Most people that bash PHP pull out the “it’s just HTML with messy script tags” card first thing, and in my opinion they are right to say that this leads to an unmaintainable state.&lt;/p&gt;

	&lt;p&gt;Introducing inline code into the view rendering can cancel out the benefits of layer separation. If, for example, during an update process, parameter counts or method names get changed, we have two revise the views as well, otherwise the view could lead to a script error.&lt;/p&gt;

	&lt;p&gt;Even more drastic would be a port to another language. If we use a native scripting language like inline PHP or inline Ruby, we basically have to bin the whole application and do a complete rewrite. The view will not be reusable at all.&lt;/p&gt;

	&lt;h3&gt;There are other ways. &lt;/h3&gt;

	&lt;p&gt;&lt;a href=&quot;http://onsmalltalk.com/programming/smalltalk/rails-vs-seaside/&quot;&gt;Seaside&lt;/a&gt; for example, a Smalltalk based Framework that follows a very different paradigm, doesn’t contain any templates, but renders markup through methods only. This definitely seems drastic to most people, so it does for me, but I have to admit that it is a very clean approach. &lt;/p&gt;

	&lt;h3&gt;Are standards an alternative?&lt;/h3&gt;

	&lt;p&gt;Talking standards there are only a couple of techniques that spring to mind that offer interchangeable and platform-independent functionality… These being &lt;a href=&quot;http://www.w3.org/TR/xslt&quot;&gt;XSLT&lt;/a&gt; and &lt;a href=&quot;http://www.xml.com/pub/a/2002/03/20/xsl-fo.html&quot;&gt;XSL-FO&lt;/a&gt;.&lt;/p&gt;

	&lt;p&gt;XSL Transformations offer the power to do processing of any complexity if needed. XSLT parsers are available for most platforms out there, including PHP, ASP, ASP.NET, Python and many more.&lt;/p&gt;

	&lt;h2&gt;So what do I think?&lt;/h2&gt;

	&lt;p&gt;What I don’t really understand is why, after going to the trouble of creating system where model, view and controller are nicely separated, one would come up with a mixture of controller functions and markup in the view, that renders all the valid points above obsolete. &lt;/p&gt;

	&lt;p&gt;I am not sure if this is a misconception on my side when I digested the term “Layer separation”, but embedding inline PHP or script calls to controller methods in my eyes is a bit similar to putting inline styles into XHTML pages. They become less maintainable.&lt;/p&gt;

	&lt;p&gt;As mentioned above, we have the W3C standards that offer all the power we need for more intelligent template rendering. XSLT cuts out the learning curve for another proprietary template language, it’s powerful and it’s cross platform. Yet I see hardly any serious CMS or Frameworks embracing those official W3C standards available outside of the enterprise sector.&lt;/p&gt;

	&lt;p&gt;The only XSL based free blogging system I currently know about is &lt;a href=&quot;http://21degrees.com.au/products/symphony/&quot;&gt;Symphony&lt;/a&gt; but there might be others.&lt;/p&gt;

	&lt;h3&gt;Where is the web going?&lt;/h3&gt;

	&lt;p&gt;I recently ask myself this question more often than usual. Whereas a couple of years ago the web seemed to be aiming for better standards, with XHTML and XML/XSLT being the way out of the mess, the outlook nowadays seems much more clustered, diverse and maybe even confusing.&lt;/p&gt;

	&lt;p&gt;The current focus seems to be rapid development and AJAX integration, the new buzz word is Web 2.0, coming along with whole new variety of Frameworks, Libraries and Communities that bring new life to the web community. All this is very good. &lt;/p&gt;

	&lt;p&gt;But I think that in a bigger question we have to ask ourselves is:

Why forget the old merits? Sure, frameworks and libraries can help to cut down development time, but can they cut out knowledge of the core techniques?&lt;/p&gt;

	&lt;p&gt;And yes, a big variety of techniques to choose from is great. Yet, is this the reason to disregard well defined standards and end up with a babble of languages and approaches, all adding to the initial learning curve?&lt;/p&gt;

	&lt;p&gt;If we go for a certain framework and technique now, but later the popular paradigm changes into something else, will we have to abandon most of what we’re using… or can we carry some standardised parts over to the new platform?&lt;/p&gt;

	&lt;p&gt;In any case, what we work with is down to each individual developer and the requirements of the individual project.&lt;/p&gt;

	&lt;p&gt;I hope I have highlighted some valid points in this article and am looking forward to your feedback.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Unit Tests in JavaScript</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/unit-tests-in-javascript/index.html"/>
      <updated>2007-05-31T17:52:32+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/unit-tests-in-javascript/unit-tests-in-javascript</id>
      <content type="html">	&lt;p&gt;I don&amp;#8217;t know how many of you guys out there are seriously testing their javascript applications, and how you do approach tesing them.&lt;br /&gt;
I, until now, have been doing the good old step by step alert thing &amp;#8230;&lt;/p&gt;

	&lt;p&gt;But my recent reading and the changes in my PHP development, where I&amp;#8217;m using &lt;a href=&quot;http://www.lastcraft.com/simple_test.php&quot;&gt;SimpleTest&lt;/a&gt; more and more, made me shop around for finding something similar for JavaScript.&lt;/p&gt;

	&lt;p&gt;The one I want to start using from now on to debug my scripts and trace their output, is called &lt;a href=&quot;http://jsassertunit.sourceforge.net/&quot;&gt;jsassertunit&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;A port of the xUnit framework (know from &lt;a href=&quot;http://www.junit.org/index.htm&quot;&gt;JUnit&lt;/a&gt; or &lt;a href=&quot;http://phpunit.sourceforge.net/&quot;&gt;PHPUnit&lt;/a&gt;) is &lt;a href=&quot;http://www.jsunit.net/&quot;&gt;JsUnit&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;Browsing around on the general subject of unit testing, I even came accross a &lt;a href=&quot;http://xsltunit.org/&quot;&gt;test framework for XSLT&lt;/a&gt;. That left me quite surprised, and I wonder how many people really do use things like this. But then again, XSLT is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Turing_complete&quot;&gt;turing complete&lt;/a&gt;, so you can do potentially anything computable with it.&lt;/p&gt;

	&lt;p&gt;If anyone has suggestions or helpful examples on using unit tests in javascript, please drop a comment.&lt;br /&gt;
Also, I&amp;#8217;d like to ask you, dear reader, to comment about your general testing practice and approach to debugging, not only JavaScript but everything you code.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>301 redirect with mod_rewrite</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/301-redirect-with-modrewrite/index.html"/>
      <updated>2007-04-25T09:10:39+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/301-redirect-with-modrewrite/301-redirect-with-modrewrite</id>
      <content type="html">	&lt;p&gt;
So I changed my domain name from .de to .com. But wasn&amp;#8217;t there something whereas Google would punish double-posted content with pagerank 0? That&amp;#8217;s where a 301 redirect comes in, as neatly explained on &lt;a href=&quot;http://www.gnc-web-creations.com/301-redirect.htm&quot;&gt;this tutorial by GNC Web Creations&lt;/a&gt;. The straight forward way to point an old domain to a new one would be putting this into the .htaccess:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Redirect 301 /foo http://foobar.com/foo
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;OR&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Redirect permanent /foo http://foobar.com/foo
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;
Now in my particular setting it was a bit more difficult, the domain was pointing to the same directory on the same server. And all that on a GUID managed system, so no fiddling around in the httpd.conf files.&lt;/p&gt;

&lt;p&gt;
Thankfully the whole issue is easily solved utilizing the reg exp based rules of mod-rewrite, examining the HTTP_HOST of the request:&lt;br /&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
RewriteEngine ON
RewriteCond %{HTTP_HOST} ^(www.)?example.de
RewriteRule ^(.*) http://www.example.com/$1 [R=301,L]
&lt;/code&gt;&lt;/pre&gt;


 </content>
    </entry>

    <entry>
      <title>mod_deflate and IE6 bug</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/moddeflate-and-ie6-bug/index.html"/>
      <updated>2007-04-20T12:46:50+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/moddeflate-and-ie6-bug/moddeflate-and-ie6-bug</id>
      <content type="html">&lt;p&gt;
This one was very strange. IE 6.0.29 would randomly come up with white pages. On the local servers it would come up fine, and so it did in any other version of IE, nor when using the &lt;a href=&quot;http://tredosoft.com/Multiple_IE&quot;&gt;multiple IE installer&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Trying to use &lt;a href=&quot;http://www.xk72.com/charles/&quot;&gt;Charles&lt;/a&gt; to sincerely scrutinize the headers and output for dodgy characters made the problem just go away.
&lt;/p&gt;

&lt;p&gt;
Turns out that the gzip compression added by mod_deflate just wasn't well digested. The following lines in the http.conf caused the misery.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/x-javascript
BrowserMatch ^Mozilla/4 gzip-only-text/html
BrowserMatch ^Mozilla/4.0[678] no-gzip
BrowserMatch bMSIE  !no-gzip !gzip-only-text/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Changing the last two lines would turn off the mod_deflate compression for IE6 but leave it in for IE7:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
BrowserMatch ^Mozilla/4.[0678] no-gzip
BrowserMatch bMSIEs7  !no-gzip !gzip-only-text/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
For testing the HTTP headers that come through one can use the &lt;a href=&quot;http://www.blunck.se/iehttpheaders/iehttpheaders.html&quot;&gt;ieHTTPHeaders plugin&lt;/a&gt; for IE or &lt;a href=&quot;http://www.rexswain.com/httpview.html&quot;&gt;Rex Swain's HTTP viewer&lt;/a&gt;.
&lt;br /&gt;
&lt;strong&gt;Happy Debugging!&lt;/strong&gt;
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>You might have noticed: There are some ads now.</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/you-might-have-noticed-there-are-some-ads-now/index.html"/>
      <updated>2007-04-13T12:50:33+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/you-might-have-noticed-there-are-some-ads-now/you-might-have-noticed-there-are-some-ads-now</id>
      <content type="html">	&lt;p&gt;I kept trying to avoid them, but in the end of the day I cannot see why bandwidth gets burned up without any cost return. And everyone else does seem to do it.&lt;/p&gt;

	&lt;p&gt;I hope your eyes are not massively insulted. If you have any better ideas then this, please let me know. &lt;/p&gt;

	&lt;p&gt;Now we just need some new articles to go along with it, in order to really raise some money for the poor server monkeys of CwS!&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Swapping nodes in a DOM tree</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/swapping-nodes-in-a-dom-tree/index.html"/>
      <updated>2007-04-12T09:34:02+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/swapping-nodes-in-a-dom-tree/swapping-nodes-in-a-dom-tree</id>
      <content type="html">&lt;p&gt;
I was quite surprised to find out that the insertBefore method actually does most of the job for you.
&lt;br /&gt;
A detail in &lt;a href=&quot;http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-952280727&quot;&gt;the manual&lt;/a&gt; offers us insight in how: &quot;If the newChild is already in the tree, it is first removed.&quot;
&lt;br /&gt;
&lt;br /&gt;
Hence:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
myNode.parentNode.insertBefore(myNode, myNode.nextSibling);
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>php: array_diff_assoc and the order of parameters</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-arraydiffassoc-and-the-order-of-parameters/index.html"/>
      <updated>2007-04-12T03:55:51+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-arraydiffassoc-and-the-order-of-parameters/php-arraydiffassoc-and-the-order-of-parameters</id>
      <content type="html">&lt;p&gt;
This took a while till I found out: They actually do matter!
&lt;br /&gt;
Even worse: The manual says so!!!! Just that I was to stupid to read it.
&lt;br /&gt;
Lesson learned. No more guessing, no more quick reading!
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?
$a = array(
    'x' =&gt; 'x',
    'y' =&gt; 'y',
    'z' =&gt; 'z',
    't' =&gt; 't',
);

$b = array(
    'x' =&gt; 'x',
    'y' =&gt; 'y',
    'z' =&gt; 'z',
    't' =&gt; 't',
    'g' =&gt; 'g',
);

print_r(array_diff_assoc($a, $b));
print_r(array_diff_assoc($b, $a));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
This will output:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Array
(
)
Array
(
    [g] =&gt; g
)
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>Blog section opened</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/blog-section-opened/index.html"/>
      <updated>2007-04-07T06:53:45+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/blog-section-opened/blog-section-opened</id>
      <content type="html">	&lt;p&gt;Welcome to The new blog section on the CwS website.&lt;br /&gt;
It will basically replace the events and offer us a bit more freedom than the links currently shown in the &amp;#8220;Elsewhere&amp;#8221; section, but also it&amp;#8217;ll contain ideas that didn&amp;#8217;t make it into the articles because &amp;#8230; guess what &amp;#8230; we&amp;#8217;re just to busy.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>generate PDF with XSL-FO and FOP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/generate-pdf-with-xsl-fo-and-fop/index.html"/>
      <updated>2007-04-03T08:57:25+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/generate-pdf-with-xsl-fo-and-fop/generate-pdf-with-xsl-fo-and-fop</id>
      <content type="html">	&lt;p&gt;A lot of 3-letter abbrevations here, I wanted to share some notes about this.&lt;br /&gt;
So, the scenario I was faced with was to create a pdf with some dynamic content (text, pixel-based image). As usual, nobody wants to spend any money and the &amp;#8220;open-source&amp;#8221; card is played early.&lt;br /&gt;
So, after a short look I find &lt;a href=&quot;http://xmlgraphics.apache.org/fop/index.html&quot;&gt;FOP&lt;/a&gt;, an apache project that renders pdf and other formats out of a &lt;a href=&quot;http://www.w3schools.com/xslfo/default.asp&quot;&gt;XSL-FO&lt;/a&gt; source.&lt;br /&gt;
XSL-FO is an XML subset, that allows you to mark up content in order to generate print formats, such as pdf, rtf or postscript.&lt;/p&gt;

	&lt;p&gt;My trouble started when I had to embed a font, as pdf only comes with &lt;a href=&quot;http://xmlgraphics.apache.org/fop/0.20.5/fonts.html#Base-14+Fonts&quot;&gt;a small preconfigured set&lt;/a&gt; :&lt;br /&gt;
&lt;cite&gt;The Adobe PDF Specification specifies a set of 14 fonts that must be available to every PDF reader: Helvetica (normal, bold, italic, bold italic), Times (normal, bold, italic, bold italic), Courier (normal, bold, italic, bold italic), Symbol and ZapfDingbats.&lt;/cite&gt;&lt;/p&gt;

	&lt;p&gt;For FOP you could create a metrics file needed to embed a font with an accompanying tool. On OS X I discovered that Preview did not display the text using the font. Luckily that was fixed quickly when I tried out the &lt;a href=&quot;http://xmlgraphics.apache.org/fop/0.93/fonts.html#truetype-metrics&quot;&gt;-enc ansi&lt;/a&gt; option. I&amp;#8217;m not sure why there are 2 ways to create a metrics file, but hey, the ansi version works with Preview, the default one (CID-keyed) doesn&amp;#8217;t.&lt;br /&gt;
Everything seemed fine.&lt;/p&gt;

	&lt;p&gt;Until I realised that this version only creates 72dpi output, regardless what you specify. Not great when the pdf is meant to be printed out.&lt;br /&gt;
So I went for the most recent release, &lt;a href=&quot;http://xmlgraphics.apache.org/fop/0.93/index.html&quot;&gt;fop 0.93&lt;/a&gt;. While I could now generate 150dpi output (or any kind of resolution, for that matter), it didn&amp;#8217;t recognize my previously generated metrics file, or font, and gave me grief with some warnings similar to this:&lt;/p&gt;

&lt;pre&gt;
SEVERE: Failed to read font metrics file null
java.io.EOFException: Reached EOF, file size=5104 offset=5104
&lt;/pre&gt;

	&lt;p&gt;After some international swearing, a lunch-break and some research I found &lt;a href=&quot;http://www.mail-archive.com/fop-users@xmlgraphics.apache.org/msg06266.html&quot;&gt;this little gem&lt;/a&gt; in their mailing list. It kinda reads as if they literally forgot to test with their own test fonts before release. But who am I to complain, I didn&amp;#8217;t spend a minute developing it, did I? &lt;br /&gt;
So, after downloading an &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;#38;revision=496860&quot;&gt;updated font file reader&lt;/a&gt; together with ant and the source package of the 0.93 release, I compiled the whole thing again, without any problems, and started rendering away happily.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Browser based vector rendering</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/browser-based-vector-rendering/index.html"/>
      <updated>2007-03-12T13:54:40+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/browser-based-vector-rendering/browser-based-vector-rendering</id>
      <content type="html">	&lt;p&gt;Today &lt;a href=&quot;http://www.redwiredesign.com/profile/justin_finkelstein.html&quot;&gt;Justin&lt;/a&gt; came across a demo for the &lt;a href=&quot;http://ajax3d.sourceforge.net/&quot;&gt;Ajax3d engine&lt;/a&gt;, an entirely JavaScript based 3d engine that utilizes the canvas tag for rendering vector based graphics.&lt;/p&gt;

	&lt;p&gt;Canvas tag? A little &lt;a href=&quot;http://en.wikipedia.org/wiki/Canvas_%28HTML_element%29&quot;&gt;research&lt;/a&gt; reveals that this is yet another proprietary tag, this time introduced by Apple.&lt;br /&gt;
With all of us in the office Browsing the web a bit more, &lt;a href=&quot;http://www.redwiredesign.com/profile/tom_westcott.html&quot;&gt;Tom&lt;/a&gt; finds a &lt;a href=&quot;http://testzone.danieljmarra.com/canvas/canvaspong/&quot;&gt;pong game&lt;/a&gt; and various other stuff on the web, all done using the canvas tag.&lt;/p&gt;

	&lt;p&gt;One big downside, though: It is not supported in IE!&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Wine, Photoshop &#38; &quot;save for web&quot;</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/wine-photoshop-save-for-web/index.html"/>
      <updated>2007-02-05T08:25:25+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/wine-photoshop-save-for-web/wine-photoshop-save-for-web</id>
      <content type="html">	&lt;p&gt;&lt;a href=&quot;http://www.redwiredesign.com/profile/tom_westcott.html&quot;&gt;Tom&lt;/a&gt; did find out about this one for me:&lt;br /&gt;
The trick is to execute Photoshop with quotes around the path and backslashes in it.&lt;/p&gt;

	&lt;p&gt;Via &lt;a href=&quot;http://www.winehq.org/pipermail/wine-bugs/2006-June/032059.html&quot;&gt;winehq&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
Save for Web works with:
wine &quot;c:\program files\adobe\Photoshop 7.0\Photoshop.exe&quot;

Save for Web WILL NOT work with:
wine &quot;c:/program files/adobe/Photoshop 7.0/Photoshop.exe&quot;
&lt;/pre&gt;


 </content>
    </entry>

    <entry>
      <title>Ndiswrapper and Fedora Core 6</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ndiswrapper-and-fedora-core-6/index.html"/>
      <updated>2007-01-18T10:30:02+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ndiswrapper-and-fedora-core-6/ndiswrapper-and-fedora-core-6</id>
      <content type="html">	&lt;p&gt;For me, the key to get this working is to NOT attempt to create the ath0 Interface, but &lt;a href=&quot;http://ndiswrapper.sourceforge.net/mediawiki/index.php/Fedora#Configuration_using_script_system&quot;&gt;using ethX as interface&lt;/a&gt; instead.&lt;/p&gt;

	&lt;p&gt;1) First I updated the whole system to use the latest rpm&amp;#8217;s&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum update&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;2) I set up my yum to use the &lt;a href=&quot;http://rpm.livna.org/rlowiki/UsingLivna&quot;&gt;livna rpms&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -ivh http://rpm.livna.org/livna-release-6.rpm&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;3) I installed ndiswrapper using YUM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install ndiswrapper&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;4) I edited my modprobe.conf adding the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
options ndiswrapper if_name=eth1
alias eth1 ndiswrapper
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;5) I restarted&lt;/p&gt;

	&lt;p&gt;6) I downloaded the &lt;a href=&quot;ftp://ftp.dlink.co.uk/wireless/dwl-g650+_rev_Bx&quot;&gt;XP drivers for the card&lt;/a&gt; and unzipped the file, then loaded the driver into ndiswrapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ndsiwrapper -i WinXP/GPLUS.inf&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;7) Finally I executed the modprobe command to load ndsiwrapper as driver:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo modprobe ndsiwrapper&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;And finally I was able to go to the network administration panel in GNOME and change the settings for the card like for any other network interface.&lt;/p&gt;




 </content>
    </entry>

    <entry>
      <title>Outlook 2007 and those bloody HTML emails</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/outlook-2007-and-those-bloody-html-emails/index.html"/>
      <updated>2007-01-18T08:07:20+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/outlook-2007-and-those-bloody-html-emails/outlook-2007-and-those-bloody-html-emails</id>
      <content type="html">	&lt;p&gt;Microsoft comes up with a great way of rendering emails in Outlook 2007 which might cause Matthias to refuse doing any HTML formatted emails in the future. &lt;/p&gt;

	&lt;p&gt;David Greiner posted this interesting article on &lt;a href=&quot;http://www.campaignmonitor.com/blog/archives/2007/01/microsoft_takes_email_design_b.html&quot;&gt;campaignmonitor.com&lt;/a&gt;&lt;br /&gt;
stating that Microsoft just threw back the development of HTML emails for about 5 years, and even though &lt;a href=&quot;http://www.molly.com/2007/01/18/what-happened-with-html-and-css-in-outlook-2007/&quot;&gt;Molly Holzschlag&lt;/a&gt; seems to be more pragmatic about the whole thing than David, saying that we should dry our tears and start dealing with the problem, the problem itself remains:&lt;/p&gt;

	&lt;p&gt;It will not be possible to use accessible, standard-compliant and best-practice HTML to format emails anymore.&lt;br /&gt;
Outlook 2007 will mess everything up and cripple anything that uses floats and other sophisticated CSS commands.&lt;/p&gt;

	&lt;p&gt;While many people get really worked up over this I start secretly smiling and telling myself my honest opinion over and over again:&lt;br /&gt;
&amp;#8220;There shouldn&amp;#8217;t be ANY HTML in emails. They&amp;#8217;re supposed to be plain text and maybe some attachments!&amp;#8221; &lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>fulltext &#38; weighted relevance</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/fulltext-weighted-relevance/index.html"/>
      <updated>2007-01-09T09:14:37+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/fulltext-weighted-relevance/fulltext-weighted-relevance</id>
      <content type="html">	&lt;p&gt;Via JV Multimedia:&lt;/p&gt;

	&lt;p&gt;A quick and neat way to use MySQL fulltext search with weighted relevance modificators.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

SELECT
*,
(MATCH (category) AGAINST ('$query' IN BOOLEAN MODE)*100) +
(MATCH (title) AGAINST ('$query' IN BOOLEAN MODE)*10) +
MATCH (body) AGAINST ('$query' IN BOOLEAN MODE) AS rating
FROM
stories
WHERE
MATCH (title,category,body) AGAINST ('$query' IN BOOLEAN MODE)
ORDER BY
rating DESC
LIMIT 0,10

&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;&lt;a href=&quot;http://www.jvmultimedia.com/portal/node/61&quot;&gt;http://www.jvmultimedia.com/portal/node/61&lt;/a&gt;&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>CwS 2006 - a little summary</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/cws-2006---a-little-summary/index.html"/>
      <updated>2006-11-30T07:46:03+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/cws-2006---a-little-summary/cws-2006---a-little-summary</id>
      <content type="html">	&lt;p&gt;With 2006 nearly over it&amp;#8217;s time for a little look back on what happened with CwS throughout the year.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;2006 came with some major difficulties and changes for us.&lt;/strong&gt;&lt;/p&gt;

	&lt;p&gt;We were offline for ages, being kicked out of our shared hosting platform and &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Blog/85/offtime-moving-and-some-changes/&quot;&gt;had to sort out some hosting solution&lt;/a&gt; that wouldn&amp;#8217;t cause the same trouble again.&lt;/p&gt;

	&lt;p&gt;A bit on the negative side as well is our article output, which is just two articles throughout the whole year.&lt;/p&gt;

	&lt;p&gt;We had a &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Blog/107/spam-and-some-other-things-/&quot;&gt;mad increase of spam being dropped in our comments&lt;/a&gt;, and a couple of insults came up as well. &lt;/p&gt;

	&lt;p&gt;Plus, we got rid of the Events section because we realized it was to much to manage in a way that wouldn&amp;#8217;t come across as half-hearted.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;On the other hand it wasn&amp;#8217;t all just negative.&lt;/strong&gt;&lt;/p&gt;

	&lt;p&gt;We did successfully introduce the &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Blog/&quot;&gt;Blog section&lt;/a&gt;, where we published quite a lot of things, from general things to little code snippets, and sparked some interesting discussions as well.&lt;/p&gt;

	&lt;p&gt;We received quite a lot of attention, i.e. Mike being asked to predict the future in .Net magazine.&lt;/p&gt;

	&lt;p&gt;Our stats look good, really. With around 20k unique visitors each month and something like 3 million page impressions throughout this year we&amp;#8217;re quite pleased to have that many readers.&lt;/p&gt;

	&lt;p&gt;And last but not least, some people dropped some nice comments and made us feel like we contributed something.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;As a little outlook for 2007&lt;/strong&gt; I cannot really offer anything more than some of the things we&amp;#8217;d fancy to do, if we ever find the time to tackle them:&lt;/p&gt;

	&lt;p&gt;&lt;em&gt;We&amp;#8217;d like to do a redesign and relaunch&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;We&amp;#8217;d like to write some proper articles&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;We&amp;#8217;d like to have others writing some articles for us&lt;/em&gt;&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;So there&amp;#8217;s just one more thing to do then:&lt;/strong&gt;&lt;br /&gt;
We wish you a great rest of 2006 and a good start into 2007. Enjoy the holidays and a happy new year, or, as the Germans say &amp;#8220;Frohe Weihnachten und einen guten Rutsch&amp;#8221;!&lt;/p&gt;




 </content>
    </entry>

    <entry>
      <title>XML validation in PHP</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xml-validation-in-php/index.html"/>
      <updated>2006-11-08T06:41:10+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xml-validation-in-php/xml-validation-in-php</id>
      <content type="html">	&lt;p&gt;Working with user input that needs to be valid XML, it turns out that PHP5 has a built-in &lt;a href=&quot;http://www.php.net/manual/en/function.dom-domdocument-schemavalidate.php&quot;&gt;validation&lt;/a&gt; function.&lt;/p&gt;

	&lt;p&gt;For just checking if the XML is well-formed you can just leave the parameter with the filename of the xsd blank.&lt;/p&gt;

	&lt;p&gt;See the following example code for a possible application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class XML
{
        public static function validate($xml)
        {
                libxml_use_internal_errors(true);

                $doc = new DOMDocument('1.0', 'utf-8');
                $doc-&amp;gt;loadXML($xml);

                $errors = libxml_get_errors();
                if (empty($errors))
                {
                        return true;
                }

                $error = $errors[ 0 ];
                if ($error-&amp;gt;level &amp;lt; 3)
                {
                        return true;
                }

                $lines = explode(&quot;r&quot;, $xml);
                $line = $lines[($error-&amp;gt;line)-1];

                $message = $error-&amp;gt;message.' at line '.$error-&amp;gt;line.':&amp;lt;br /&amp;gt;'.htmlentities($line);

                return $message;
        }
}
&lt;/code&gt;&lt;/pre&gt;


 </content>
    </entry>

    <entry>
      <title>IE7 and how it changes the web</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ie7-and-how-it-changes-the-web/index.html"/>
      <updated>2006-10-29T12:32:05+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ie7-and-how-it-changes-the-web/ie7-and-how-it-changes-the-web</id>
      <content type="html">	&lt;p&gt;Simon Griffin from &lt;a href=&quot;http://www.etre.com/&quot;&gt;etre&lt;/a&gt; sent us a rather interesting email about some research they&amp;#8217;ve done on IE7 &amp;#8230;&lt;/p&gt;

&lt;blockquote&gt;
	&lt;p&gt;Hi,&lt;/p&gt;

	&lt;p&gt;I was just browsing your site and thought you might be interested in a study we just published.&lt;/p&gt;

	&lt;p&gt;As I&amp;#8217;m sure you know, prior to its release last week, many were predicting that Internet Explorer 7.0 would break the internet. Indeed, Microsoft itself admitted that certain sites that worked well in IE6 would fall apart in IE7. Unfortunately, no one seemed to know exactly how many sites would be affected by the launch of the new browser. So to get an idea, we decided to fire up a couple of machines and compare the homepages of a hundred different corporate websites in both IE6 and IE7. The results are available on our blog at: &lt;a href=&quot;http://www.etre.com/blog/2006/10/ie7_were_they_ready/&quot;&gt;http://www.etre.com/blog/2006/10/ie7_were_they_ready/&lt;/a&gt; &lt;/p&gt;

	&lt;p&gt;If our findings are indicative of websites in general (which I admit requires a bit of a leap of faith!), they would suggest that around 12.7 million websites in need of a little TLC as a result of the introduction of IE7!&lt;/p&gt;

	&lt;p&gt;Anyway, hope this is of interest to you.&lt;/p&gt;

	&lt;p&gt;Kind regards,&lt;/p&gt;


	&lt;p&gt;Simon Griffin.&lt;/p&gt;
&lt;/blockquote&gt;

	&lt;p&gt;Thanks Simon for that info.&lt;br /&gt;
I am actually quite pleased to hear this. Turns out to be a great source of revenue for the web industries. &lt;br /&gt;
From a bit of a sarcastic point of view: It often seems to be a good excuse for doing a complete relaunch of the whole content management system and everything else, when the logo&amp;#8217;s not in place anymore. Not that the other bad aspects weren&amp;#8217;t urgent, but this one&amp;#8217;s unbearable &amp;#8230;&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>XSL:TEXT, CDATA and PHP5</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xsltext-cdata-and-php5/index.html"/>
      <updated>2006-10-20T07:53:06+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xsltext-cdata-and-php5/xsltext-cdata-and-php5</id>
      <content type="html">	&lt;p&gt;Right, so I am applying disable-output-escaping=&amp;quot;yes&amp;quot; on an xsl:text element containing some CDATA, but the output is still coming with escaped entities &amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;xsl:text disable-output-escaping=&quot;yes&quot;&amp;gt;
&amp;lt;![CDATA[This is a &amp;lt;p&amp;gt; tag]]&amp;gt;
&amp;lt;/xs:text&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;This is actually a &lt;a href=&quot;http://bugs.php.net/bug.php?id=29837&amp;#38;edit=1&quot;&gt;glitch&lt;/a&gt; in the PHP5 built in transformation engine, and the good news is that there is a fix for this. The predefined constant &lt;a href=&quot;http://us3.php.net/manual/en/ref.libxml.php#libxml.constants&quot;&gt;LIBXML_NOCDATA&lt;/a&gt; will fix this behaviour to the one you expect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$xsl_dom-&amp;gt;loadXML($xsl, LIBXML_NOCDATA);
or
$xsl_dom-&amp;gt;load($xsl_file_location, LIBXML_NOCDATA);
&lt;/code&gt;&lt;/pre&gt;



 </content>
    </entry>

    <entry>
      <title>Find and Replace and some more VIM tuning</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/find-and-replace-and-some-more-vim-tuning/index.html"/>
      <updated>2006-10-17T08:40:44+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/find-and-replace-and-some-more-vim-tuning/find-and-replace-and-some-more-vim-tuning</id>
      <content type="html">	&lt;p&gt;Awkward at first glance &lt;a href=&quot;http://www.vim.org/&quot;&gt;VIM&lt;/a&gt; has become my editor of choice. A modified .vimrc file based on the one found at &lt;a href=&quot;http://schlitt.info/applications/blog/index.php?/archives/331-Comfortable-PHP-editing-with-VIM-3.html&quot;&gt;schlitt.info&lt;/a&gt;&lt;br /&gt;
enables quite a couple of extras that make work fast and efficient.&lt;/p&gt;

	&lt;p&gt;Handy as well is the functionality to add comments, again, found at &lt;a href=&quot;http://schlitt.info/applications/blog/index.php?/archives/488-Comfortable-PHP-editing-with-VIM-5.html&quot;&gt;schlitt.info&lt;/a&gt; and available for download at &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1355&quot;&gt;vim.org&lt;/a&gt;&lt;/p&gt;

	&lt;p&gt;Neat: &lt;a href=&quot;http://www.vim.org/tips/tip.php?tip_id=31&quot;&gt;Search and Replace in VIM&lt;/a&gt; works by utilizing the &lt;a href=&quot;http://www.cornerstonemag.com/sed/&quot;&gt;sed&lt;/a&gt; stream editor.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>Checking for object literals</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/checking-for-object-literals/index.html"/>
      <updated>2006-10-03T07:46:03+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/checking-for-object-literals/checking-for-object-literals</id>
      <content type="html">	&lt;p&gt;Such a basic thing to do, but still, I didn&amp;#8217;t have to do it until now:&lt;br /&gt;
Checking if an object literal is defined.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var my_object_literal
{
  'my_property' : 'I exist'
};

if (window.my_object_literal)
{
   alert(my_object_literal.my_property);
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;via &lt;a href=&quot;http://www.faqts.com/knowledge_base/view.phtml/aid/16419&quot;&gt;FAQTS&lt;/a&gt;&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>IE Conditional comments in XSL</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ie-conditional-comments-in-xsl/index.html"/>
      <updated>2006-09-27T05:49:41+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ie-conditional-comments-in-xsl/ie-conditional-comments-in-xsl</id>
      <content type="html">	&lt;p&gt;Just a small bit of  code, but not obious at first glance &amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;xsl:comment&amp;gt;&amp;lt;![CDATA[[if gte IE 6]&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;ie.css&quot; /&amp;gt;
&amp;lt;![endif]]]&amp;gt;&amp;lt;/xsl:comment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


 </content>
    </entry>

    <entry>
      <title>PHP Script: Timeshift in Subtitle Files</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-script-timeshift-in-subtitle-files/index.html"/>
      <updated>2006-09-16T10:30:58+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-script-timeshift-in-subtitle-files/php-script-timeshift-in-subtitle-files</id>
      <content type="html">&lt;p&gt;
Have you ever tried to watch a movie with a .srt file, and the subtitle was more or less out of time? You can use this little PHP script through commandline and fix it by providing an offset.
&lt;/p&gt;

&lt;p&gt;
This obviously is just a quick script, nothing fancy, but i thought I might still share it. Save the file as &amp;#8220;subtitle_timeshift.php&amp;#8221; and execute it with PHP in the commandline. It will then save your file with the prefix &amp;#8220;parse_&amp;#8221; so you can check if it works or not.
&lt;br /&gt;
&lt;br /&gt;
Enjoy!
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?
if(empty($argv[1]) || empty($argv[2]))
  die('Syntax: php subtitle_timeshift.php filename seconds'. &quot;n&quot;);

if(!file_exists($argv[1]))
  die('file not found' . &quot;n&quot;);

$fc=file($argv[1]);
$f = fopen('parse_' . $argv[1], 'w+');

foreach($fc as $ln)
{
  if(strpos($ln, ' --&gt; ') !== false)
  {
    $parts = explode(' --&gt; ', $ln);
    $start = substr($parts[0], 0, 8);
    $end = substr($parts[1], 0, 8);

    $start = strtotime(&quot;2000-01-01 &quot; . $start) + intval($argv[2]);
    $end = strtotime(&quot;2000-01-01 &quot; . $end) + intval($argv[2]);

    $start = date(&quot;H:i:s&quot;, $start) . substr($parts[0], 8);
    $end = date(&quot;H:i:s&quot;, $end) . substr($parts[1], 8);

    $ln = $start . ' --&gt; ' . $end;
  }

  fputs($f, $ln);
}

fclose($f);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>PHP and MP3s</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-and-mp3s/index.html"/>
      <updated>2006-09-11T08:12:57+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-and-mp3s/php-and-mp3s</id>
      <content type="html">	&lt;p&gt;While setting up a media server for the &lt;a href=&quot;http://www.netaudiolondon.cc&quot;&gt;Netaudio Festival&lt;/a&gt; next weekend I had not only to set up a dedicated machine with samba shares, Webserver and Web based interface, but also to play around with mp3s and ID3 tags.&lt;/p&gt;

	&lt;p&gt;First I wanted to use the &lt;a href=&quot;http://pecl.php.net/package-info.php?package=id3&amp;#38;version=0.2&quot;&gt;id3 package&lt;/a&gt; . But after getting errors using the PEAR installer (phpize first was missing, then still failed when reading the package) I eventually gave up and went with the fantastic &lt;a href=&quot;http://getid3.sourceforge.net/&quot;&gt;GetID3&lt;/a&gt; script.&lt;br /&gt;
Very cool, especially because the MySQL Demo already features a full data structure and recursive indexing of directories.&lt;/p&gt;

	&lt;p&gt;I&amp;#8217;ll keep you updated on this one as I want to make the script I wrote Open Source for everyone to enjoy, but it needs a bit of tidying up.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Register PHP functions in XSL</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/register-php-functions-in-xsl/index.html"/>
      <updated>2006-09-11T07:55:48+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/register-php-functions-in-xsl/register-php-functions-in-xsl</id>
      <content type="html">	&lt;p&gt;Working with PHP5 and the built-in XSLT processor I came accross the method &lt;a href=&quot;http://uk2.php.net/manual/en/function.xsl-xsltprocessor-register-php-functions.php&quot;&gt;registerPHPFunctions&lt;/a&gt; that lets you register PHP functions in XSL. Quite a neat feature. Wonder how much that slows the transformation down?&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Hybrid Flash Developers: A unique species</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/hybrid-flash-developers-a-unique-species/index.html"/>
      <updated>2006-09-05T11:56:37+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/hybrid-flash-developers-a-unique-species/hybrid-flash-developers-a-unique-species</id>
      <content type="html">	&lt;p&gt;Check out this &lt;a href=&quot;http://www.thefwa.com/articles/flashdevs0906.html&quot;&gt;article&lt;/a&gt; by &lt;a href=&quot;http://www.velloff.com/&quot;&gt;Nick Velloff&lt;/a&gt;. (via &lt;a href=&quot;http://blog.lessrain.com/&quot;&gt;lessrain blog&lt;/a&gt;)&lt;/p&gt;

	&lt;p&gt;We just discussed this a little bit in the office, with different opinions. I think there&amp;#8217;s a flaw in the article, as to me it reads that the hybrid flash developer is the way to go. I wonder: Has a hybrid developer, or a &amp;#8220;generalist&amp;#8221; as some people call it, ever been out of fashion? Will it lose eventually against the &amp;#8220;specialist&amp;#8221;?&lt;/p&gt;

	&lt;p&gt;I don&amp;#8217;t believe in that. The essence I take out of this article is in this sentence:&lt;/p&gt;

	&lt;p&gt;&lt;cite&gt;This developer generally has an excellent rapport and mutual level of respect with designers.&lt;/cite&gt;&lt;/p&gt;

	&lt;p&gt;But it really doesn&amp;#8217;t read as if the article focusses on this point. Further down Nick starts a list with ideas of how to make yourself be more design-aware. Wow: &amp;#8220;Pay attention to design comps&amp;#8221; and &amp;#8220;Try and be creative&amp;#8221;. Is he serious?&lt;/p&gt;

	&lt;p&gt;Sure, when I &amp;#8220;Try to sit near the designers&amp;#8221;, I&amp;#8217;m really after an exchange, and that helps understanding each other. Understanding how the other one thinks, what excites them and what makes them tick. Nick is after the right result, but his viewpoint is confusing me.&lt;/p&gt;

	&lt;p&gt;In small creative agencies you&amp;#8217;ll always need hybrid developers of any kind; there&amp;#8217;s different possibilities, e.g. one person that designs and animates, another one that does the heavy actionscript coding; or one designer that creates templates down to html and css, and a programmer that breathes life into the templates. Or the other way round: I myself am responsible for front and back-end coding, HTML and PHP mostly, and I mostly treat it as 2 jobs. There&amp;#8217;s many possibilities, and small companies rely on them. &lt;br /&gt;
Bigger companies will look for very specialized employees, so that one only does the job they&amp;#8217;re best at.&lt;br /&gt;
But what stays is the need for mutual respect, the rough understanding of the person doing their job before or after you. Or their job, rather. Preparing your work so that they have an easier life once they start their task.&lt;br /&gt;
That doesn&amp;#8217;t make the hybrid developer better or worse than one specializing in one or the other field. So a call to push yourself to become a hybrid developer is essentially only for folks that want to work in a small team. The respect for your teammates is something you can utilise anywhere you work. &lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Spam and some other things ...</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/spam-and-some-other-things-/index.html"/>
      <updated>2006-08-25T07:10:03+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/spam-and-some-other-things-/spam-and-some-other-things-</id>
      <content type="html">	&lt;p&gt;Sadly we lately have to deal with unpleasant things. One is the comment spam, that actually is getting worse and worse. But since Mike did write his latest article with a bit of a tabloid title we have to deal with some other things as well &amp;#8230;&lt;/p&gt;

	&lt;p&gt;Which are insults. A bit disappointing for me, really, since I invest spare time and money in this project without asking for anything in return. I think that we already successfully sparked some interesting discussions with our articles, and to drop a line like &amp;#8220;You are loosers&amp;#8221; or something similar just doesn&amp;#8217;t do us right I think.&lt;/p&gt;

	&lt;p&gt;Please note that we moderate the comments. Every single one will be reviewed, and no insult or spam be switched visible. The same goes for really off-topic comments, that we will answer in an email though.&lt;/p&gt;

	&lt;p&gt;So much for our comments and our problems with them. &lt;/p&gt;

	&lt;p&gt;On the other side of things we had nearly 30.000 unique visitors a month, our traffic (and that is text data mostly) ate up about 4.84 Gigabytes. A massive 284604 page impressions have been logged and all together that adds up to more than 900000 hits.&lt;/p&gt;

	&lt;p&gt;That is a big success for us and we are happy that the site is well percieved. Hopefully we will come up with some more articles in the near future, but again a quick reminder: This website is done in our spare time, and we can only write when we have spare time.&lt;/p&gt;

	&lt;p&gt;If you think you have an idea for an article then feel free to send us a draft. We would welcome more writing on here.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Netaudio'06: London Netlabel Festival</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/netaudio06-london-netlabel-festival/index.html"/>
      <updated>2006-08-25T07:09:42+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/netaudio06-london-netlabel-festival/netaudio06-london-netlabel-festival</id>
      <content type="html">	&lt;p&gt;CwS supports London&amp;#8217;s first netlabel festival with more than 30 artists from all over the world. Netaudio&amp;#8217;06 takesplace on the 15th and 16th of September 2006 at Candid Arts Gallery and Electrowerkz, next to Angel tube station, London.&lt;/p&gt;

	&lt;p&gt;&lt;a href=&quot;http://www.netaudiolondon.cc/&quot;&gt;&lt;img src=&quot;http://www.netaudiolondon.cc/images/116.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;/p&gt;

	&lt;p&gt;Make sure to pop down and check out a fine selection of netlabel music,&lt;br /&gt;
audiovisual arts, take part in the knowledge fair and coffe table discussions.&lt;/p&gt;

	&lt;p&gt;The daytime event will be for free, tickets for both nighttime events &lt;br /&gt;
are now available for &amp;pound;15 through &lt;a href=&quot;http://www.ticketweb.co.uk/user/?region=gb_london&amp;#38;query=detail&amp;#38;event=174367&quot;&gt;Ticketweb&lt;/a&gt;&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>UTF-8 based transformation output in .Net</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/utf-8-based-transformation-output-in-net/index.html"/>
      <updated>2006-08-17T11:38:46+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/utf-8-based-transformation-output-in-net/utf-8-based-transformation-output-in-net</id>
      <content type="html">&lt;p&gt;
Using XSL transformations in .Net I came accross the weird behaviour that my transformations would be UTF-16 encoded even though I specified UTF-8 in the &lt;code&gt;&amp;lt;xsl:output /&amp;gt;&lt;/code&gt; tag.
&lt;/p&gt;

&lt;p&gt;
This left me a bit speechless, and I was assuming that this only could be a .Net bug. After a bit of research, however, I found this to be a result of .Net being very specific about character encodings.
&lt;/p&gt;

&lt;p&gt;
In my following example the StringWriter has the property Encoding set to System.Text.Encoding.UTF-16, hence the output charset will be UFT-16 as well, no matter what I specify as character set in the XSL.
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
XslTransform xslt = new XslTransform();
StringWriter output = new StringWriter();
xslt.Transform(xml, args, output);
String code_transformed = output.ToString();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.dotnet247.com/247reference/msgs/41/205082.aspx&quot;&gt;Steven Livingstone pointed out&lt;/a&gt; that, since the encoding property of System.IO.StringWriter is a read only property, one has to provide a different Stream object to recieve the transformation output, if this is to be encoded in UTF-8:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
XslTransform xslt = new XslTransform();
MemoryStream ms = new MemoryStream();
xslt.Transform(xml, args, ms);
ms.Position = 0;
StreamReader sr = new StreamReader(ms, Encoding.UTF8);
String code_transformed = sr.ReadToEnd();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
Another possibility would be to extend the StringWriter class in order to make a different encoding possible, as suggested on Robert McLaws &lt;a href=&quot;http://weblogs.asp.net/rmclaws/archive/2003/07/31/22080.aspx&quot;&gt;FunWithCoding.Net&lt;/a&gt; which would read as follows:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
using System;
using System.IO;
using System.Text;

namespace MyAwesomeNamespace
{
  public class StringWriterWithEncoding : StringWriter
  {
    private Encoding _enc;

    public StringWriterWithEncoding(Encoding NewEncoding) : base()
    {
      _enc = NewEncoding;
    }

    public override System.Text.Encoding Encoding
    {
      get
      {
         return _enc;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    </entry>

    <entry>
      <title>CrunchBoard</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/crunchboard/index.html"/>
      <updated>2006-08-04T08:24:39+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/crunchboard/crunchboard</id>
      <content type="html">	&lt;p&gt;My current favourite website and VC&amp;#8217;s darling, TechCrunch, has just launched a jobs board: &lt;a href=&quot;http://www.crunchboard.com/&quot;&gt;CrunchBoard&lt;/a&gt;. It&amp;#8217;s not cheap to post a job so the quality of the ones on offer seems pretty high. &lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Safari, Ajax and the back button</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/safari-ajax-and-the-back-button/index.html"/>
      <updated>2006-07-10T09:42:58+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/safari-ajax-and-the-back-button/safari-ajax-and-the-back-button</id>
      <content type="html">	&lt;p&gt;A while ago David Bloom posted a &lt;a href=&quot;http://bloomd.home.mchsi.com/histapi/test.html&quot;  title=&quot;and others&quot;&gt;back button, bookmarking and so on fix for Safari&lt;/a&gt;, which, aside from some funny character garbage at the end, works reliably enough to be used for all your Ajax and Flash needs.&lt;/p&gt;

	&lt;p&gt;I&amp;#8217;ve got the feeling that one reason it didn&amp;#8217;t get its deserved attention is that he called it &amp;#8220;Fragment identifier history&amp;#8221;, which might be the right terminology, but doesn&amp;#8217;t help much in the publicity department.&lt;/p&gt;

	&lt;p&gt;I didn&amp;#8217;t post this before, as I wanted to compare and integrate his solution with &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/38/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps/&quot;&gt;Mike&amp;#8217;s approach&lt;/a&gt; and the &lt;a href=&quot;http://www.blog.lessrain.com/index.php?s=back+button&quot;&gt;work of others&lt;/a&gt;. But time is of the essence and I didn&amp;#8217;t have any so far, not even for the &lt;a href=&quot;http://www.blog.lessrain.com/?p=357&quot;&gt;solution we currently use at Less Rain&lt;/a&gt;. This one fixes IE by using a client-side VB script, how weird is that?&lt;/p&gt;

	&lt;p&gt;So, I wonder, has anyone seen a solution that is publicly available, documented and works on Safari and possibly Opera as well? Or is it just not fashionable any more to incorporate this kind of solution?&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Ctrl+Shift+F at the developer toolbar party</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ctrlshiftf-at-the-developer-toolbar-party/index.html"/>
      <updated>2006-07-06T08:14:54+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ctrlshiftf-at-the-developer-toolbar-party/ctrlshiftf-at-the-developer-toolbar-party</id>
      <content type="html">	&lt;p&gt;This is my find of the day:&lt;br /&gt;
Hit Ctrl + Shift + F when using &lt;a href=&quot;http://chrispederick.com/work/webdeveloper/&quot;&gt;Chris Pederick&amp;#8217;s developer toolbar&lt;/a&gt;, or &amp;#8220;display element information&amp;#8221; under Information. I&amp;rsquo;m sure I&amp;rsquo;m so late to this party, that the only ones left are some crying girl with an empty bottle of spirits and a sad sausage swimming in lukewarm water.&lt;/p&gt;

	&lt;p&gt;&lt;img src=&quot;http://contentwithstyle.pascalopitz.com/resources/old_images/20.gif&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;280&quot; /&gt;&lt;/p&gt;

	&lt;p&gt;Now more seriously: You&amp;#8217;ll find a nice summary including attributes, ancestors and children as well as position and style information for every element you roll over. &lt;/p&gt;

	&lt;p&gt;Of course you can get similar results (depending on what you&amp;#8217;re after) with with CSS-&gt;View style information, Outline block elements or by using &lt;a href=&quot;http://www.joehewitt.com/software/firebug/&quot;&gt;Firebug&amp;#8217;s&lt;/a&gt; inspector; but it doesn&amp;#8217;t claim as much space, and the information is presented very nicely.&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>REST and some unknown verbs</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/rest-and-some-unknown-verbs/index.html"/>
      <updated>2006-06-28T06:27:21+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/rest-and-some-unknown-verbs/rest-and-some-unknown-verbs</id>
      <content type="html">	&lt;p&gt;I started off with a little &lt;a href=&quot;http://www.google.co.uk/search?q=REST+urls&amp;#38;hl=en&amp;#38;hs=BW1&amp;#38;lr=&amp;#38;client=firefox-a&amp;#38;rls=org.mozilla:en-US:official&amp;#38;start=10&amp;#38;sa=N&quot;&gt;google search&lt;/a&gt; and had a read about &lt;a href=&quot;http://www.xfront.com/REST-Web-Services.html&quot;&gt;Building Web Services the REST Way&lt;/a&gt; which made clear to me that you could POST something to its already given URL as a natural way of updating ressources.&lt;/p&gt;

	&lt;p&gt;A bit further down the list there was a very interesting article called &lt;a href=&quot;http://naeblis.cx/rtomayko/2004/12/12/rest-to-my-wife&quot;&gt;How I explained REST to my wife&amp;#8230;&lt;/a&gt; that initially came across a bit stupid, but then in the end flagged up some very true points about the benefits that HTTP and REST has, mentioning GET, POST and PUT &amp;#8230; &lt;/p&gt;

	&lt;p&gt;Hang on, PUT? What the heck is that? Yet another google search and I knew a bit more:&lt;/p&gt;

	&lt;blockquote cite=&quot;http://www.apacheweek.com/features/put&quot;&gt;&lt;p&gt;The &amp;#8220;PUT&amp;#8221; method is similar to the POST method in that it can cause information to be updated on the server. The difference is that the POST method is normally handed a script which is explicitly named by the resource (that is, something that already exists), while a PUT request could be directed at a resource which does not (yet) exist. Another difference is that the POST method can be used in response to a form, while the PUT method can only contain a single data item. The PUT method is suited for publishing pages.&lt;/p&gt;&lt;/blockquote&gt;

	&lt;p&gt;Seems like I discovered a verb that was unknown to me up to this point. Same was DELETE as http method mentioned in this article.&lt;br /&gt;
Time to look up the whole family I thought, and &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot;&gt;according to the w3c&lt;/a&gt; you have even more methods.&lt;br /&gt;
Also there is a &lt;a href=&quot;http://perso.ec-lyon.fr/lyonel.vincent/apache/mod_put.html&quot;&gt;mod_put&lt;/a&gt; for apache utilizing the PUT and DELETE method.&lt;/p&gt;

	&lt;p&gt;Amazingly I never came accross them, and that is in 5 years+ of proramming web applications. Am I the only guy missing out on these basic HTTP definitions?&lt;/p&gt;



 </content>
    </entry>

    <entry>
      <title>UTF-8: Documents with a lot of character</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/utf-8-documents-with-a-lot-of-character/index.html"/>
      <updated>2006-06-21T05:21:40+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/utf-8-documents-with-a-lot-of-character/utf-8-documents-with-a-lot-of-character</id>
      <content type="html">&lt;h2&gt;Sloppy?&lt;/h2&gt;

&lt;p&gt;
	Did you ever built a webpage in Homesite and then you didn't encode the html-entities? Then, probably when the client has a look on it, all the german Umlaut characters look awkward on a mac?
	And did you figure out why? It's because of the charsets and the encoding of the characters in the saved file!
&lt;/p&gt;

&lt;h2&gt;Charset?&lt;/h2&gt;

&lt;p&gt;
	Yeah, a charset! Actually a charset is the first bit you have to be aware of when you start using any kind of characters on a computer.
	Most of the time we still use &lt;a href=&quot;http://www.asciitable.com/&quot;&gt;ASCII&lt;/a&gt; with the encoding type &amp;#8220;Latin-1&amp;#8221;, where every character is encoded by using 8 bit, means 1 byte, means 256 charachters.
	Obviously this doesn't cover all european languages, that's why, when using ASCII some characters have to be escaped as &lt;a href=&quot;http://www.htmlhelp.com/reference/html40/entities/latin1.html&quot;&gt;entities&lt;/a&gt;.
	Or you could use another language encoding than &amp;#8220;Latin-1&amp;#8221;, there are &lt;a href=&quot;http://www.iana.org/assignments/character-sets&quot;&gt;many of them&lt;/a&gt; for languages like turkish or polish.
&lt;/p&gt;

&lt;h2&gt;Wait a minute! Did you say european?&lt;/h2&gt;

&lt;p&gt;
	Yeah, and what about asian languages? Or russian? Or chinese? I heard they had &lt;a href=&quot;http://www.logoi.com/notes/how_to_study_chinese_characters.html&quot;&gt;more than 3000 signs&lt;/a&gt;, how does that fit into those 256 possibilities?
	&lt;br /&gt;
	Here we go, good question! An you're not the first one to ask it. That's why, from the information-technology point some people moved on and created the
	&lt;a href=&quot;http://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; character set. And again there is many types of Unicode, but there is two really relevant ones: UTF-16 and UTF-8.
	Both offer 16bit encoded characters, means 65536 possible characters. Obviously this needs more memory to store it, because suddenly a page with the same amount of characters takes up twice the memory.
	That's why &lt;a href=&quot;http://www.unicode.org/versions/Unicode4.0.0/ch02.pdf#G11165&quot;&gt;UTF-8 goes a more intelligent way&lt;/a&gt; and saves ASCII as single bytes and everything beyond as double-byte. This saves memory.
&lt;/p&gt;

&lt;h2&gt;Alright, got the concept, but how do I use it?&lt;/h2&gt;

&lt;p&gt;
	If you are coding plain HTML you can put in this bit of code in the top, to ensure your browser get's it right:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;meta http-equiv=&quot;Content-type&quot; value=&quot;text/html; charset=utf-8&quot;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Once you've done that you need to save the files you worked in as UTF-8, which means that you need a text-editor that can save UTF-8, obviously. And you won't believe how rare those are!
	Anyway, BBedit or Homesite should do the job. And wordpad as well. Ohh, and for those of you that decided to stick to iso Latin-1, please put in that as charset then, rather than giving the browser the possibility to use the wrong encoding.
	For those who stick to what I said: From now on there's no need to escape german Umlaut characters or chinese signs anymore.
	&lt;br /&gt;
	And if you use PHP you can set the content-type with the header already:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;?
   header(&quot;Content-type: text/html; charset=utf-8&quot;);
 ?&amp;gt;
&lt;/pre&gt;


&lt;h2&gt;BOM trouble&lt;/h2&gt;

&lt;p&gt;
	A big trouble could be the &lt;a href=&quot;http://www.unicode.org/faq/utf_bom.html#22&quot;&gt;BOM&lt;/a&gt;, because some older browsers don't get what it means, so they put it in as characters, which has the quite painfull effect to show this on top of the pages: &lt;code class=&quot;inline&quot;&gt;ï»¿&lt;/code&gt;.
	My workaround for that would be a page saved in UTF-8, set as UTF-8 in the meta-tag, but without BOM. I know it sounds odd, and you have to find a way to do that. But once you use templates and dynamic data it might be worth the effort.
&lt;/p&gt;


&lt;h2&gt;Where does XSLT come in?&lt;/h2&gt;

&lt;p&gt;
	I think that UTF-8 starts really making sense when you start using XML and XSLT. Because suddenly, whithin XSL, you can define the output-encoding:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;xsl:output method=&quot;html&quot; indent=&quot;no&quot; encoding=&quot;utf-8&quot;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	The good thing is, that no matter which encoding the XML has, the output will be transformed into UTF-8.
	Or, if you want to have a special language-encoding like iso-8551-9 for example, you can feed UTF-8 data via XML into the transformation process
	and get the correct encoding out.
&lt;/p&gt;

&lt;h2&gt;Server stuff&lt;/h2&gt;

&lt;p&gt;
	It starts getting really interesting when a database comes on top of that. It makes perfectly sense to have a utf-8 or utf-16 compliant database, so the stored content can contain any kind of language.
	&lt;a href=&quot;http://dev.mysql.com/tech-resources/articles/4.1/unicode.html&quot;&gt;MySQL supports utf-8 since the version 4.1&lt;/a&gt;, The SQL-Server from Microsoft has a built-in UTF-16 support (nvarchar, ntext).
	&lt;br /&gt;
	The sad bit is that in PHP dealing with different encodings is not really big fun, but the &lt;a href=&quot;http://uk2.php.net/iconv&quot;&gt;iconv extension&lt;/a&gt; makes it possible to convert encodings.
	In ASP the support for codepages is much stronger integrated and it is just one line of code to set the &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/iis/ref_vbom_sesopcp.asp&quot;&gt;codepage that ASP works with internally&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/iis/ref_vbom_resopch.asp&quot;&gt;the charset it outputs the data with&lt;/a&gt;.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>CSS is Worthless</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/css-is-worthless/index.html"/>
      <updated>2006-06-06T08:22:51+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/css-is-worthless/css-is-worthless</id>
      <content type="html">&lt;p&gt;CSS does not make a site accessible. CSS does not make your site rank higher in search engines.
Good CSS does not make you an elite web programmer. I don't code CSS. CSS is misunderstood.&lt;/p&gt;

&lt;h2&gt;Misconceptions&lt;/h2&gt;
&lt;p&gt;I was looking at the HTML source of a website the other day and something a creative director
once said to me popped into my head:&lt;/p&gt;

&lt;p&gt;&lt;q&gt;I really like this site. It's a really interesting design and it's done with CSS so
it's accessible.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Wrong wrong wrong. CSS does not an accessible site make.&lt;/p&gt;

&lt;h2&gt;The forgotten basics of CSS&lt;/h2&gt;
&lt;p&gt;Let me quickly recap what cascading style sheets actually do... They allow you to redefine
the presentation of any HTML tag. This means that there is no need to be bound by how a tag displays
by default because you can change it. We can now use whatever markup makes sense and then redefine
it to fit our design. That's the key benefit of CSS – it lets you use the right HTML.&lt;/p&gt;

&lt;h2&gt;CSS is misunderstood&lt;/h2&gt;
&lt;p&gt;This is the biggest misunderstanding that I come across when trying to teach someone CSS:
They've heard that CSS is &lt;em&gt;the thing&lt;/em&gt;; it's the way web pages should be done these days. It
lets you do away with spacer gifs, achieve pixel perfect precision and carries accessibility and SEO
benefits to boot. They want to learn CSS. I have a really hard time hammering home that CSS is only
the icing and the real benefit comes from how they do the rest of their coding... And I suspect that
an awful lot of people who say they can 'do' CSS have the same problem. &lt;/p&gt;

&lt;p&gt;While consulting at a company a couple of weeks ago I was chatting to one of their developers,
trying to gauge his level with web standards, and he told me that he could do CSS1 but not CSS2. What
does that mean? I also see 'CSS2' as a requirement in a lot of job ads these days, as though knowledge of
these extra properties somehow makes for a more accomplished web developer. I do not see any distinction
(other than the obvious historical one) between CSS1 and 2 - I code my HTML properly and then use whatever
rules come to hand the redefine the behaviour of those tags to fit into the required design. &lt;/p&gt;

&lt;p&gt;A given site may not use a
single property from the &lt;a href=&quot;http://www.w3.org/TR/REC-CSS2/&quot;&gt;CSS2 spec&lt;/a&gt; but if the HTML is good it will have
all the benefits people associate with CSS.&lt;/p&gt;

&lt;h2&gt;HTML matters&lt;/h2&gt;
&lt;p&gt;Now, at the beginning of this article I said that I don't code CSS. That's not entirely true but
let me finish that sentence. I don't code CSS, I code semantic HTML. I happen to use CSS to restyle that
HTML, to make it look the way I want, but that's an aside. &lt;strong&gt;I only use CSS because I use semantic HTML&lt;/strong&gt;. I
use HTML tags for their &lt;em&gt;appropriateness for the information they contain&lt;/em&gt; (instead of for how they look) so I have to
&lt;em&gt;redefine&lt;/em&gt; how they behave.&lt;/p&gt;

&lt;p&gt;Almost all of the benefits people normally attribute to CSS are actually down to the underlying (X)HTML.
The better your markup, the better sense machines will be able to make of it – that includes both screenreaders
and search engine spiders. &lt;/p&gt;

&lt;p&gt;A bit of care and attention to what your page's markup actually means will go a long way. I'm not saying
that everyone should agonise over whether to use a definition list or an unordered list for navigation – pedantry aside, either
will do pretty well, but it pays to think about the content you are wrapping up. Do the headers go
sequentially from &lt;code&gt;h1&lt;/code&gt; down? Are your lists in &lt;code&gt;ol&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;dl&lt;/code&gt;s? Are you using
&lt;code&gt;div&lt;/code&gt; elements unnecessarily? Is there
something more meaningful you could use instead? I get the bulk of my HTML done before I touch the CSS – if it
makes sense &lt;a href=&quot;http://www.dustindiaz.com/naked-day/&quot;&gt;naked&lt;/a&gt; then I'm on the right track.&lt;/p&gt;

&lt;h2&gt;Turning it around&lt;/h2&gt;
&lt;p&gt;HTML can make a site accessible. HTML can make your site rank higher in search engines. Good HTML can make
you an elite web programmer. HTML is misunderstood.&lt;/p&gt;

&lt;h2&gt;Read on&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.456bereastreet.com/archive/200605/writing_good_html_is_a_craft/&quot;&gt;Writing good HTML is a craft&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.clagnut.com/blog/228/&quot;&gt;Mark-up tactics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.simplebits.com/bits/simplequiz/&quot;&gt;SimpleQuiz&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://bazzinet.info/Semantic&quot;&gt;Semantic HTML (or: Search Engine Optimization (SEO) Made Easy)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.garrettdimon.com/archives/front-end-architecture-markup-is-the-technical-foundation&quot;&gt;Front-End Architecture: Markup is the Technical Foundation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://diveintomark.org/archives/2002/12/29/million_dollar_markup&quot;&gt;Million dollar markup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>Narrative JavaScript</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/narrative-javascript/index.html"/>
      <updated>2006-06-05T03:56:47+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/narrative-javascript/narrative-javascript</id>
      <content type="html">	&lt;p&gt;This is an extension to javascript that will be compiled into javascript afterwards, and helps you to write readable code by introducing the &amp;#8220;blocking&amp;#8221; operator (notated as &amp;#8217;-&gt;&amp;#8217;).&lt;/p&gt;

	&lt;p&gt;It turns out that the blocking operator gets translated into javascript that heavily uses so called &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation_passing_style&quot;&gt;continuation passing style&lt;/a&gt;. This principle allows you to keep the context of callbacks by gathering the context data and writing the exectution into a callstack.&lt;/p&gt;

	&lt;p&gt;Quite an interesting concept that is and for sure the only compiled javascript aplication I ever heard of. Definitely will have a deeper look at this soon.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>IE7 and its problems</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ie7-and-its-problems/index.html"/>
      <updated>2006-06-01T09:24:53+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ie7-and-its-problems/ie7-and-its-problems</id>
      <content type="html">	&lt;p&gt;As Mike was busy doing this already on his blog &lt;a href=&quot;http://www.donotremove.co.uk/weblog/fixing-donotremove-for-ie7/&quot;&gt;donotremove.com&lt;/a&gt; I quickly debugged our site for the public IE7 beta 2 that came out today.&lt;/p&gt;

	&lt;p&gt;Like Mike pointed out correctly, most problems are gone once you updated the &lt;a href=&quot;http://positioniseverything.net/easyclearing.html&quot;&gt;clearfix hack&lt;/a&gt; for IE7.&lt;/p&gt;

	&lt;p&gt;This is done by creating a file that contains&lt;/p&gt;

&lt;pre&gt;
.clearfix
{
    zoom: 1;
}
&lt;/pre&gt;

	&lt;p&gt;and include it with &lt;a href=&quot;http://msdn.microsoft.com/workshop/author/dhtml/overview/ccomment_ovw.asp&quot;&gt;conditional comments for IE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!--[if gte IE 6]&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot;
href=&quot;../css/ie_standard.css&quot; /&amp;gt;
&amp;lt;![endif]--&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;I spent about 45 minutes to walk through a couple of old project websites and this pretty much always did the trick. The only exceptions I came accross were when the &lt;a href=&quot;http://www.info.com.ph/~etan/w3pantheon/style/starhtmlbug.html&quot;&gt;star html bug&lt;/a&gt; was used to filter out IE, i.e. on this website the backgrouds for the rounded corners did not get loaded, and I had to add in a couple of lines to tackle this behaviour.&lt;/p&gt;

	&lt;p&gt;So for the future I would recommend to use conditional comments straight away where possible.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Comments on Comments</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/comments-on-comments/index.html"/>
      <updated>2006-05-30T03:59:18+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/comments-on-comments/comments-on-comments</id>
      <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The right kind of comments to speed up the development process and enable a couple of interesting possibilities to generate documentations automatically. This article tries to reflect on the pros and cons of comments and to show some interesting possibilities for automatic comment parsing.&lt;/p&gt;

&lt;h2&gt;Comment Basics&lt;/h2&gt;
&lt;p&gt;Comments are basically regions of written characters that don't get interpreted by the PHP parser. Instead they get stripped out, and they solely are functioning as meta data. So just in case you don't know about how to embed comments into your scripts I'll just give you a quick example. In PHP there is two ways of using comments:
&lt;/p&gt;

&lt;pre&gt;
// a single line comment is preceded by a double slash
/*
A multiline comment
is enclosed by slashes
and asterisks
*/
&lt;/pre&gt;

&lt;p&gt;This style of comments is used by many other languages like Java, JavaScript or ActionScript. You will find the comments in any documentation as one of the first things mentioned, so whatever language you use, adding comments will be no problem for you.&lt;/p&gt;

&lt;h2&gt;Reasons to comment your code&lt;/h2&gt;
&lt;p&gt;When I wrote the first drafts of what would become this article I basically reflected the traditional approach on comments: Comments are a good thing, comment your code, it will be more legible, external programmers will find it more easy to get into your code, etc. Interestingly this kicked off a little discussion about coding practices and about what happens when comments are getting out of sync. Obviously wrong comments are a huge problem, and there are some people that actually consider comments as completely redundant, if not even harmful, because they will be hard to maintain once the code gets changed and therefore misleading other developers afterwards.&lt;/p&gt;

&lt;p&gt;This is quite an interesting point of view, and makes sense when the code is following naming conventions that are self explanatory and obvious, a state of coding that every coder should aim for.&lt;/p&gt;

&lt;p&gt;On the other hand many people still feel the need for comments. Many feel that after a certain amount of time they can find their own thoughts being reflected in the comments more than in the raw code, and it helps them to quickly amend parts of the code without having to read it all.&lt;/p&gt;

&lt;p&gt;Not sure what this conflict of beliefs would do to my article I did a little google research to find out more. I turns out that this discussion is not only going on within the CwS team, but all along the developers community (&lt;a href=&quot;http://groups.google.co.uk/group/comp.programming/browse_frm/thread/e9e433ce84a1f290/18e831b2491f8ad3?tvc=1&amp;amp;q=%22leave+out%22+code+comments&amp;amp;hl=en#18e831b2491f8ad3&quot;&gt;example&lt;/a&gt;), especially when it comes to extreme programming. &lt;/p&gt;

&lt;p&gt;Pragmatic as I am I think I'll stick with what the &lt;a href=&quot;http://www.dagbladet.no/development/phpcodingstandard/#comments&quot;&gt;PHP coding standards&lt;/a&gt; say:&lt;br /&gt;
&lt;em&gt;&amp;#8220;Comments should document decisions.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This means that comments should be applied within the code once the code itself is not sufficient enough to explain &lt;strong&gt;why&lt;/strong&gt; it does what it does. This also means comments within the code that are redundant should be avoided. As exceptions from the &amp;#8220;avoid redundant comments&amp;#8221; rule I would recommend anyone to use comments for Debugging, Gotchas and Automated Documentation, some applications that at the end of the discussion the members of CwS pretty much could agree on.&lt;/p&gt;

&lt;h2&gt;Comments and debugging&lt;/h2&gt;

&lt;p&gt;In the middle of development process commenting code to temporarily switching and and off whole blocks is extremely helpful. It avoids deleting parts of the scripts and then by accident (your application crashed, you forgot to save the file, etc) having to rewrite them because the undo function of your editor didn't get you anywhere.&lt;/p&gt;

&lt;p&gt;It also is extremely helpful if you find little commented examples of the actual script usage within the script itself or if basic setting possibilities are just commented out so removing the comments enables the debugging mode, sends the emails to the test address or includes a different language library for example. People that ever edited the &lt;a href=&quot;http://www.ccl.net/cca/software/UNIX/apache/httpd.conf.3.1b1.shtml&quot;&gt;apache httpd.conf file&lt;/a&gt; know what I am talking about here and I think this is one of the most basic coding techniques to use.&lt;/p&gt;

&lt;h2&gt;Gotchas&lt;/h2&gt;
&lt;p&gt;Gotchas are embedded keywords that are used to point out potential issues or existing problems. Since they are quite easy to use with for example search and replace it is easy to quickly jump to all parts of the code marked with :TODO: or :BUG:.&lt;/p&gt;

&lt;p&gt;An interesting aspect to gotchas is the possibility to have a robot finding them automatically. Good IDE's for example would be able to find gotchas and flag up every todo that has been marked as such. Again see the &lt;a href=&quot;http://www.dagbladet.no/development/phpcodingstandard/#mge&quot;&gt;PHP coding standards&lt;/a&gt; for more on this. &lt;/p&gt;

&lt;h2&gt;Automated Documentation&lt;/h2&gt;
&lt;p&gt;One of the biggest benefits of doing your comments in a more sophisticated way is that it will enable you to use automated documentation tools.  The most common tool for PHP is PHPDocumentator or &lt;a href=&quot;http://www.phpdoc.org/&quot;&gt;PHPDoc&lt;/a&gt; which I found one of the most helpful tools ever.  The PHPDoc application derived from &lt;a href=&quot;http://java.sun.com/j2se/javadoc/&quot;&gt;JavaDoc&lt;/a&gt; and took over the same comment standards to extract html documentations out of the comments embedded into the PHP code.&lt;/p&gt;

&lt;p&gt;The same commenting standard is used by other documentation tools like &lt;a href=&quot;http://ccdoc.sourceforge.net/&quot;&gt;CcDoc&lt;/a&gt; or &lt;a href=&quot;http://phpxref.sourceforge.net/&quot;&gt;PHPXref&lt;/a&gt; and other applications like the &lt;a href=&quot;http://www.zend.com/products/zend_studio/feature_list#Phpdoc&quot;&gt;Zend Studio IDE&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;PHPDoc also can be installed as external tool in &lt;a href=&quot;http://www.plog4u.org/index.php/Using_PHPEclipse_:_Installation_:_Installing_the_phpDocumentor&quot;&gt;PHPEclipse&lt;/a&gt; and there is a variety of little plugins for other editors like &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=520&quot;&gt;VIM&lt;/a&gt; that will help you creating the PHPdoc style comments.&lt;/p&gt;

&lt;h3&gt;PHDoc in use&lt;/h3&gt;
&lt;p&gt;PHPDoc comments are very easy to apply and contain meta information embedded in &lt;a href=&quot;http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tags.pkg.html&quot;&gt;PHPDoc tags&lt;/a&gt;. Let's have a look at a comment for a class and see how PHPDoc parses comments:&lt;/p&gt;

&lt;pre&gt;
/**
  * short desc
  *
  * long desc
  * @package test
  * @author me
  * @version 1.0
  * @abstract
  * @copyright never
*/
class parclass
{
}
&lt;/pre&gt;

&lt;p&gt;As you can see the @ triggers the PHPDoc tags, and there are various tags that can apply depending on whether you document a function, a class or an include for example.  At the end of the development process the comments and PHPDoc tags can be parsed into a complete HTML documentation that will give you a full overview of every class and function in your project. If you have done the comments right during the coding process your documentation will know all required parameters, all return types and the documentation will tell a story about how the classes and functions work.&lt;/p&gt;

&lt;p&gt;To get an impression of how this looks like have a look on &lt;a href=&quot;http://phpdoc.de/phpdoc/index2.html&quot;&gt;PHPDoc documenting itself&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;XML comments in C#&lt;/h3&gt;
&lt;p&gt;Another common example of automatically generated documentation are the &lt;a href=&quot;http://msdn.microsoft.com/msdnmag/issues/02/06/XMLC/&quot;&gt;XML comments used in C#&lt;/a&gt;. &lt;/p&gt;

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// This is the summary
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;myParameter&quot;&amp;gt;The value passed&amp;lt;/param&amp;gt;
public void MyMethod(string myParameter)
{
}
&lt;/pre&gt;

&lt;p&gt;As you can see in the example above this works pretty similar to the JavaDoc/PHPDoc standard and offers a lot of flexibility by applying XSL templates to generate an HTML documentation.&lt;/p&gt;

&lt;p&gt;IDE's like &lt;a href=&quot;http://www.sharpdevelop.com/OpenSource/SD/&quot;&gt;SharpDevelop&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/vstudio/&quot;&gt;Visual Studio&lt;/a&gt; support this natively and provide &lt;a href=&quot;http://www.sharpdevelop.com/OpenSource/SD/Tour/094/XmlDocumentation.aspx&quot;&gt;code completion features&lt;/a&gt; for adding the comments to Classes and Methods.&lt;/p&gt;


&lt;h2&gt;Other uses for comments&lt;/h2&gt;
&lt;p&gt;Apart from the ones mentioned above, there might be various other possible applications for comments. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Comments&quot;&gt;Wikipedia article on comments&lt;/a&gt; for example states that syntax highlighting could be one of them, and I can think of a coupe of &lt;a href=&quot;http://centricle.com/ref/css/filters/&quot;&gt;CSS Hacks&lt;/a&gt; and various pieces of ASCII art.&lt;/p&gt;

&lt;h2&gt;Bottom line&lt;/h2&gt;
&lt;p&gt;While before writing this article I was clearly stating that comments are an essential addition to good coding style, the discussion about my first drafts made clear that I couldn't hold this up but needed to rethink my approach on how, when and why I was using comments. Quite an interesting lesson that was, and it showed once again that using your own head rather than a learned design/behavior/technique is actually a good thing. &lt;/p&gt;

&lt;p&gt;That said it becomes obvious that it's necessary to find an approach that works for the individuals involved in the development process, and if you already have found your approach on commenting code and keeping it maintainable and up to date, then in my opinion there's no need for you to change it.&lt;/p&gt;

&lt;p&gt;Personally I gained a lot since I started using generated documentations. Embedding the documentation into the source code in form of comments is probably the only way to make accurate documentations of big projects possible.&lt;/p&gt;

&lt;p&gt;If I missed out any useful applications for comments feel free to post them in ... well ... the comments ;)&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Disabling text selection</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/disabling-text-selection/index.html"/>
      <updated>2006-05-11T13:03:10+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/disabling-text-selection/disabling-text-selection</id>
      <content type="html">	&lt;p&gt;While trying to make a table behave in an Excel fashion I came across a little problem. I wanted the table to allow the user to select a range of rows with a Shift+Click&amp;#8230; The problem is that, by default, the browser will select the page&amp;#8217;s text content. This isn&amp;#8217;t something you&amp;#8217;ll want to do very often but it is possible to get around this:&lt;/p&gt;

	&lt;p&gt;Firefox can do this from your CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
table {
    -moz-user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;On the table element IE needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
the_table_node.onselectstart = function () {
    return false;
};
&lt;/code&gt;&lt;/pre&gt;



 </content>
    </entry>

    <entry>
      <title>quick MySQL nice-to-know</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/quick-mysql-nice-to-know/index.html"/>
      <updated>2006-05-11T07:41:03+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/quick-mysql-nice-to-know/quick-mysql-nice-to-know</id>
      <content type="html">	&lt;p&gt;While dealing with a project at work, I came across a couple of database issues that you all probably already know. A standard case of RTFM (by the way, nice &lt;a href=&quot;http://www.gotapi.com/&quot;&gt;reference lookup service here&lt;/a&gt; ). Nevertheless, as I never seemed to bother using them, I&amp;#8217;m sure there&amp;#8217;s some of you out there that&amp;#8217;ll find this helpful. And, er, others will probably see this as an embarrassment of mine.&lt;/p&gt;

	&lt;p&gt;First: It&amp;#8217;s proven: &lt;a href=&quot;http://experts.about.com/q/MySQL-3296/inner-join.htm&quot;&gt;INNER JOINs are more effective than cartesian products&lt;/a&gt; . I never liked this way of abbrevating INNER JOINs, so I got suspicious and looked for a good reason not to do it. Although the explanation for it is very straight forward, I&amp;#8217;m surprised that MySQL doesn&amp;#8217;t optimize or translate this internally.&lt;/p&gt;

	&lt;p&gt;Then: I have a scenario where I&amp;#8217;m working with primary and secondary keys, and I will more often than not insert 2 rows with the same ID and different secondary key(same content, 2 languages). In order to avoid checking for an item, then updating it, I first thought of using mysql_affected_rows() on an UPDATE. But this will return 0 if no changes were made, as well as if there was no row matching the filter. &lt;br /&gt;
Then I found &lt;a href=&quot;http://dev.mysql.com/doc/refman/4.1/en/insert-on-duplicate.html&quot;&gt;INSERT&amp;#8230;ON DUPLICATE KEY UPDATE&lt;/a&gt; but sadly I&amp;#8217;m stuck with MySQL 4.0. The solution came around in the form of &lt;a href=&quot;http://dev.mysql.com/doc/refman/4.1/en/replace.html&quot;&gt;REPLACE&lt;/a&gt; .&lt;/p&gt;

	&lt;p&gt;Oh so simple. It&amp;#8217;s an INSERT, and if the row is already there, it&amp;#8217;s gonna be UPDATEd. As I already have the ID from a referencing table, I can merge INSERT and UPDATE for follow up items in other languages than the default one into one REPLACE statement.&lt;/p&gt;

	&lt;p&gt;Also: Why did I always have an ID in my joint tables? stupid. In most cases it will be enough to have both foreign keys as a combined primary key.&lt;/p&gt;

	&lt;p&gt;Is everyone using this? Is it working as I expect it to work? Am I gonna run into trouble with this further down the line? Time (and maybe one or the other comment) will tell.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>CSS Framework Design Competition</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/css-framework-design-competition/index.html"/>
      <updated>2006-05-02T08:29:07+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/css-framework-design-competition/css-framework-design-competition</id>
      <content type="html">	&lt;p&gt;I meant to post about this a couple of weeks ago but I completely forgot&amp;#8230; I hope I&amp;#8217;m not too late. There&amp;#8217;s a &lt;a href=&quot;http://raibledesigns.com/page/rd?entry=css_framework_design_contest_only&quot;&gt;design competition&lt;/a&gt; going on over at Raible Designs for AppFuse templates. Why do I care? They are using the CwS &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/17/a-css-framework/&quot;&gt;CSS Framework&lt;/a&gt; as the base. I&amp;#8217;m chuffed that people are using it and excited to see what people can come up with!&lt;/p&gt;

	&lt;p&gt;There&amp;#8217;re some nice prizes in the offing for the winners: an iPod (60GB), an iPod (30GB) and a 2GB Nano.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Offtime, moving and some changes</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/offtime-moving-and-some-changes/index.html"/>
      <updated>2006-04-25T11:41:37+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/offtime-moving-and-some-changes/offtime-moving-and-some-changes</id>
      <content type="html">	&lt;p&gt;Ok, some might have noticed that this site was offline for a couple of days. That is because our previous host, hostgator.com, didn&amp;#8217;t like the site on a reseller hosting as it was causing a bit of load. So they decided to move it to a slow dedicated server and give us a very short period of time to change to another hosting plan or be switched off, and on top of that they managed to fuck up the site and all of our email during this stunt. &lt;/p&gt;

	&lt;p&gt;So I decided to get a cheap dedicated solution. After a quick google I wanted to go with server4you.de and get a virtual dedicated server. I submitted the order and then I didn&amp;#8217;t hear from &amp;#8216;em for a long long time. That long, in fact, that I cancelled the contract with them before it even started. &lt;/p&gt;

	&lt;p&gt;I used google again, this time I looked for service and good reviews.&lt;br /&gt;
Now we&amp;#8217;re with &lt;a href=&quot;http://www.servint.net&quot;&gt;ServInt&lt;/a&gt;. They managed to get a server up in less than half a day, and I must say this rocks.&lt;/p&gt;

	&lt;p&gt;I used this occasion to change a couple of things on the site:&lt;/p&gt;

	&lt;ul&gt;
	&lt;li&gt;The pretty meaningless categories got binned&lt;/li&gt;
		&lt;li&gt;A blog section has been opened&lt;/li&gt;
		&lt;li&gt;The homepage welcome will be a blog entry&lt;/li&gt;
	&lt;/ul&gt;

	&lt;p&gt;Let me know how U like these changes and expect us to be a bit more active in here, even if it might be no article but just a small blog entry.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>php: array_filter and callback function</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-arrayfilter-and-callback-function/index.html"/>
      <updated>2006-04-20T09:48:47+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-arrayfilter-and-callback-function/php-arrayfilter-and-callback-function</id>
      <content type="html">	&lt;p&gt;Sometimes array_pop is just not enough. You might have to strip out something from an array that is 2 dimensional or do some more complicated adjustments to the array values. In this case you can use array_filter and a callback function.&lt;/p&gt;

	&lt;p&gt;The following example is class based:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;?
class test
{
  function test()
  {
    $arr = array();
    $arr[] = array('ID' =&amp;gt; 1, 'name' =&amp;gt; 'first');
    $arr[] = array('ID' =&amp;gt; 2, 'name' =&amp;gt; 'second');

    print_r($arr);
    $arr = array_filter($arr, array(&amp;#38;$this, &quot;filter&quot;));
    print_r($arr);
  }

  function filter($var)
  {
    return($var['name'] != 'first');
  }
}

$test = new test();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


 </content>
    </entry>

    <entry>
      <title>AJAX Training from Clearleft</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/ajax-training-from-clearleft/index.html"/>
      <updated>2006-04-17T10:16:33+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/ajax-training-from-clearleft/ajax-training-from-clearleft</id>
      <content type="html">	&lt;p&gt;Jeremy Keith is giving another of his &lt;a href=&quot;http://www.clearleft.com/services/training/ajax.php&quot;&gt;Ajax training workshops&lt;/a&gt;, this time up in Manchester. I was lucky enough to be in attendance for his London one and much fun was had by all. I really like Jeremy&amp;#8217;s approach to the subject &amp;#8211; it&amp;#8217;s very much bottom-up, giving you a solid base from which to build in your own time. &lt;/p&gt;

	&lt;p&gt;Predictably, he links Ajax-style coding to DOM scripting, under the catchy name of &lt;a href=&quot;http://domscripting.com/blog/display/41&quot;&gt;Hijax&lt;/a&gt;, which really appeals to my sense of style and best practice. My first shot at Ajax was my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/38/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps/&quot;&gt;Fixing the Back Button&lt;/a&gt; article here on CwS and I used a similar approach. Now people are starting to ask about &lt;a href=&quot;http://muffinresearch.co.uk/archives/2006/03/13/notes-web-21-making-web-20-accessible/&quot;&gt;accessibility in Web 2.0 apps&lt;/a&gt; I&amp;#8217;m expecting more and more people to start thinking this way.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>XSL and DTD</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xsl-and-dtd/index.html"/>
      <updated>2006-04-12T10:05:43+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xsl-and-dtd/xsl-and-dtd</id>
      <content type="html">	&lt;p&gt;A quick code snippet to include the right XHTML DTD in your XSL generated output. This took me a bit of reseach to find out:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;xsl:text disable-output-escaping=&quot;yes&quot;&amp;gt;
&amp;lt;![CDATA[&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;]]&amp;gt;
&amp;lt;/xsl:text&amp;gt;
&lt;/pre&gt;

	&lt;p&gt;Include this into you template and switch the output method to &amp;#8220;xsl&amp;#8221; and you should be fine.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Mono sounds Sharp</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/mono-sounds-sharp/index.html"/>
      <updated>2006-04-10T06:58:12+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/mono-sounds-sharp/mono-sounds-sharp</id>
      <content type="html">	&lt;p&gt;If platform specifications change sometimes one has to make the descision if the app needs to be ported or if there is another way. My research about porting .Net applications reveals a surprisingly great range of Open Source tools.&lt;/p&gt;

	&lt;p&gt;This starts with the IDE I am using for coding my C# application, the really well done &lt;a href=&quot;http://www.sharpdevelop.com/OpenSource/SD/&quot;&gt;SharpDevelop&lt;/a&gt;  that after a while I find very easy to use.&lt;/p&gt;

	&lt;p&gt;But for all the .Net newbies: Compiling a binary DLL in .Net doesn&amp;#8217;t mean that it&amp;#8217;s a windows dead end automatically. Especially for non-GUI applications (i.e. CLI or Web applications) it might work to just execute the DLL with &lt;a href=&quot;http://www.mono-project.com/Main_Page&quot;&gt;mono&lt;/a&gt;, &lt;a href=&quot;http://www.apacheworld.org/modmono/&quot;&gt;mod_mono&lt;/a&gt; or &lt;a href=&quot;http://www.go-mono.com/archive/xsp-0.10.html&quot;&gt;XSP&lt;/a&gt;.&lt;/p&gt;

	&lt;p&gt;At least it won&amp;#8217;t be a big effort to port applications for mono most of the times, and since mono is so close to .Net there obviously is a mono port of SharpDevelop: &lt;a href=&quot;http://www.monodevelop.com/Main_Page&quot;&gt;MonoDevelop&lt;/a&gt;, which should run on most UNIX/Linux platforms (and MacOSX, even though I didn&amp;#8217;t get my head around installing it properly), once all dependencies are installed.&lt;/p&gt;

	&lt;p&gt;This road is not a one way track, either:&lt;br /&gt;
For all those people who want to improve the performance of PHP scripts and don&amp;#8217;t worry about using .Net or mono, the &lt;a href=&quot;http://www.php-compiler.net/&quot;&gt;Phalanger Compiler&lt;/a&gt; might be the way to go.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Emergent design</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/emergent-design/index.html"/>
      <updated>2006-04-07T06:32:25+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/emergent-design/emergent-design</id>
      <content type="html">	&lt;p&gt;Pascal mentioned it in his &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Blog/89/php-unit-testing-tutorial/&quot;&gt;Unit testing tutorial post&lt;/a&gt; but emergent design has changed the way I see coding&amp;#8230; I work with Marcus (&lt;a href=&quot;http://www.lastcraft.com&quot;&gt;lastcraft&lt;/a&gt;) and he&amp;#8217;s had his work cut out for him converting me, but I&amp;#8217;m now a born again test driven designer. I&amp;#8217;ve also started to apply the same philosophy to loads of other things. I&amp;#8217;m slowly moving over the the &lt;a href=&quot;http://www.43folders.com/2004/09/08/getting-started-with-getting-things-done/&quot;&gt;Getting things Done&lt;/a&gt; way of thinking and I let my designs evolve the same way. I&amp;#8217;ve even started using a bulldog clip and index cards as a note pad&amp;#8230;&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Relaunch: DoNotRemove</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/relaunch-donotremove/index.html"/>
      <updated>2006-04-03T11:19:52+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/relaunch-donotremove/relaunch-donotremove</id>
      <content type="html">	&lt;p&gt;The homepage of Content with Style author Mike Stenhouse, to be found at &lt;a href=&quot;http://www.donotremove.co.uk&quot;&gt;www.donotremove.co.uk&lt;/a&gt;, just got a huge makeover. We must say it looks stunning. Congratulations Mike!&lt;/p&gt;

	&lt;p&gt;Mike, by the way, is the quy who is responsible for the CwS design and CSS as well as for the biggest numbers of visitors in the articles section. &lt;br /&gt;
Pay him a visit on his website to find out more.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>PHP Unit testing tutorial</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/php-unit-testing-tutorial/index.html"/>
      <updated>2006-04-03T05:45:48+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/php-unit-testing-tutorial/php-unit-testing-tutorial</id>
      <content type="html">	&lt;p&gt;During the research for my upcoming article about comments and code I came accross this &lt;a href=&quot;http://www.lastcraft.com/first_test_tutorial.php&quot;&gt;interesting tutorial on unit testing&lt;/a&gt;.&lt;br /&gt;
It gives you a quick insight into how test driven design works with &lt;a href=&quot;http://simpletest.sourceforge.net/&quot;&gt;SimpleTest&lt;/a&gt; and PHP.&lt;/p&gt;

	&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Extreme_Programming&quot;&gt;Extreme Programming&lt;/a&gt; (XP), one of the latest and most radical approaches on software development, is gaining a lot of attention (and causes &lt;a href=&quot;http://groups.google.co.uk/group/comp.programming/browse_frm/thread/e9e433ce84a1f290/18e831b2491f8ad3?tvc=1&amp;#38;q=%22leave+out%22+code+comments&amp;#38;hl=en#18e831b2491f8ad3&quot;&gt;a couple of interesting discussions&lt;/a&gt; as well) in the developers world right now and test driven design is one of the core techniques of XP. For XP newbies like me this might be a good starting point.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>Faster website moving with lftp</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/faster-website-moving-with-lftp/index.html"/>
      <updated>2006-04-01T09:00:36+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/faster-website-moving-with-lftp/faster-website-moving-with-lftp</id>
      <content type="html">	&lt;p&gt;Consider &lt;a href=&quot;http://lftp.yar.ru/get.html&quot;&gt;lftp&lt;/a&gt; to be the better alternative to ftp when it comes to moving your website. Unlike the standard ftp command line client it had the function &amp;#8220;mirror&amp;#8221;. &lt;br /&gt;
And that is a dead handy one when you don&amp;#8217;t want to ftp your whole website down to your machine and back to the new host &amp;#8230;&lt;/p&gt;

	&lt;p&gt;After grabbing the source from the &lt;a href=&quot;ftp://ftp.cs.tu-berlin.de/pub/net/ftp/lftp/&quot;&gt;german mirror site&lt;/a&gt; I compiled the program with the usual linux commands (./configure, make, make install).&lt;/p&gt;

	&lt;p&gt;Then move to the HTML folder on the new machine, type &lt;code&gt;lftp -u myuser myhost&lt;/code&gt; to log onto the FTP server. There, move to the directory that you wanna grab and then type &lt;code&gt;mirror .&lt;/code&gt; and that&amp;#8217;s it.&lt;/p&gt;


 </content>
    </entry>

    <entry>
      <title>EXSLT</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/exslt/index.html"/>
      <updated>2006-03-30T11:01:55+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/exslt/exslt</id>
      <content type="html">	&lt;p&gt;EXSLT is an extension kit for XSL. A collection of templates that can be used within an XSL transformation to perform mathematic operation, string manipulations or working with reg-exp.&lt;/p&gt;

	&lt;p&gt;Quite a powerful toolkit for any skilled XSL coder.&lt;br /&gt;
The templates just get included into the XSL, their namespaces get declared and then the functions and templates are available for use like normal XSL functions.&lt;/p&gt;

	&lt;p&gt;EXSLT also contains a couple of functions that emulate XSL functions only availble for newer parsers, such as string-tokenize.&lt;/p&gt;

	&lt;p&gt;More information and package downloads available at &lt;a href=&quot;http://www.exslt.org&quot;&gt;exslt.org&lt;/a&gt;.&lt;/p&gt;




 </content>
    </entry>

    <entry>
      <title>Clean URLs for a better search engine ranking</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/clean-urls-for-a-better-search-engine-ranking/index.html"/>
      <updated>2006-02-28T04:22:26+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/clean-urls-for-a-better-search-engine-ranking/clean-urls-for-a-better-search-engine-ranking</id>
      <content type="html">&lt;p&gt;
    Search engines are often key to the successful promotion and running of your website, with high traffic making or breaking your online
    business. To maximise the visibility of your site in the organic listings of the biggest search engines it is important to strategically work
    out how &lt;a href=&quot;http://www.wordtracker.com/academy-articles-ultimate-primer.html&quot;&gt;keywords&lt;/a&gt; are used.

	&lt;br /&gt;
	&lt;br /&gt;

	While link building (placing links to the site or from the site) and, most importantly, writing useful content form the foundation of search engine rankings,
	some careful attention to how your site treats &lt;a href=&quot;http://en.wikipedia.org/wiki/URL&quot;&gt;URLs&lt;/a&gt; will influence its ranking massively.
&lt;/p&gt;


&lt;h2&gt;URLs&lt;/h2&gt;


&lt;h3&gt;The messy ones&lt;/h3&gt;

&lt;p&gt;
	Most big websites are rendered out of a database and it is very rare to find systems generating the pages statically onto a webserver
	to save processing power. Most small to mid-range CMS make use of on-the-fly rendering and the same applies to most of the tailor-made
	dynamic sites I've seen so far.
	&lt;br /&gt;
    The most common ways of passing information between these dynamic pages are:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In a cookie&lt;/li&gt;
	&lt;li&gt;In a session&lt;/li&gt;
	&lt;li&gt;In the host-header (POST)&lt;/li&gt;
	&lt;li&gt;In a the URL as a querystring (GET)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
	The last one mentioned is by far the most common.
	It's also the only way that variables passed to an application can be bookmarked and sent by email to other people,
	since cookies and sessions are bound to the specific computer and browser.
	But let's have a look how a URL works:
&lt;/p&gt;

&lt;pre&gt;
  protocol://myserver/folder/file.ext?queryvariable=value#anchorname
&lt;/pre&gt;

&lt;p&gt;
    Historically, search engines were not able to spider links with querystring parameters because of page rendering speeds and so-called
    spider traps. Today, most of the big search engine spiders will follow these untidy links, doing their best to strip out the portions that
    can cause them trouble. Forcing them to do this, however, makes one of the most common and easy techniques, the GET method and the use
    of the GET array in various scripting languages, the worst coding technique when it comes to search page rankings.
	&lt;br /&gt;
	A URL like this is not ideal for most search engines:
&lt;/p&gt;

&lt;pre&gt;
  http://myserver/folder/file.php?pageid=230
&lt;/pre&gt;


&lt;h3&gt;The clean ones&lt;/h3&gt;

&lt;p&gt;
	Therefore the first step to improve your URLs would be to move information needed to trigger the page rendering into another part of the URL...
	Something similar to these:
&lt;/p&gt;

&lt;pre&gt;
  http://myserver/folder/230/file.php

  http://myserver/folder/230.php

  http://myserver/GUID_whatever_230.php
&lt;/pre&gt;


&lt;h3&gt;The meaningful ones&lt;/h3&gt;

&lt;p&gt;
	But this still is not the ideal URL. Not for people who have to type it in, nor for search engine rankings, since it doesn't contain
	any meaningful keywords. An ideal example would look more like this:
&lt;/p&gt;

&lt;pre&gt;
  http://myserver/this/url/is/stuffed/with/keywords/index.htm
&lt;/pre&gt;

&lt;p&gt;
	As you can see, this is more legible than any kind of cryptic ID. It is far more easy to remember for human visitors and
    it is keyword rich for search engines as well.
	Google pays especially close attention to the keywords within the URL, and they can, if they match what can be found in the content,
	drastically improve the ranking. I suggest you try to think of a system that logically makes sense and that represents the path to your page,
	similar to a &lt;a href=&quot;http://www.webdesignpractices.com/navigation/breadcrumb.html&quot;&gt;breacrumb navigation&lt;/a&gt; maybe.
	&lt;br /&gt;
	A nice article about dirty and clean URLs can be found on the website of &lt;a href=&quot;http://www.port80software.com/support/articles/nextgenerationurls&quot;&gt;Port80 Software&lt;/a&gt;.
&lt;/p&gt;




&lt;h2&gt;Technique&lt;/h2&gt;

&lt;h3&gt;How to rewrite URLs&lt;/h3&gt;

&lt;p&gt;
	Now that we have worked out how a good URL should look we can actually rethink the way our web-application renders pages.
	It's obvious that we need to point the URLs that contain the information to the same file that contained the script
    dealing with the query string.

	&lt;br /&gt;
	There are a couple of ways to do this: Apache's &lt;a href=&quot;http://www.evolt.org/article/Making_clean_URLs_with_Apache_and_PHP/18/22880/&quot;&gt;Force Type&lt;/a&gt; for example,
	with others for &lt;a href=&quot;http://www.aspnetworld.com/articles/2004011901.aspx&quot;&gt;ASP and .Net&lt;/a&gt;, but with PHP and Apache the most comnmon technique to rewrite URLs is the
	Apache module &lt;a href=&quot;http://httpd.apache.org/docs/1.3/mod/mod_rewrite.html&quot;&gt;mod_rewrite&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;What is mod_rewrite?&lt;/h3&gt;

&lt;p&gt;
	Basically, mod_rewrite is a module for Apache that provides an engine that is able to rewrite URLs to other locations using regular expressions.
	It is not activated in Apache by default though, and if you run your website on a shared hosting server you might have to ask your hosting
	provider to get it up and running for you.
	&lt;br /&gt;
	To get yourself right into the sytax for URL rewriting I recommend reading &lt;a href=&quot;http://www.sitepoint.com/article/guide-url-rewriting&quot;&gt;A Beginner's Guide to URL Rewriting&lt;/a&gt;
	on &lt;a href=&quot;http://www.sitepoint.com&quot;&gt;sitepoint.com&lt;/a&gt; and the &lt;a href=&quot;http://httpd.apache.org/docs/2.0/misc/rewriteguide.html&quot;&gt;URL Rewriting Guide&lt;/a&gt; written by &lt;a href=&quot;http://engelschall.com/&quot;&gt;Ralf S. Engelschall&lt;/a&gt;,
	the guy who wrote the module.
&lt;/p&gt;

&lt;h3&gt;Rewrite rules and htaccess files&lt;/h3&gt;

&lt;p&gt;
	Usually you would define a rewrite rule in an htaccess file put into the roots folder of your site.
    I'm just giving a little example here rather than going into too much detail.
	Please check the comments to see what each line does.
&lt;/p&gt;

&lt;pre&gt;
RewriteEngine On                          # activate mod_rewrite

RewriteCond %{REQUEST_URI} ^/admin.* [OR] # if in folder admin
RewriteCond %{REQUEST_FILENAME} -f [OR]   # or if the request is a real file
RewriteCond %{REQUEST_FILENAME} -d        # or if an existing directory
RewriteRule ^(.+) - [PT,L]                # then leave the URL as it is

RewriteRule ^(.*) myscript.php            # else rewrite is to myscript.php
&lt;/pre&gt;

&lt;p&gt;
	A more detailed introduction to Rewrite rules can be found on the
	&lt;a href=&quot;http://httpd.apache.org/docs/1.3/misc/rewriteguide.html&quot;&gt;manual pages of mod_rewrite&lt;/a&gt;.
	Even a quick look will show you that mod_rewrite offers a sophisticated toolkit for rewriting URLs including
	the search for files in multiple locations and even time-dependent rewriting. Clean URLs
	are only one of many reasons to get amiliar with mod_rewrite.
&lt;/p&gt;


&lt;h2&gt;Fancy an example now?&lt;/h2&gt;

&lt;p&gt;
	Enough of the theory. Now that we've found out how to rewrite URLs to a specific files I want to give a quick and very simple example
	of how I tweaked old code quickly and efficiently using mod_rewrite and a bit of code. Afterwards my PHP application
	was capable of handling clean URLs instead of GET parameters... and the whole thing took me just half an hour.
&lt;/p&gt;

&lt;h3&gt;The old URL&lt;/h3&gt;

&lt;p&gt;
	In the existing application the rendering output got triggered by the GET parameter &quot;page_id&quot;
&lt;/p&gt;

&lt;pre&gt;
http://server/index.php?page_id=100
&lt;/pre&gt;

&lt;h3&gt;The new URL&lt;/h3&gt;

&lt;p&gt;
	The pattern for a quick tweak I worked out uses the set prefix &quot;page&quot;, then the page_id (that before was found in the get parameter)
	and finally a modified title slug to improve the indexing.
&lt;/p&gt;

&lt;pre&gt;
http://server/page/100/here+are+my+keywords
&lt;/pre&gt;

&lt;h3&gt;Three lines of code&lt;/h3&gt;

&lt;p&gt;
	All I needed to do was to read the page_id from the URL and assigning it to the GET variable.
	In this case I used a simple regular expression but you could use explode or any other technique.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?php
preg_match(&quot;//page/(d+)/.*+/&quot;, $_SERVER['REQUEST_URI'], $match);

if($match[1])
  $_GET['page_id'] = $match[1];
?&amp;gt;
&lt;/pre&gt;

&lt;h3&gt;Security&lt;/h3&gt;

&lt;p&gt;
	Always bear in mind that you never should trust the URL.
	As with all form inputs and GET parameters you need to escape variables taken out of the REQUEST_URI before you use them in your script,
	otherwise you're inviting script kiddies to hack your application. This is particularly important for scripts that use eval() or write values into databases,
	store files or do anything else that could cause crucial damage.
&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;
	Using clean URLs improves your site and the search engine rankings.
	It's more likely that people will be able to remember certain locations within the site.
	Your page-rank in Google is likely to go up and you stand a better chance of turning up in search engines.
	&lt;br /&gt;
	With mod_rewrite and a couple of small tweaks existing applications
	can usually be coaxed into using clean URLs.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Playing Nice with the Other CSS Kids</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/playing-nice-with-the-other-css-kids/index.html"/>
      <updated>2005-10-31T12:51:14+00:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/playing-nice-with-the-other-css-kids/playing-nice-with-the-other-css-kids</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://simon.incutio.com/&quot;&gt;Simon Willison&lt;/a&gt; recently posted to &lt;a href=&quot;http://css-discuss.incutio.com/?page=MaintainableCss&quot;&gt;css-d&lt;/a&gt; asking for peoples' thoughts on writing maintanable CSS and that got me thinking... Over the years I've had the privilege of working on some very large web standards projects in small teams of other CSS/XHTML developers, but I've also spent a lot of time building little sites on my own for smaller clients. Maintenance on a small project involves being able to understand your own code when you come back to it months later. On larger projects it means your team mates being able to understand and edit your code as quickly and efficiently as possible at any point in the future. It's a far more complicated objective.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/17/a-css-framework&quot;&gt;CSS Framework&lt;/a&gt; and &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/12/modular-css&quot;&gt;Modular CSS&lt;/a&gt; articles touched on maintainability but here I am going to expand on those ideas, and attempt to suggest some guidelines  to make team CSS coding and maintenance easier.&lt;/p&gt;

&lt;h2&gt;Bite sized pieces&lt;/h2&gt;
&lt;p&gt;If you have read my previous articles you will already know that I favour breaking my CSS down into &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/12/modular-css&quot;&gt;manageable pieces&lt;/a&gt;. I started doing this back in early 2003 when I coded the first few versions of &lt;a href=&quot;http://business.gov.uk&quot;&gt;business.gov.uk&lt;/a&gt; with 3 other developers at &lt;a href=&quot;http://www.nykris.com&quot;&gt;Nykris (now defunct)&lt;/a&gt;. In the first phase of the project I developed a base set of templates and extracted from them the core stylesheets and and an HTML framework. In subsequent phases, each member of the team then took these as their starting point, adding their own section- or page-specific CSS files. This isolated the individual pages and sections but ensured a consistent overall look. The complicated version merging that a single large file would have required was also avoided. The small section/page sheets had a defined purpose and could easily be digested by any other member of the team, requiring less orientation. &lt;/p&gt;

&lt;p&gt;The major drawback to this approach comes when the client decides to make changes that effects the base files. These changes cascade through the entire site, which is great, but with so many small files following up on the new developments can get time consuming. The answer is obvious - get a detailed project specification finalised and signed off at the very beginning... But it's never that simple. Web projects are organic and like it or not the goalposts move. I don't really have an answer to this problem - I believe that there has to be some trade off between the team environment and flexibility. &lt;/p&gt;

&lt;h2&gt;Self-documenting code&lt;/h2&gt;
&lt;p&gt;The base HTML featured meaningful ids and classes, as good web standards practice suggests. This is a concept that bears a distinct similarity to ideas I've come across recently as part of the Extreme Programming methodology: the class and method names should make sense when read as a sentence, resulting in self-documenting code. The rationale is that programmers hate documentation. How many people ever read it? How many people know how to write it well? The number of times I've come to comments in code that bear no relevance to the code itself because a developer (often me!) has forgotten to update these embedded tips in his rush to get the job done... Using sensible, meaningful ids and classes is as close as we can get in HTML and CSS to this self-documentation nirvana.&lt;/p&gt;

&lt;p&gt;Take this CSS snippet:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;div#content div#main p.intro&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Anyone can look at that, figure out what is going on and find the effected HTML in the source without any trouble. I am restyling the introductory paragraph in my main content div. Simple. In the source that is a &amp;lt;p class=&quot;intro&quot;&amp;gt; inside &amp;lt;div id=&quot;main&quot;&amp;gt; inside &amp;lt;div id=&quot;content&quot;&amp;gt;. &lt;/p&gt;

&lt;h2&gt;Sandboxing&lt;/h2&gt;
&lt;p&gt;The little snippet above also demonstrates something else... I tend to over-specify my rules. Classes and ids aren't orphaned (div#content instead of #content) and as much of the path is specified as possible (div#content div#main p.intro instead of just p.intro). Yes, this increases the size of the resulting stylesheet but when anyone else comes to look at it they will be able to see generate their own HTML from the CSS, if necessary. It makes for heavier code but far better maintainability... &lt;/p&gt;

&lt;p&gt;Over-specifying also helps to avoid name clashes later on. &lt;a href=&quot;http://css-discuss.incutio.com/?page=MaintainableCss&quot;&gt;I've heard&lt;/a&gt; this approach called 'sandboxing', which describes it very well. Sandboxing your CSS to apply to a very select set of elements and widening it only when required helps you keep a tight reign on your code as it expands. &lt;/p&gt;

&lt;p&gt;If you take a look at my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/17/a-css-framework&quot;&gt;CSS Framework&lt;/a&gt; HTML you will see that every page section is given an ID. Within those sections I tend to use classes (I'm not going to get into when to use classes vs ids here). This clearly separates the rules for each part of the page.&lt;/p&gt;

&lt;h2&gt;Controlled use of &lt;code&gt;!important&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you want sandboxing to work for you properly you should make sure that you keep away from &lt;code&gt;!important&lt;/code&gt; as much as possible. I use it almost exclusively as a debugging tool - if something isn't behaving as I expect it to, I will add &lt;code&gt;!important&lt;/code&gt; to the rules... If &lt;code&gt;!important&lt;/code&gt; cures the problem then my rule is under specified, otherwise it's something more complicated. &lt;/p&gt;

&lt;p&gt;Controlled use of &lt;code&gt;!important&lt;/code&gt; is essential when your CSS is distributed across several files. I ran into this problem on the &lt;a href=&quot;http://business.gov.uk&quot;&gt;business.gov.uk&lt;/a&gt; project while trying to set the width of an input button - for some reason it just wasn't working. After trawling  my way up through the cascade I eventually found that someone had added &lt;code&gt;width: 30px !important&lt;/code&gt; to the core forms.css file. Poor practice and wasted time.&lt;/p&gt;


&lt;h2&gt;Redundant rules&lt;/h2&gt;
&lt;p&gt;In addition to overspecifying  I also tend to reuse sets of rules. I set margins and padding as a pair even if I don't strictly need them. My most common layout problems come from unintentional inheritance so I use this redundancy to attempt to minimise the chance of this happening.&lt;/p&gt;

&lt;h2&gt;Consistent naming conventions&lt;/h2&gt;
&lt;p&gt;Over the years I have come up with a consistent vocabular for ids and class names that I reuse across projects. Most of these ids are documented in my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/17/a-css-framework&quot;&gt;CSS Framework&lt;/a&gt; article but there are a few classes that turn up again and again too - things like 'promo' for promotional spots and 'intro' for the unique styling often applied to introductory paragraphs. This is hardly rocket science but I find it helps when it comes to maintenance. Once a member of the team becomes familiar with the naming conventions they can edit the CSS without constantly having to refer to the HTML source code. &lt;/p&gt;

&lt;h2&gt;Version control&lt;/h2&gt;
&lt;p&gt;Back on the &lt;a href=&quot;http://business.gov.uk&quot;&gt;business.gov.uk&lt;/a&gt; project we used the most lo-fi of all versioning systems: Comments at the top of the code, emailed files to a single developer in charge of the CSS source (that thankless task fell to me as lead developer) and shouts of &amp;quot;You got x open?&amp;quot;. This didn't really work, creating no end of accidental overwrites, but the deadlines were so tight that we couldn't afford the time to stop and implement a proper versioning system. I would never work like that again. &lt;/p&gt;

&lt;p&gt;Since then I have become a convert to CVS. CVS is a brilliant piece of technology allowing automated versioning, diffing and merging of text files, with a more basic set of tools for binaries. This means that several people can edit the same file all their changes can be merged together automatically.&lt;/p&gt;

&lt;p&gt;CVS's successor, SVN, provides very similar functionality but with a few enhancements. On css-d Alan Stevens explained the importance of SVN to his team's workflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We do lots and lots of projects for smaller customers, and it became impossible to try to remember the details of them all. Also, customers would ask for changes, and then after everything was live would ask for roll-backs of some of the changes (&amp;quot;we want this, no we dont, we want this, no we dont...&amp;quot;). We solved the problem with Subversion (&lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;http://subversion.tigris.org/&lt;/a&gt;), an open-source version control system. We now have a history of everything that was done for a client, and it's easy to roll things back. At first it seemed like overkill, but now I can't imagine working without it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've been working with CVS on a large project for about 6 months now and I can't imagine getting by without it either.&lt;/p&gt;

&lt;h2&gt;Intelligent commenting for easy scanning&lt;/h2&gt;
&lt;p&gt;Last but not least is formatting the stylesheets for easy consumption later. A consistent format for your team's source code will allow anyone to make changes with the minimum of orientation. This is good old common sense and anyone who's ever worked on ANY programming project in a team environment will understand the benefits.&lt;/p&gt;

&lt;p&gt;I surround all id blocks with: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/* THE ID IN CAPS */
    ....
/* END THE ID IN CAPS */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all class blocks with: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/* the class in lowercase */
    ....
/* end the class in lowercase */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also indent child blocks by one extra tabs each time to give me a visual representation of the cascade and specificity.&lt;/p&gt;

&lt;p&gt;The resulting code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
/* MAIN */
    div#main {
    }
    /* intro */
        div#main p.intro {
        }
        div#main p.intro strong {
        }
    /* end intro */
/* END MAIN */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doug Bowman has suggested using what he calls &lt;a href=&quot;http://www.stopdesign.com/log/2005/05/03/css-tip-flags.html&quot;&gt;'flags' in your comments&lt;/a&gt; to aid the finding of blocks of code in large stylesheets, which are also worth considering when you come to work on your next project.&lt;/p&gt;


&lt;h2&gt;The road to maintainable team CSS&lt;/h2&gt;
&lt;p&gt;This set of guidelines is by no means the last word in the art of writing maintainable CSS but I hope it can mark the start of a broader discussion. They have worked for me on both large and small projects but I would love to hear how other people tackle the same problems. &lt;/p&gt;</content>
    </entry>

    <entry>
      <title>DOM scripting or how to keep the code clean</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/dom-scripting-or-how-to-keep-the-code-clean/index.html"/>
      <updated>2005-10-27T04:24:11+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/dom-scripting-or-how-to-keep-the-code-clean/dom-scripting-or-how-to-keep-the-code-clean</id>
      <content type="html">&lt;h2&gt;Required knowledge&lt;/h2&gt;

&lt;p&gt;
	In this tutorial I want to show up the differences between DOM-Scripting and the &amp;#8220;traditional&amp;#8221; JavaScript
	technique using event-handlers embedded into the HTML-code.
	I'll show a way to have accessible popups, and by showing how to do those, I'll explain the proper use of DOM-scripting.
	Obviously knowledge of JavaScript is required to get my explanations.
&lt;/p&gt;

&lt;h2&gt;Pseudo-format javascript:&lt;/h2&gt;

&lt;p&gt;
	So, what was the old way? Well, let's start with the very old way:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;a href=&quot;javascript:window.open('http://www.google.de',
    'popup','width=200,height=400');&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	This is really annoying! First of all it's not even a real link. The use of this pseudo-format takes away the possibility of having
	an action and a location where the link points to. So this is the very old way. And, as you can see, it's code that is not very good
	when it comes to maintaining it. So that's why for a long time we used the following stuff.
&lt;/p&gt;

&lt;h2&gt;Event handlers as HTML attributes&lt;/h2&gt;

&lt;p&gt;
	Yeah, you know what I'm talking about! I mean &amp;#8220;onclick&amp;#8221;, &amp;#8220;onmouseover&amp;#8221; and so on, embedded directly into the
	HTML-tag. So that now our tag would look like this:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;a href=&quot;#&quot; onclick=&quot;window.open('http://www.google.de',
    'popup','width=200,height=400');&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	And maybe, instead of having the whole thing in there, we'd have a function in javascript where we just pass the URL to?
	Because we open popups in the same size throughout the whole site anyway?
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

 function pop(url)
 {
  window.open(url,'popup','width=200,height=400');
 }

 &amp;lt;/script&amp;gt;

 &amp;lt;a href=&quot;#&quot; onclick=&quot;pop('http://www.google.de');&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	That would be better for maintanance, no doubt, but how about accessible? No, it's not!
	No textbased browser or no system where javascript has been turned-off could open that link.
	Now how am I going to make that accessible? Well, there's a way!
&lt;/p&gt;

&lt;h2&gt;Accessible popups&lt;/h2&gt;

&lt;p&gt;
	The way to do accessible popups is quite an overhead:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

 function pop(url)
 {
  window.open(url,'popup','width=200,height=400');
 }

 &amp;lt;/script&amp;gt;

 &amp;lt;a href=&quot;http://www.google.de&quot; target=&quot;_blank&quot;
   onclick=&quot;pop('http://www.google.de');return false;&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	How does this work? Well, first of all it's a simple link with &lt;code class=&quot;inline&quot;&gt;target=&quot;_blank&quot;&lt;/code&gt;.
	But on top of that we have an event handler with an action inside and a return statement, which quits the click-event.
	By doing this the browser quits before going to the new location, which would be in another window.
	But if javascript is off, none of this would happen and just the new location would be opened in a new window.
&lt;/p&gt;

&lt;h2&gt;Shortcut&lt;/h2&gt;

&lt;p&gt;
	Still one annoying thing, though: It's to much code to write! So my first approach would be to take a shortcut:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

 function pop(url)
 {
  window.open(url,'popup','width=200,height=400');
  return false;
 }

 &amp;lt;/script&amp;gt;

 &amp;lt;a href=&quot;http://www.google.de&quot; target=&quot;_blank&quot;
   onclick=&quot;return pop('http://www.google.de');&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	The saved amount of characters is not to big, but still, if the site is big and you can save typing &amp;#8220;false&amp;#8221; 300
	times you'll be happy about it.
	&lt;br /&gt;
	Next point is that I'm annoyed about the possibility to type &amp;#8220;www.google.de&amp;#8221; in one and a typo like
	&amp;#8220;www.gogole.de&amp;#8221; in the other part of the link. Stuff like that ALWAYS happens, and it sucks so much!
	But that's the first opportunity to use propper DOM-scripting!
&lt;/p&gt;

&lt;h2&gt;&amp;#8220;this&amp;#8221; or the link as object&lt;/h2&gt;

&lt;p&gt;
	Instead of calling the function now with a string as parameter, we'll call it with an object reference:
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

 function pop(a)
 {
  url = a.getAttribute(&quot;href&quot;);
  window.open(url,'popup','width=200,height=400');
  return false;
 }

 &amp;lt;/script&amp;gt;

 &amp;lt;a href=&quot;http://www.google.de&quot; target=&quot;_blank&quot;
   onclick=&quot;return pop(this);&quot;&amp;gt;open google&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Here it is, the link acts as object, it has a method that gives back an attribute. That is DOM (Document Object Model).
	Well, that's fine for the beginning, but still there's two things that really I consider as below the optimum:
	We have to writre the handler into each link. And we have changed the markup of the document in the HTML-area, probably many times,
	depending on how many popup-links we have.
&lt;/p&gt;

&lt;h2&gt;Some of the DOM-toolkit&lt;/h2&gt;

&lt;h3&gt;Event-handler just in javascript&lt;/h3&gt;

&lt;p&gt;
	The way to apply event-handler in javascript looks like this:
&lt;/p&gt;

&lt;pre&gt;
 window.onload = function()
 {
 	alert(&quot;window has been loaded now&quot;);
 }
&lt;/pre&gt;

&lt;p&gt;
	It is possible to apply already existing functions as well:
&lt;/p&gt;

&lt;pre&gt;
 function alertLoaded()
 {
 	alert(&quot;window has been loaded now&quot;);
 }

 window.onload = alertLoaded;
&lt;/pre&gt;

&lt;p&gt;
	The benefit obvoiusly is that we can define handler for HTML-objects without changing their markup. If we can find them, of course!
&lt;/p&gt;

&lt;h3&gt;Navigating the DOM tree&lt;/h3&gt;

&lt;p&gt;
	There are two methods to find elements, &lt;code class=&quot;inline&quot;&gt;document.getElementById()&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;document.getElementsByTagName()&lt;/code&gt;.
	Once the object has been found we can run through the tree up and down by using the object &lt;code class=&quot;inline&quot;&gt;node.parentNode&lt;/code&gt; and the array &lt;code class=&quot;inline&quot;&gt;node.childNodes&lt;/code&gt;.
	If you want to get deeper into DOM-scripting you might have a look at the &lt;a href=&quot;http://www.mozilla.org/docs/dom/domref/dom_doc_ref.html&quot;&gt;Gecko DOM interface&lt;/a&gt;.
&lt;/p&gt;

&lt;h2&gt;The tree-parsing solution&lt;/h2&gt;

&lt;p&gt;
	Let's get back back to our little example. We'll make use of &lt;code class=&quot;inline&quot;&gt;document.getElementsByTagName()&lt;/code&gt; to change all links with &lt;code class=&quot;inline&quot;&gt;target=&quot;_blank&quot;&lt;/code&gt;
	to popup-links without adding any markup to them.
&lt;/p&gt;

&lt;pre&gt;
function applyPopups()
{
  a = document.getElementsByTagName(&quot;a&quot;);

  for(i=0; i&amp;lt;a.length; i++)
  {
    if(a[i].getAttribute(&quot;target&quot;) &amp;amp;&amp;amp; a[i].getAttribute(&quot;target&quot;) == &quot;_blank&quot;)
    {
      a[i].onclick = function()
      {
        url = this.getAttribute(&quot;href&quot;);
        window.open(url,'popup','width=200,height=400');
        return false;
      }
    }
  }
}

window.onload = applyPopups;
&lt;/pre&gt;

&lt;p&gt;
	As you can see, you now don't even have the hassle of adding additional markup to your HTML-code, but can apply popup-behaviour by just importing
	one js-file in the head of the document. Splendid!
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A to Z(ee) with P3P</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-to-zee-with-p3p/index.html"/>
      <updated>2005-09-22T07:08:50+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-to-zee-with-p3p/a-to-zee-with-p3p</id>
      <content type="html">&lt;h2&gt;The Situation&lt;/h2&gt;

&lt;p&gt;
The other day I came across a weird security problem at work: While a system to customize a site's appearance worked fine in Firefox, storing the state kept failing in IE. Now, I'm not a big fan of these browser discussions and don't mind using either, but that error made me curious. I quickly found out that it was down to the company's security standard, which defaulted &lt;a href=&quot;http://msdn.microsoft.com/workshop/security/privacy/overview/privacyIE6.asp&quot;&gt;IE's privacy level&lt;/a&gt; to high-medium.
This level doesn't allow third-party cookies for permanent storage, and as the whole site was running in a Frameset for a couple of days (thank you, domain-hogging cheapie-host), the cookies used were rightly considered third party.
&lt;/p&gt;

&lt;p&gt;
They are allowed to be stored under this setting, though, when they come with a P3P (Platform for Privacy Preferences) policy. Microsoft offers a &lt;a href=&quot;http://msdn.microsoft.com/workshop/security/privacy/overview/createprivacypolicy.asp&quot;&gt;nice overview&lt;/a&gt; to what this is, but leaves you pretty much in the dark of how you actually get from A (Problem) to B (Solution). P3Ptoolbox.org, a website dedicated to P3P offers an &lt;a href=&quot;http://www.p3ptoolbox.org/guide/section3.shtml&quot;&gt;all-embracing guide&lt;/a&gt;, but the sheer amount is more off-putting than encouraging.
&lt;/p&gt;

&lt;h2&gt;What Is P3P?&lt;/h2&gt;

&lt;p&gt;
	P3P is a protocol designed to offer an &amp;quot;automated way for users to gain more control over the use of personal information on Web sites they visit&amp;quot;, states the &lt;a href=&quot;http://www.w3.org/P3P/&quot;&gt;W3C&lt;/a&gt;.
Policies are something that is used quite frequently, in the Flash and Java (J2EE) World, usually describing a set of permissions granted or revoked. P3P is an XML based policy that describes the scope or the way how the data in cookies is used. It consists of four logical parts:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;a written, and as they like to state &amp;quot;human readable&amp;quot; policy, as html-file is recommended as the easiest starting point for it all. But, hooray, if you rather track down cookie operations in your code, the policy editor will generate one for you, which you can then amend to your needs.&lt;/li&gt;
	&lt;li&gt;The policy editor helps you create the full XML privacy policy&lt;/li&gt;
	&lt;li&gt;The Policy-Reference File, again as XML, which is stored in a &amp;quot;well-known location&amp;quot;, links to the privacy policy.&lt;/li&gt;
	&lt;li&gt;The compact policy(a string of 3-letter-abbrevations), which is sent in the header of the page containing the cookie-related action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How can I build it?&lt;/h2&gt;

&lt;p&gt;
	If you look into tools for generating P3P policies, you'll find yourself in a land of darkness and badly designed websites with dollar signs. But there's light at the end of the tunnel: The &lt;a href=&quot;http://www.alphaworks.ibm.com/tech/p3peditor&quot;&gt;IBM P3P Editor&lt;/a&gt; is free, being an executable jar it's crossplatform, and if you know what you're doing, it's really easy. So what do you have to do?
&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Do your homework: the first step is, and the P3Ptools site isn't wrong with it, a thorough preparation. Does the company running the website already have a privacy policy? Does it cover all cookie-related actions as well? If not, &amp;quot;Where do you store and read out cookies?&amp;quot;, and &amp;quot;What's stored in them?&amp;quot; are the first key questions to ask. Ideally you know it beforehand, if not, an extended search over the usual cookie-dealing functions should refresh your memory.&lt;/li&gt;
	&lt;li&gt;What to do with the data? Who will be dealing with it? Once you have figured out what it is you'll need to ask yourself or, even better, your client, if they are planning to use the requested data, e.g. for stats on returning users or to find out about preferred customizations and the like. This should be (again ideally) honest, or alternatively passed by a legal department that does the juggling of the words.&lt;/li&gt;
	&lt;li&gt;Fire it up. The IBM P3P policy editor luckily generates XML and P3P strings as well as a good skeleton for the written privacy policy. All you have to do is
		&lt;ul&gt;
			&lt;li&gt;To categorise your cookies into groups and usage.&lt;/li&gt;
			&lt;li&gt;Connect them to their purpose&lt;/li&gt;
			&lt;li&gt;Add information about dispute and contact possibilities&lt;/li&gt;
			&lt;li&gt;Generate policy&lt;/li&gt;
			&lt;li&gt;Deploy: A great word which took me a while to understand, back at university. In this case, all it means is to take the generated xml and html and drop it in a folder.&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;An example&lt;/h2&gt;

&lt;p&gt;
	Let's say we set and read a cookie on the homepage that stores a unique ID for tracking reasons and retrieves preferences from the db on how the site is displayed (font size and regular/high-contrast layout, for example).
&lt;/p&gt;

&lt;p&gt;
Open up the P3P editor, choose &amp;quot;create a blank policy&amp;quot;, and you'll find a well categorized list of elements on the left, and an empty tree on the right.
&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/resources/old_images/17.gif&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
Locate and drag the data elements matching your purpose from the list into the &amp;quot;new group&amp;quot; on the right. In our case that's:&lt;/p&gt;

&lt;p&gt;
Broad Categories --&gt; unique identifier and&lt;br /&gt;
Dynamic Data --&gt; http cookie
&lt;/p&gt;

&lt;p&gt;
You can edit the group name, and you'll probably want to do it in real life situations that are more complex - in order to find grouped entries easier later on.
&lt;/p&gt;

&lt;p&gt;
When you do so, you are also asked to put down an explanation to why the data is requested and you have to decide if &amp;quot;there is no reasonable way to link this data to the visitor's real-world identity.&amp;quot; (check the help button). As users don't register on my site, they will be unique by identifier, but I won't be able to find out who they really are. The display data is anonymous anyway, so, tick the box here as well. Describe the reasons then on to the next step.
&lt;/p&gt;

&lt;p&gt;
Make your way through the tabs, I will check &amp;quot;Site customisation&amp;quot; and &amp;quot;Anonymous user tracking&amp;quot;, I offer an opt-out possibility for the site customisation, and uncheck pseudonymous decision-making, as Iâ€™m not tracking that. Recipient is just me, and as Retention I choose indefinitely.
&lt;/p&gt;

&lt;p&gt;
To the right of the tabs in the lower part of the window is a properties button, click that to add all necessary data for the website, starting with a full contact information of the person/organisation responsible for the site.
&lt;/p&gt;

&lt;p&gt;
Click on the next tab to enter a generic name for the policy and add an opt-out url (essentially a page where you can choose to get all cookies from your site deleted).
&lt;/p&gt;

&lt;p&gt;
Make sure your language selection is the right one  and add the url for your privacy policy on your website.
&lt;/p&gt;

&lt;p&gt;
The Access-tab wants you to indicate what personal data the user can view to doublecheck what's stored on your site. In my case: no identified data is collected.
&lt;/p&gt;

&lt;p&gt;
Next, let's eliminate that dispute warning: go to &amp;quot;Assurances&amp;quot;, and add a dispute.
I call it &amp;quot;all disputes&amp;quot; chose customer service as dispute remedy for &amp;quot;all disputes&amp;quot;, with a link to contact-us, to reach the customer service.
&lt;/p&gt;

&lt;p&gt;
Lastly, in the global properties, set the expiry date. I chose the same as the cookies lifetime, or up to a date when the cookie situation, and therefore the privacy policy, changes.
&lt;/p&gt;

&lt;p&gt;
The easiest way to get rid of the must-haves is to eliminate one error after the next. Click the error tab to see them.
If you have any other errors, fix them accordingly... it's most probably in your data group, or itâ€™s a conflict between your data elements, the group and global properties.
&lt;/p&gt;

&lt;p&gt;
All done? I had to add a category to my HTTP cookie. Now it looks like this:
&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/resources/old_images/18.gif&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
Save it, and go to the final step: deploy your data. For that, you'll need to generate a reference file first. Here's one that fits my example - it directs to the P3P file in all cases (include *).
&lt;/p&gt;


&lt;pre&gt;
&amp;lt;META xmlns=&amp;quot;http://www.w3.org/2000/12/p3pv1&amp;quot;&amp;gt;
 &amp;lt;POLICY-REFERENCES&amp;gt;
    &amp;lt;POLICY-REF about=&amp;quot;testsite_com.p3p&amp;quot;&amp;gt;
       &amp;lt;INCLUDE&amp;gt;*&amp;lt;/INCLUDE&amp;gt;
       &amp;lt;COOKIE-INCLUDE name=&amp;quot;*&amp;quot; value=&amp;quot;*&amp;quot; domain=&amp;quot;*&amp;quot; path=&amp;quot;*&amp;quot;/&amp;gt;
    &amp;lt;/POLICY-REF&amp;gt;
 &amp;lt;/POLICY-REFERENCES&amp;gt;
&amp;lt;/META&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
All you have to do now, is:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Save the P3P reference file in a folder called w3c in the webroot, as /w3c/p3p.xml. Feel free to &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/w3c/p3p.xml&quot;&gt;look at my example reference&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Save the P3P. You can see from how I set up the reference file that I chose to store it in the same folder, which is the easiest and most common thing. Here's my &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/w3c/testsite_com.p3p&quot;&gt;example p3p policy for download&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Every time you interact with the cookie, send the created header first. Below is an overview of how to do it for my example, taken directly from the &lt;a href=&quot;http://www.privacycouncil.com/implementation.php&quot;&gt;privacy council&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Finally: &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/p3p-example/&quot;&gt;Take a look at it&lt;/a&gt; (in IE: view--&gt;privacy report).&lt;/li&gt;
&lt;/ul&gt;


&lt;table cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; summary=&quot;Implementations for P3P compact policy example&quot;&gt;
	&lt;caption&gt;P3P compact policy implementations&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;Method&lt;/th&gt;
		&lt;th&gt;Code&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;HTML&lt;/td&gt;
		&lt;td&gt;&amp;lt;meta http-equiv=&amp;quot;P3P&amp;quot; content=&amp;quot;CP='NOI DSP NID TAIo PSAa OUR IND UNI OTC TST'&amp;quot;&amp;gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;PHP&lt;/td&gt;
		&lt;td&gt;Header(&amp;quot;P3P: CP='NOI DSP NID TAIo PSAa OUR IND UNI OTC TST'&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;ASP&lt;/td&gt;
		&lt;td&gt;Response.AddHeader &amp;quot;P3P&amp;quot;,&amp;quot;CP='NOI DSP NID TAIo PSAa OUR IND UNI OTC TST'&amp;quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;JSP&lt;/td&gt;
		&lt;td&gt;Response.setHeader(&amp;quot;P3P&amp;quot;,&amp;quot;CP='NOI DSP NID TAIo PSAa OUR IND UNI OTC TST'&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;ColdFusion&lt;/td&gt;
		&lt;td&gt;&amp;lt;cfheader name=&amp;quot;P3P&amp;quot; value=&amp;quot;CP='NOI DSP NID TAIo PSAa OUR IND UNI OTC TST'&amp;quot; /&amp;gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;
Congratulations, you made through this dry and rocky path of an article, or alternatively you found the scrollbar overly useful. I've had my doubts while writing this, about how complex it should be, and decided to go for an overview with a simple A-Z example, as my key problem was piecing it together initially.
&lt;/p&gt;

&lt;p&gt;
P3P doesn't end here though - there are many more possibilities, from setting up different policies for different parts of a website, to getting deeper into the personal data aspect (there's quite a difference in cookie handling with P3P when personal data is involved), to taking a closer look into the client side and the possibilities that P3P offers, which mostly aren't quite built into browsers yet.
&lt;/p&gt;

&lt;p&gt;
The idea of P3P is a good one, but it's flawed, as it's so far based on honesty. If I used information differently than I stated in my P3P policy, how would the user ever know?
If developers use &lt;a href=&quot;http://support.microsoft.com/default.aspx?scid=kb;en-us;323752&quot;&gt;half-hearted workarounds&lt;/a&gt; by simply adding a non-offensive P3P header, why would the user trust P3P? These are the first things that you'll ask yourself while spending time on this, but there's more elaborated critizism: the &lt;a href=&quot;http://www.epic.org/reports/prettypoorprivacy.html&quot;&gt;Electronic Privacy Information Center&lt;/a&gt; has assessed P3P and is not happy at all with it. So why do it? Given you do use cookies, 3 reasons come to mind, and they seem oddly close to web standards (looking forward to the comments):
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Because you have to:&lt;/strong&gt; I don't use cookies very much, maybe a couple of projects a year. But if I do and it doesn't work for a group of users or, even worse (*gasp*) the client, heck, I gotta make it work.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Because you would rather solve problems than work around them:&lt;/strong&gt; I never like grey areas in projects, identified ones or the ones that are brushed off. The fix-it-now-research-it-later approach usually ends in not researching it at all, and next time round you're none the smarter.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Because it makes a better website:&lt;/strong&gt; This is the moral high ground for today, but think about it: the web standards movement is something that had to happen sooner or later. Cookies aren't used as much as in the olden days, but as the basics are set and can be extended, any improvement in their handling should improve users trust in using personal data on the internet, with reasonable resonance in the future.&lt;/li&gt;
&lt;/ul&gt;</content>
    </entry>

    <entry>
      <title>Processing the output buffer with XSLT</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/processing-the-output-buffer-with-xslt/index.html"/>
      <updated>2005-07-24T18:07:12+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/processing-the-output-buffer-with-xslt/processing-the-output-buffer-with-xslt</id>
      <content type="html">&lt;h2&gt;The output buffer&lt;/h2&gt;

&lt;p&gt;
Most programmers dealing with PHP will have come across various PHP errors when trying to do a redirect after an echo
or something similar.
&lt;/p&gt;

&lt;p&gt;
The error usually looks like this:
&lt;/p&gt;

&lt;pre&gt;
Warning: Cannot add header information - headers already sent by
(output started at /directory/to/starting_file.php:XXX)
    in /directory/to/calling_file.php on line XX
&lt;/pre&gt;

&lt;p&gt;
And for many of you that will have been the only application for the function &lt;a href=&quot;http://uk2.php.net/manual/de/function.ob-start.php&quot;&gt;ob_start&lt;/a&gt;
which immediately fixes exactly these errors.
But most ignore that &lt;em&gt;ob_start&lt;/em&gt; is just one function of a whole toolkit of functions that are referred to as &lt;a href=&quot;http://uk2.php.net/manual/en/ref.outcontrol.php&quot;&gt;&amp;#8220;Output Control Functions&amp;#8221;&lt;/a&gt;,
which provide a sophisticated toolkit for controlling and manipulating the output generated by PHP.
&lt;/p&gt;

&lt;h2&gt;The callback function&lt;/h2&gt;

&lt;p&gt;
The most powerful bit in this set of functions is definitely &lt;em&gt;ob_start&lt;/em&gt; and it's optional parameter, the callback function.
This callback function will be called when the output is finally thrown. Using this it's easy to generate output and, for example, clean it afterwards with
HTML tidy, escape it, replace parts of it or replace all of it.
&lt;/p&gt;

&lt;p&gt;
To show what I mean I'll provide a little class-based script as an example:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?
class examplePage
{
  function examplePage()
  {
    ob_start(array($this,'parseOutput'));
    echo $this-&amp;gt;getExampleXML();
  }

  function parseOutput()
  {
    $str = &quot;&amp;lt;pre&amp;gt;&quot; . htmlentities(ob_get_contents()) .
        &quot;&amp;lt;/pre&amp;gt; is the XML string we get from getExampleXML()&quot;;
    return $str;
  }


  function getExampleXML()
  {
    $str = &quot;&amp;lt;root&amp;gt;&amp;lt;test&amp;gt;Teststring&amp;lt;/test&amp;gt;&amp;lt;/root&amp;gt;&quot;;
    return $str;
  }
}

$example = new examplePage();

?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
As you can see the content thrown by the echo is parsed afterwards by the &lt;em&gt;parseOutput&lt;/em&gt; method, and stuff gets added and escaped in one go.
&lt;/p&gt;



&lt;h2&gt;Layered applications&lt;/h2&gt;

&lt;p&gt;
This alone is a very powerful tool that can be used in pretty much every application that generates output with PHP, but we can push  it one step further.
&lt;/p&gt;

&lt;p&gt;
We'll use &lt;em&gt;XML as an intermediate application layer&lt;/em&gt;.
The callback function will then process the whole output and render it through an XSL transformation.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?
class examplePage
{
  function examplePage()
  {
    ob_start(array($this,'parseOutput'));
    echo $this-&amp;gt;getExampleXML();
  }

  function parseOutput()
  {
    $this-&amp;gt;xslt = xslt_create();

    $this-&amp;gt;arguments['/_xml'] = ob_get_contents();
    $this-&amp;gt;xmlDoc = 'arg:/_xml';


    $this-&amp;gt;arguments['/_xsl'] = $this-&amp;gt;getExampleXSL();
    $this-&amp;gt;xslDoc = 'arg:/_xsl';

    return xslt_process($this-&amp;gt;xslt, $this-&amp;gt;xmlDoc,
                    $this-&amp;gt;xslDoc, NULL, $this-&amp;gt;arguments);
  }


  function getExampleXML()
  {
    $str = &quot;&amp;lt;root&amp;gt;&amp;lt;test&amp;gt;Teststring&amp;lt;/test&amp;gt;&amp;lt;/root&amp;gt;&quot;;
    return $str;
  }


  function getExampleXSL()
  {
    $str = '&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
      &amp;lt;xsl:stylesheet version=&quot;1.0&quot;
	  	xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;

      &amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
        Test: &amp;lt;xsl:value-of select=&quot;//test&quot; /&amp;gt;
      &amp;lt;/xsl:template&amp;gt;

      &amp;lt;/xsl:stylesheet&amp;gt;
    ';

    return $str;
  }
}

$example = new examplePage();

?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
And here we go - dynamic processing of the XML-based application output.
This is obviously a raw example, and it needs integration in whatever framework you use, but hopefully you can see the power and flexibility of this technique.
&lt;/p&gt;


&lt;h2&gt;Outlook&lt;/h2&gt;

&lt;p&gt;
So what could this be useful for?
&lt;/p&gt;
&lt;p&gt;
In my opinion this could give some web applications a whole new twist. One possibility for the techniques described
would be to separate the presentation-related rendering process
into the step after the output. While your application is built to render XML and throw that into the PHP output,
a separate method, maybe even a separate class, could handle this output and transform it into the right format.
&lt;/p&gt;
&lt;p&gt;
The advantages are immediately obvious. Output rendering would become a reusable module and without it the application would
still output W3C-compliant XML code (&lt;em&gt;if you did everything right, that is&lt;/em&gt;).
&lt;/p&gt;

&lt;p&gt;
And again, this is just one possibility to use the callback function. Together with regular expressions or applications like
&lt;a href=&quot;http://tidy.sourceforge.net/&quot;&gt;Tidy&lt;/a&gt; you could ensure that the output of dynamic data is valid. This could be useful for all people
who use variables to pass html-content into XSL templates.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Fixing the Back Button and Enabling Bookmarking for AJAX Apps</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps/index.html"/>
      <updated>2005-06-15T09:01:57+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps</id>
      <content type="html">&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;Everyone's favourite AJAX technology app is Google Maps. Google have done a stunning job... But when I came to try to bookmark a page I had to hunt around for 'link to this page' over on the right hand side. Why have they broken such a basic function of the web? I use bookmarks A LOT and the extra effort bothered me. I got over it though, and life went on. &lt;/p&gt;

&lt;p&gt;Then I came to flick through the drop down on Kottke.org (now removed) and I kept hitting the back button on my mouse by accident, taking me off the site. Really irritating. The most fundamental online behaviour - click then back, is broken.&lt;/p&gt;

&lt;p&gt;I've not picked on these sites for any particular reason. They both happen to be great sites that I visit regularly enough to notice these flaws, which will be common to many AJAX-based applications.&lt;/p&gt;

&lt;p&gt;After a chat with &lt;a href=&quot;http://www.adactio.com&quot;&gt;Jeremy Keith&lt;/a&gt;, &lt;a href=&quot;http://www.clagnut.com&quot;&gt;Rich Rutter&lt;/a&gt; and &lt;a href=&quot;http://www.andybudd.com&quot;&gt;Andy Budd&lt;/a&gt; about exactly this problem I decided to take a shot at fixing it.&lt;/p&gt;

&lt;p&gt;Read on for the explanation or &lt;a href=&quot;http://donotremove.co.uk/extra/ajax-nav/index.html&quot;&gt;go straight to the demo&lt;/a&gt; to see it in action.&lt;/p&gt;

&lt;h2&gt;Standing on the shoulders of giants&lt;/h2&gt;
&lt;p&gt;I'm not the first person to tackle this type of problem. I've drawn inspiration and know-how from several places to get this up and running:&lt;/p&gt;

&lt;dl&gt;
    &lt;dt&gt;The original bookmark/back button fix, as used by Flash developers for a little while now:&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://www.robertpenner.com/experiments/backbutton/backbutton.html&quot;&gt;www.robertpenner.com/experiments/backbutton/flashpage.html&lt;/a&gt;&lt;/dd&gt;

    &lt;dt&gt;I've not actually looked at how they implemented their solution but this is where I got the idea for replacing Robert Penner's frames with iframes:&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://dojotoolkit.org/intro_to_dojo_io.html#so-about-that-thorny-back-button&quot;&gt;dojotoolkit.org/intro_to_dojo_io.html#so-about-that-thorny-back-button&lt;/a&gt;&lt;/dd&gt;

    &lt;dt&gt;Rich Rutter's use of the hash for bookmarking:&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://www.clagnut.com/sandbox/slideshow.html#5&quot;&gt;www.clagnut.com/sandbox/slideshow.html#5&lt;/a&gt;&lt;/dd&gt;

    &lt;dt&gt;For this little experiment I've used Harry Fuecks' &lt;a href=&quot;http://jpspan.sourceforge.net/wiki/doku.php&quot;&gt;JPSpan&lt;/a&gt; &lt;/dt&gt;
    &lt;dd&gt;It's a fantastic framework that makes the methods you define in your server-side PHP classes available to your Javascript via XmlHttpRequest. It's the simplest way I've come across to get started with AJAX. I had the guts of my demo up and running in about 10 minutes!&lt;/dd&gt;

    &lt;dt&gt;I'm using Algorithm's Timer object:&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://www.codingforums.com/archive/index.php/t-10531.html&quot;&gt;www.codingforums.com/archive/index.php/t-10531.html&lt;/a&gt;&lt;/dd&gt;

    &lt;dt&gt;And Scott Andrew's cross-browser event handler:&lt;/dt&gt;
    &lt;dd&gt;&lt;a href=&quot;http://www.scottandrew.com/weblog/articles/cbs-events&quot;&gt;www.scottandrew.com/weblog/articles/cbs-events&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Setting things up&lt;/h2&gt;
&lt;p&gt;I created a PageLocator object to act as an interface to both real querystrings and my hash pseudo-querystrings. It's nothing complicated but it allows me to access both using the same methods...&lt;/p&gt;

&lt;pre&gt;
function PageLocator(propertyToUse, dividingCharacter) {
    this.propertyToUse = propertyToUse;
    this.defaultQS = 1;
    this.dividingCharacter = dividingCharacter;
}
PageLocator.prototype.getLocation = function() {
    return eval(this.propertyToUse);
}
PageLocator.prototype.getHash = function() {
    var url = this.getLocation();
    if(url.indexOf(this.dividingCharacter) &amp;gt; -1) {
        var url_elements = url.split(this.dividingCharacter);
        return url_elements[url_elements.length-1];
    } else {
        return this.defaultQS;
    }
}
PageLocator.prototype.getHref = function() {
    var url = this.getLocation();
    var url_elements = url.split(this.dividingCharacter);
    return url_elements[0];
}
PageLocator.prototype.makeNewLocation = function(new_qs) {
    return this.getHref() + this.dividingCharacter + new_qs;
}
&lt;/pre&gt;

&lt;p&gt;I also have a setContent function that simply takes whatever you pass it and inserts it into the content container div on the page. I'm using the innerHtml property because it's really not the point of this demo. If I was doing it properly I'd probably go for something a little cleverer.&lt;/p&gt;

&lt;pre&gt;
function setContent(new_content) {
    if(!document.getElementById || !document.getElementsByTagName) return;
    var container = document.getElementById(&quot;content&quot;);
    container.innerHTML = new_content;
}
&lt;/pre&gt;

&lt;p&gt;In the spirit of 'proper' scripting my demo will work with javascript turned off. The links on the page point  to content.php, which loads the same content as the AJAX app, but server side.&lt;/p&gt;

&lt;h2&gt;It's all too easy&lt;/h2&gt;
&lt;p&gt;So, I'm trying to store the session state in the address bar to allow bookmarking. What can be changed in the URL that won't trigger a page reload? The hash portion. So what I need to do is add my AJAX application's parameters after a #. &lt;/p&gt;

&lt;p&gt;There is an additional benefit to this approach: When you click on page anchors, these points are added to the browser's history object so that when you press the back button you're taken back to these points within the same page. That's important because items are being added to the history without leaving the current page. &lt;/p&gt;

&lt;p&gt;To make use of this behaviour I wrote written a simple DOM script to change the links on my page into # anchors, with the # portion containing the argument that would have been passed to content.php (the server-side equivalent of this app). This effectively maps the real querystring to a hash pseudo querystring.&lt;/p&gt;

&lt;p&gt;Now when the links are clicked, the address bar is changed but the page itself doesn't change. To sync the page content with the URL I've set a Javascript timer to poll the window.location.href property on a regular basis and use any changes to trigger an AJAX content-load action. This effectively de-couples the default browser functionality, so instead of changing the page when a link is pressed, this now happens whenever something in the address bar changes. This means that if we change the URL manually or, importantly, with a bookmark, the page's content is automatically changed to reflect the new url.&lt;/p&gt;

&lt;p&gt;To my surprise, it was very simple to get this all set up and working in Firefox. I was even more surprised to see that it worked reasonably well in IE6 as well. Reasonably, but not completely. For some reason, IE wasn't adding my anchors to the history so when I hit back, I was taken off my page and the AJAX app reset its state. &lt;/p&gt;

&lt;pre&gt;
function AjaxUrlFixer() {
    this.fixLinks();

    this.locator = new PageLocator(&quot;window.location.href&quot;, &quot;#&quot;);
    this.timer = new Timer(this);
    this.checkWhetherChanged(0);
}
AjaxUrlFixer.prototype.fixLinks = function () {
    var links = document.getElementsByTagName(&quot;A&quot;);
    for(var i=0; i&amp;lt;links.length; i++) {
        var href = links[i].getAttribute(&quot;href&quot;);
        var hash = href.substr(href.indexOf(&quot;hash=&quot;)+5);
        links[i].setAttribute(&quot;href&quot;,&quot;#&quot;+hash);
    }
}
AjaxUrlFixer.prototype.checkWhetherChanged = function(location){
    if(this.locator.getHash() != location) {
        doGetPage(this.locator.getHash());
    }
    this.timer.setTimeout(&quot;checkWhetherChanged&quot;, 200, this.locator.getHash());
}
&lt;/pre&gt;

&lt;h2&gt;Now you're just being difficult&lt;/h2&gt;
&lt;p&gt;So, IE won't add my modified anchors to the history object. There is a fix that's been in use by Flash developers for a little while that uses frames to trick the browser into thinking that it's loading new pages, and use that to trap and mimic the back button action within the Flash apps. See &lt;a href=&quot;http://www.holler.co.uk&quot;&gt;www.holler.co.uk&lt;/a&gt; for an example of this in action.&lt;/p&gt;

&lt;p&gt;After reading through the Flash back button fix and remembering Dojo Toolkit's reference to their own back button fix I decided to give iframes a shot. The catch is that the iframe has to be present on the page before the DOM tree is complete so it has to be document.written out inline. It's not the cleanest solution because it means that I need to have a script block in the BODY, which I like to avoid, but as far as I know there's no way around that.&lt;/p&gt;

&lt;p&gt;With the iframe in, the mechanism is roughly the same... &lt;/p&gt;

&lt;p&gt;Instead of changing the links on the page to # anchors, they are modified to change the src attribute of the iframe, loading a page called mock-page.php with a querystring that contains the same argument as the hash did before. A timer polls the iframe for it's location and if it detects a change then a content load is triggered in the AJAX app, same as before. &lt;/p&gt;

&lt;p&gt;This is complicated by the fact that the iframe's src property doesn't change when the back button is pressed. To get around this I've written a little function to sit within mock-page.php and report it's location when asked.&lt;/p&gt;

&lt;pre&gt;
function getLocation() {
    return '&amp;lt;?php print &quot;http://&quot; . $_SERVER['SERVER_NAME'] . $_SERVER['PHP_SELF'] . &quot;?&quot; . $_SERVER['QUERY_STRING'] ?&amp;gt;';
}
&lt;/pre&gt;

&lt;p&gt;When a change in mock-page.php's url is detected an AJAX content load is triggered and the parameters from it's querystring are duplicated into the url, to make sure that bookmarking will still work. It's sounds a bit convoluted but the code is quite straight forward. Except for one thing... IE wouldn't let me access the window.location immediately. I have no idea why... As a simple workaround, I've added a tiny 100ms delay to the firing of the script, which seems to sort it out.&lt;/p&gt;

&lt;pre&gt;
function AjaxIframesFixer(iframeid) {
    this.iframeid = iframeid;
    if (document.getElementById('ajaxnav')) {
        this.fixLinks();

        this.locator = new PageLocator(&quot;document.frames['&quot;+this.iframeid+&quot;'].getLocation()&quot;, &quot;?hash=&quot;);
        this.windowlocator = new PageLocator(&quot;window.location.href&quot;, &quot;#&quot;);
        this.timer = new Timer(this);

        this.delayInit(); // required or IE doesn't fire
    }
}
AjaxIframesFixer.prototype.fixLinks = function (iframeid) {
    var links = document.getElementsByTagName(&quot;A&quot;);
    for(var i=0; i&amp;lt;links.length; i++) {
        var href = links[i].getAttribute(&quot;href&quot;);
        var hash = href.substr(href.indexOf(&quot;hash=&quot;)+5);
        links[i].setAttribute(&quot;href&quot;, &quot;Javascript:document.getElementById('&quot;+this.iframeid+&quot;').setAttribute('src', 'mock-page.php?hash=&quot;+hash+&quot;');&quot;);
    }
}
AjaxIframesFixer.prototype.delayInit = function(){
    this.timer.setTimeout(&quot;checkBookmark&quot;, 100, &quot;&quot;);
}
AjaxIframesFixer.prototype.checkBookmark = function(){
    window.location = this.windowlocator.makeNewLocation(this.locator.getHash());
    this.checkWhetherChanged(0);
}
AjaxIframesFixer.prototype.checkWhetherChanged = function(location){
    if(this.locator.getHash() != location) {
        doGetPage(this.locator.getHash());
        window.location = this.windowlocator.makeNewLocation(this.locator.getHash());
    }
    this.timer.setTimeout(&quot;checkWhetherChanged&quot;, 200, this.locator.getHash());
}
&lt;/pre&gt;

&lt;h2&gt;It's not what you said it's how you said it&lt;/h2&gt;
&lt;p&gt;I hate branching scripts but I couldn't find a method that would work across all browsers. To make things as easy as possible I've made the fixes objects so they can be plugged or removed as easily as possible.&lt;/p&gt;

&lt;pre&gt;
function FixBackAndBookmarking() {
    if(!document.getElementById || !document.getElementsByTagName) return;
    if(document.iframesfix) {
        fix = new AjaxIframesFixer('ajaxnav');
    } else {
        fix = new AjaxUrlFixer();
    }
}
&lt;/pre&gt;

&lt;h2&gt;Moving on&lt;/h2&gt;

&lt;p&gt;What I've produced here is a simple illustration of a method for storing the browser state in the URL bar, to allow bookmarking, replaced the default browser linking mechanism to use that url-stored state and mimic traditional web behaviour. For a real world application the querystring used is likely to be far more complicated... I've separated out my code into distinct objects to try and make customisation easier.&lt;/p&gt;

&lt;p&gt;To see it in action, I have put up &lt;a href=&quot;http://donotremove.co.uk/extra/ajax-nav/index.html&quot;&gt;a demo page with everything hooked together&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This method could be applied to Flash as well. As far as I know most people are still using the full frames method documented by Robert Penner. Using some Javascript we can do away with that extra complexity to make going back and bookmarking a plug-and-play addition.&lt;/p&gt;

&lt;h2&gt;Reservations&lt;/h2&gt;
&lt;p&gt;As I was writing this it occurred to me that what I've been doing here is remarkably like the old Frames hacks from back in the day. Should we be trying so hard to duplicate traditional browser behaviour? If it's important enough to put in the effort to duplicate it then should we really be breaking it in the first place? It's a question that can only be answered on a project-by-project basis but it seems important enough to be worth asking...&lt;/p&gt;

&lt;h2&gt;Components&lt;/h2&gt;

&lt;dl&gt;
    &lt;dt&gt;index.html&lt;/dt&gt;
    &lt;dd&gt;The important part, from the point of view of this article. Contains:
        &lt;ul&gt;
            &lt;li&gt;Timer object&lt;/li&gt;
            &lt;li&gt;addEvent fix&lt;/li&gt;
            &lt;li&gt;JPSpan AJAX functions&lt;/li&gt;
            &lt;li&gt;PageLocator object&lt;/li&gt;
            &lt;li&gt;AjaxIframesFixer object for IE&lt;/li&gt;
            &lt;li&gt;AjaxUrlFixer object for Firefox and others&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/dd&gt;

    &lt;dt&gt;test.php&lt;/dt&gt;
    &lt;dd&gt;Sets up JPSpan server side.&lt;/dd&gt;

    &lt;dt&gt;mock-page.php&lt;/dt&gt;
    &lt;dd&gt;Loaded into iframe. Has getLocation function that reports it's current URL.&lt;/dd&gt;

    &lt;dt&gt;pageholder.class.php&lt;/dt&gt;
    &lt;dd&gt;Simple class used to serve content. &lt;/dd&gt;
&lt;/dl&gt;

&lt;table cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; summary=&quot;Browser support for the back button and bookmarking fix&quot;&gt;
&lt;caption&gt;Browser support&lt;/caption&gt;
&lt;tr&gt;
    &lt;th&gt;Browser&lt;/th&gt;
    &lt;th&gt;Bookmarking&lt;/th&gt;
    &lt;th&gt;Back button&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;IE6/PC&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;IE5.5/PC&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;IE5/PC&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;IE5/Mac&lt;/td&gt;
    &lt;td&gt;No&lt;/td&gt;
    &lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Firefox/PC&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Firefox/Mac&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Safari1.2/Mac&lt;/td&gt;
    &lt;td&gt;Yes&lt;/td&gt;
    &lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If you want to have a play with this yourself, I've zipped up &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/resources/ajax-nav/ajax-nav.zip&quot;&gt;the whole lot ready for download&lt;/a&gt;.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Database-driven tree structures with XML and XSLT</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/database-driven-tree-structures-with-xml-and-xslt/index.html"/>
      <updated>2005-06-13T20:56:43+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/database-driven-tree-structures-with-xml-and-xslt/database-driven-tree-structures-with-xml-and-xslt</id>
      <content type="html">&lt;p&gt;This article deals with the display of tree-structures that are driven by a database.
	There are actually a few approaches to transform a 2-dimensional structure into
	a tree, and it seems odd that most are unknown to many developers.&lt;/p&gt;

&lt;p&gt;The most obvious approach is using the parent-ID as a back-reference for recursion &lt;a href=&quot;http://www.devx.com/tips/Tip/22127&quot;&gt;like in this example&lt;/a&gt;. But then what happens if the tree-structure
	gets a bit bigger? How about 5 childnodes and a depth of 5 levels? Well, suddenly you end up with 5&lt;sup&gt;2&lt;/sup&gt; database requests and your application becomes incredibly slow... That's why we're just about to bin the idea of using the parent-ID!&lt;/p&gt;


&lt;h2&gt;Database structure&lt;/h2&gt;

&lt;p&gt;To do this we have to get familiar with a thing called
	&lt;strong&gt;preordered tree traversal&lt;/strong&gt;. If you've not come across it before, take a moment to read &lt;a href=&quot;http://www.sitepoint.com/article/hierarchical-data-database/2&quot;&gt;Storing Hierarchical Data in a Database&lt;/a&gt;.
	Essentially, the idea is to store left and right values for each node and then to figure out whether there is an increase or decrease in the depth of the tree from the difference in the left value between consecutive elements.
    &lt;/p&gt;

&lt;pre&gt;

+--------------------+-----+-----+
| name               | lft | rgt |
+--------------------+-----+-----+
| page 1             |   1 |  10 |
| page 1.1           |   2 |   3 |
| page 1.2           |   4 |   9 |
| page 1.2.1         |   5 |   6 |
| page 1.2.2         |   7 |   8 |
+--------------------+-----+-----+

&lt;/pre&gt;

&lt;p&gt;This is far more efficient than recursively requesting on the ID of the parent element because now we just need two SELECTS: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first to get the left and right values of the node that is the root node of the tree to describe.&lt;/li&gt;
&lt;li&gt;The second one to get all dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that LEFT and RIGHT are SQL keywords, so label your database fields accordingly. I use 'lft' and 'rgt'.&lt;/p&gt;

&lt;h2&gt;XML tree structure&lt;/h2&gt;

&lt;p&gt;Now we are about to transform the 2-dimensional structured data in the database into an XML format.
	The beauty of XML for the purpose of displaying trees is the ability to have nested structures.
	Also read my previous article about &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/29/xml-as-intermediate-application-layer&quot;&gt;XML as intermediate application layer&lt;/a&gt; to find out what else XML has to offer.&lt;/p&gt;

&lt;p&gt;Our structure is going to look something like this:&lt;/p&gt;

&lt;pre&gt;

&amp;lt;page id=&quot;1&quot; depth=&quot;1&quot;&amp;gt;
  &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1]]&amp;gt;&amp;lt;/name&amp;gt;

  &amp;lt;page id=&quot;2&quot; depth=&quot;2&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1.1]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/page&amp;gt;
  &amp;lt;page id=&quot;3&quot; depth=&quot;2&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1.2]]&amp;gt;&amp;lt;/name&amp;gt;

    &amp;lt;page id=&quot;4&quot; depth=&quot;3&quot;&amp;gt;
      &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1.2.1]]&amp;gt;&amp;lt;/name&amp;gt;
    &amp;lt;/page&amp;gt;
    &amp;lt;page id=&quot;5&quot; depth=&quot;3&quot;&amp;gt;
      &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1.2.2]]&amp;gt;&amp;lt;/name&amp;gt;
    &amp;lt;/page&amp;gt;

  &amp;lt;/page&amp;gt;
  &amp;lt;page id=&quot;6&quot; depth=&quot;2&quot;&amp;gt;
    &amp;lt;name&amp;gt;&amp;lt;![CDATA[page 1.3]]&amp;gt;&amp;lt;/name&amp;gt;
  &amp;lt;/page&amp;gt;
&amp;lt;/page&amp;gt;

&lt;/pre&gt;

&lt;p&gt;In case you are wondering why I am not writing the page name into an attribute: An attribute cannot contain
	CDATA or entities. Since I want to keep the structure as flexible as possible I keep the name in
	a CDATA field that lets us store unencoded markup.
&lt;/p&gt;


&lt;h2&gt;Creating the XML with PHP&lt;/h2&gt;

&lt;p&gt;In order to create the XML structure we will walk through the result set and trigger the opening and closing tags by comparing the left and right values.&lt;/p&gt;

&lt;p&gt;Bear in mind that this function is supposed to be a method of a class that already has the basic toolkits for
	database handling available. Again, read &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/29/xml-as-intermediate-application-layer&quot;&gt;my previous article&lt;/a&gt; to find out more.&lt;/p&gt;

&lt;pre&gt;

function getPageTreeXML($ID = false)
{
  // get left and right values of root-node
  $q = ($ID) ? 'SELECT lft, rgt FROM pages WHERE ID = '
      . $ID : 'SELECT * FROM pages ORDER BY lft ASC LIMIT 1';

  $res = $this-&amp;gt;DB-&amp;gt;query($q);

  $depth = 0;
  $ol = mysql_result($res, 0, 'lft');
  $or = mysql_result($res, 0, 'rgt');

  // get tree branch
  $q = '
    SELECT * FROM pages WHERE
      lft &amp;gt;= ' . $ol . '
    AND
      rgt &amp;lt;= ' . $or . '
    ORDER BY lft ASC';

  $res = $this-&amp;gt;DB-&amp;gt;query($q);

  // open the pagetree tag
  $xmlStr = '';
  $xmlStr .= '&amp;lt;pagetree&amp;gt;';

  while($arr = mysql_fetch_array($res))
  {
    // store old depth
    $old_depth = $depth;

    // trigger new depth values
    if($ol == ($arr['lft'] - 1))
      $depth++;
    if($or &amp;lt; ($arr['rgt'] - 2))
      $depth -= (($arr['lft'] - $or) - 1);

    // if depth doesn't increase close page tag
    if($old_depth != 0 &amp;amp;&amp;amp; $old_depth &amp;gt;= $depth)
      $xmlStr .= str_repeat('&amp;lt;/page&amp;gt;', ($old_depth - $depth) + 1);

    // write xml data
    $xmlStr .= '&amp;lt;page id=&quot;' . $arr['ID'] . '&quot; depth=&quot;' .
            $depth . '&quot;&amp;gt;' . '&amp;lt;name&amp;gt;&amp;lt;![CDATA[' .
            $this-&amp;gt;mysqlDecodeText($arr['name']) . ']]&amp;gt;&amp;lt;/name&amp;gt;';

    // store the left and right values for next iteration
    $ol = $arr[&quot;lft&quot;];
    $or = $arr[&quot;rgt&quot;];
  }

  // close all open tags
  if($depth &amp;gt; 0)
    $xmlStr .= str_repeat('&amp;lt;/page&amp;gt;', $depth + 1);

  // close pagetree tag
  $xmlStr .= '&amp;lt;/pagetree&amp;gt;';
  return $xmlStr;
}

&lt;/pre&gt;

&lt;h2&gt;Transforming the XML with XSLT&lt;/h2&gt;

&lt;p&gt;Now that the XML is created we can easily create any kind of HTML
	out of it by using XSLT. The following example is a quickly mocked up
	nested structure to create an indented display of the page-names.&lt;/p&gt;

&lt;p&gt;You can create nested XHTML elements easily by using a recursive structure in XSLT.
In my example, you can see that the &amp;#8220;page&amp;#8221; template is calling itself in the for-each loop.&lt;/p&gt;


&lt;pre&gt;

&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
 xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;

  &amp;lt;xsl:template match=&quot;/pagetree&quot;&amp;gt;
    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;pagetree&amp;lt;/title&amp;gt;
        &amp;lt;style type=&quot;text/css&quot;&amp;gt;
          .tree div { padding: 10px 0 10px 10px;}
        &amp;lt;/style&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
        &amp;lt;div class=&quot;tree&quot;&amp;gt;
          &amp;lt;xsl:apply-templates /&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&quot;page&quot; name=&quot;page&quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;xsl:value-of select=&quot;name&quot; /&amp;gt;
      &amp;lt;xsl:for-each select=&quot;page&quot;&amp;gt;
        &amp;lt;xsl:call-template name=&quot;page&quot; /&amp;gt;
      &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;

&lt;/pre&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a poster child application for seperating your functionality into an XML-rendering layer.
	I find this method a handy way to generate menus for the front-end and the back-end of an application using the same XML-rendering
	for both sides. Also, by using XSLT, we have plenty of styling possibilities.&lt;/p&gt;

&lt;p&gt;But the best advantage for me in this 3-step process is the first one - the pre-ordered tree traversal.
	It speeds up your application dramatically and makes it possible to render even large trees with maximum pace.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>MVC in smaller web applications</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/mvc-in-smaller-web-applications/index.html"/>
      <updated>2005-06-07T15:57:04+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/mvc-in-smaller-web-applications/mvc-in-smaller-web-applications</id>
      <content type="html">&lt;h2&gt;The real world&lt;/h2&gt;
&lt;p&gt;Web development is, in many cases, a process where time is a crucial factor. As coding is usually the last step in the process, all things come together and prior mistakes are revealed.
&lt;br /&gt;&lt;br /&gt;
&quot;Build this so it looks the same in all browsers, works better than the IA was ever planned and can fly.&quot; Or so we hear.
&lt;br /&gt;&lt;br /&gt;
With a limited amount of time, developers are often tempted to fall for quick fixes and, not only due to last-minute changes, find themselves in a huge ball of code at the end of the project.
&lt;br /&gt;&lt;br /&gt;
&quot;What does that matter, if the site is working nicely, nobody complains and it's nodded off by the client?&quot; I hear you ask.
&lt;br /&gt;&lt;br /&gt;
This attitude is something I've encountered many times, and it usually results in a second-phase disaster, be it an extension of the site, a new face or a server change.
&lt;/p&gt;
&lt;h2&gt;Theory&lt;/h2&gt;
&lt;p&gt;This is where the MVC comes to the rescue. It's basically an attempt to structure a web application into three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model is generally understood as the data-administration component. In the majority of website projects, this is the data retention in a relational database system, but it could also include other persistent business objects, Enterprise Java Beans for example. Model is passive and does not trigger any actions. Data is requested independently of their representation (view); Model does not know anything about the data presentation. Model can work with one (1:1-relation) or several Views and Controllers (1:n-relation).&lt;/li&gt;
&lt;li&gt;View describes the visual representation of the Model. In the case of many dynamic websites, you would imagine one or two Views on the same Model: in the case of this article, one would be the public View - the way you see this article now, and another one would be where I create and edit. Of course, there are many more possibilities: different user levels, each with a distinctive set of permissions; different representations of the same website for regular users; high contrast for easier reading; a View without head and navigation for printing, and so on.&lt;/li&gt;
&lt;li&gt;The Controller has the entire application logic implemented. It is an active component. The application receives inquiries, passes it on to the responsible subcomponents in the system and possibly sends answers back to the user. The Controller carries out various manipulations of the Model for the execution of user actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, so good. Now that the theory is clear, we can look at how it's used in the web development process. Do I actually need it? This seems to be a very sensitive subject. While researching, I've found several approaches, most are somewhere in the triangle of determined, angry and ignorant. I'd like to point out the most obvious reasons to use it, hopefully not stepping on any toes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Match a thought pattern: Putting your code into a programming pattern is difficult when you try doing it while coding, but the idea is to structure the code first, in your head, on a piece of paper or, for large scale projects, with CASE-tools. With the structure documented, your code becomes more manageable, and the number of people that want to see you roast in hell (possibly you yourself in 1 or 2 years time) is decreasing. Every developer that understands MVC will find their way through your stuff quickly, you will both work on the same wavelength, because you both follow the same pattern, in code and thought.&lt;/li&gt;
&lt;li&gt;Reusability. This goes for any kind of modularisation, but it's an argument not to ignore: Once you have thought through and set up your model, you can reuse it many times with no or only minimal changes.&lt;/li&gt;
&lt;li&gt;Extendibility: With a strict modularisation, you have a defined field of work when it comes to changes of face, functionality or data storage. Depending on your web applications needs and real-world situation, you can decide which parts need upgrading.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Practice&lt;/h2&gt;
&lt;p&gt;I &lt;a href=&quot;http://www.sitepoint.com/article/struts-first-steps&quot;&gt;discovered&lt;/a&gt; that &lt;a href=&quot;http://struts.apache.org/&quot;&gt;Jakarta Struts&lt;/a&gt; is a really good Java-based solution and, more recently, &lt;a href=&quot;http://www.phparch.com/&quot;&gt;PHP Architect magazine&lt;/a&gt; offered a free download of their may 2003 issue, containing a nice introductory article with a solution based on Smarty templates. A very extensive solution incorporating the three-tier architecture (no, &lt;a href=&quot;http://www.tonymarston.net/php-mysql/infrastructure-faq.html#faq26&quot;&gt;they're not the same&lt;/a&gt;) also PHP-based, can be found on &lt;a href=&quot;http://www.tonymarston.net/php-mysql/model-view-controller.html&quot;&gt;Tony Marston's website&lt;/a&gt; along with tons of information on different design patterns.&lt;br /&gt;
I could stop here and leave you with one of the examples, but let me say this: I believe that the size of the project and the probability of exchanging or updating certain components should play as important a role as the reusability of the code.
&lt;/p&gt;
&lt;p&gt;
Over time, Pascal and I have come up with a loose framework of PHP classes, which have saved enormous amounts of time when building medium-scale projects, thanks to their reusable subcomponents.
&lt;br /&gt;
The Views are set up with CSS and (X)HTML, which is generated with XSL stylesheets (see Pascal's article with his &lt;a href=&quot;http://contentwithstyle.pascalopitz.com/Articles/29/&quot;&gt;five-layer structure&lt;/a&gt; for more detail).
&lt;br /&gt;
In the backend PHP, classes are structured by their functionality. A db-class manages all lower-level database work: replace it or change the configuration for a database change. This class represents the Model. Your server was hacked and you need to refer to a backup db-server? It's done in 10 seconds.
&lt;br /&gt;&lt;br /&gt;
A base class, meanwhile, carries all of the helper functions that are used across most projects, for things like string and date operations. It is extended by a page class, which is the first class to adapt to the project. Here, the site structure is taken care of (usually dug out of the database in one way or another, as a tree or a flat page model), functions for breadcrumbs and navigation grab the data and return the XML, and global site elements find their data. But not only that: All what's generally called business logic, calculations, workflows and so forth, can be found here as well. The class can then be extended for special purpose pages, to keep it nice and tidy. I group them as Controller. They receive all the requests, they instantiate the Model (the db class) to deliver XML, to be transformed by the View, by XSL.
&lt;br /&gt;&lt;br /&gt;
But this does not strictly fit into the MVC pattern: In a clean approach, no SQL would be found in the page class. A common technique here is to set up a class for each table that contains all queries. This way, you know where to find your SQL and what classes to touch should your db-server change. Alternatively, you can extend the db-class and top it up with higher level of functions that build the SQL for you. On the upside, you only have one file to change (as opposed to one per table); on the downside, solutions tend to be developed in a complicated way, thereby making it difficult for the next developer to get their head around it. Furthermore, it may be too specific to one site and, therefore, not very portable.
&lt;br /&gt;&lt;br /&gt;
With these classes set up as a starter package, you'll have incredibly quick results - and working as a frontend/backend team is a joy. Simply set up an abstract XML file with all the data you need, and each of you can work towards it from both sides: one on the xsl/html/css side, the other in the php/db department.
&lt;br /&gt;&lt;br /&gt;
On several occasions, I left out the table classes as a set-up for medium-sized projects.
As an alternative, I either stuck to relational databases (usually sufficient) and coded in &lt;a href=&quot;http://www.opengroup.org/public/tech/datam/sql.htm&quot;&gt;pure SQL-92&lt;/a&gt; - although this tends to be awkward and I'm not sure if all common databases follow this standard entirely - or I made sure the db-application stayed the same throughout the lifetime of the site.
&lt;br /&gt;&lt;br /&gt;
As with most things in modern digital life, sites are ever-changing, but the code hardly ever survives three years. Your budget, timeframe and the purpose of the site will determine to what extent you want to follow MVC. But it's always worth considering.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Dynamic tables with XSLT</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/dynamic-tables-with-xslt/index.html"/>
      <updated>2005-06-01T09:08:30+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/dynamic-tables-with-xslt/dynamic-tables-with-xslt</id>
      <content type="html">&lt;h2&gt;Required knowledge&lt;/h2&gt;

&lt;p&gt;
	To get into what I want to do in this tutorial, you should have a basic understanding of what XSLT is and how you can get it running.
	&lt;br /&gt;
	I explained a couple of ways in my &lt;a href=&quot;/Articles/4&quot;&gt;basic tutorial&lt;/a&gt;. Maybe it's worth reading it.
	&lt;br /&gt;&lt;br /&gt;
	You can &lt;a href=&quot;/resources/xsl_tables/sample_files.zip&quot;&gt;download the example-files&lt;/a&gt;, coming with my little development-javascript for MSXML.
&lt;/p&gt;


&lt;h2&gt;Processing&lt;/h2&gt;

&lt;p&gt;
	Again you are forced to make your choice! How are you getting the variables passed to your XSL? I don't know!
	It depends on the processor you are using. I'll have an example-file for javascript and MSXML and PHP using sablotron provided in the zip-file.
	The links to the output will be transformed by using PHP and sablotron.
	I just pass querystrings to the processor, so you could use pretty much the same thing in ASP, PHP, JSP, whatever!
	Just to make the level of abstraction completely clear, let me AGAIN summarize what the file must do:
&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Loading XML&lt;/li&gt;
	&lt;li&gt;Loading XSL&lt;/li&gt;
	&lt;li&gt;Passing querystring-variables to the processor&lt;/li&gt;
	&lt;li&gt;Process the XML with the XSL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
	Now let's move on to the important bits!
&lt;/p&gt;


&lt;h2&gt;Getting started&lt;/h2&gt;

&lt;p&gt;
	I'll use a &lt;a href=&quot;/resources/xsl_tables/simple_table/data.xml&quot;&gt;pretty boring piece of data&lt;/a&gt; for this tutorial. Basically it should be data that is ready to be displayed as a table.
	Here is an excerpt:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;circus&amp;gt;
  &amp;lt;show&amp;gt;
    &amp;lt;start_day&amp;gt;&amp;lt;![CDATA[31.12.2003]]&amp;gt;&amp;lt;/start_day&amp;gt;
    &amp;lt;end_day&amp;gt;&amp;lt;![CDATA[26.01.2004]]&amp;gt;&amp;lt;/end_day&amp;gt;
    &amp;lt;postcode&amp;gt;&amp;lt;![CDATA[81939]]&amp;gt;&amp;lt;/postcode&amp;gt;
    &amp;lt;city&amp;gt;&amp;lt;![CDATA[M&amp;uuml;nchen]]&amp;gt;&amp;lt;/city&amp;gt;
    &amp;lt;address&amp;gt;&amp;lt;![CDATA[Kieferngarten]]&amp;gt;&amp;lt;/address&amp;gt;
    &amp;lt;artist&amp;gt;
      &amp;lt;key&amp;gt;&amp;lt;![CDATA[KNO 01]]&amp;gt;&amp;lt;/key&amp;gt;
      &amp;lt;name&amp;gt;&amp;lt;![CDATA[Esad Jones]]&amp;gt;&amp;lt;/name&amp;gt;
      &amp;lt;program&amp;gt;&amp;lt;![CDATA[waghalsige Stunts]]&amp;gt;&amp;lt;/program&amp;gt;
    &amp;lt;/artist&amp;gt;
  &amp;lt;/show&amp;gt;
&amp;lt;/circus&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Like you see, we're able to get a nice table out of that. We'll start by creating a basic HTML-table by parsing the whole document.
	The XSL for that look somehow like this:
&lt;/p&gt;


&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
&amp;lt;xsl:output method=&quot;xml&quot; indent=&quot;yes&quot; encoding=&quot;utf-8&quot;/&amp;gt;

&amp;lt;xsl:param name=&quot;smode&quot; /&amp;gt;

&amp;lt;xsl:template match=&quot;circus&quot;&amp;gt;

  &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;mytable&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;

      &amp;lt;xsl:call-template name=&quot;show&quot; /&amp;gt;

    &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;

&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template name=&quot;show&quot;&amp;gt;
  &amp;lt;h1&amp;gt;show overview&amp;lt;/h1&amp;gt;

  &amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;start_day&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;end_day&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;postcode&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;city&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;address&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;view artists&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;

    &amp;lt;tbody&amp;gt;
      &amp;lt;xsl:apply-templates /&amp;gt;
    &amp;lt;/tbody&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/xsl:template&amp;gt;


&amp;lt;xsl:template match=&quot;show&quot; name=&quot;srow&quot;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/start_day&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/end_day&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/postcode&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/city&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/address&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	You can watch the output &lt;a href=&quot;/resources/xsl_tables/simple_table/transform.php&quot;&gt;here&lt;/a&gt;, the XSL is &lt;a href=&quot;/resources/xsl_tables/simple_table/example.xsl&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;


&lt;h2&gt;Sorting&lt;/h2&gt;

&lt;p&gt;
	First thing we're going to do is to add dynamic sorting.
	This works using the XSL-Element &lt;code class=&quot;inline&quot;&gt; &amp;lt;xsl:sort /&amp;gt; &lt;/code&gt; in combination with a variable.
	We'll insert a parameter into our XSL on top and reform the th-content in two of our collumns.
&lt;/p&gt;

&lt;pre&gt;
          &amp;lt;th&amp;gt;&amp;lt;a href=&quot;?smode=postcode&quot;&amp;gt;postcode&amp;lt;/a&amp;gt;&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;&amp;lt;a href=&quot;?smode=city&quot;&amp;gt;city&amp;lt;/a&amp;gt;&amp;lt;/th&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	So now the variable &amp;#8220;smode&amp;#8221; will be passed to the processor. Buit we have to introduce it within the XSL as well.
	So within the first template we'll declare it with this line of code:
&lt;/p&gt;

&lt;pre&gt;
  &amp;lt;xsl:param name=&quot;smode&quot; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Now we can check the variable and choose the right &lt;code class=&quot;inline&quot;&gt; &amp;lt;xsl:sort /&amp;gt; &lt;/code&gt;.
	I do this by wrapping it into an additional template, so I can reuse it later.
	Let's have a look:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;xsl:template name=&quot;sorting&quot;&amp;gt;
  &amp;lt;xsl:choose&amp;gt;
    &amp;lt;xsl:when test=&quot;contains($smode, 'postcode')&quot;&amp;gt;
    &amp;lt;xsl:apply-templates&amp;gt;
      &amp;lt;xsl:sort select=&quot;postcode&quot; order=&quot;ascending&quot; data-type=&quot;text&quot; /&amp;gt;
    &amp;lt;/xsl:apply-templates&amp;gt;
    &amp;lt;/xsl:when&amp;gt;
    &amp;lt;xsl:when test=&quot;contains($smode, 'city')&quot;&amp;gt;
    &amp;lt;xsl:apply-templates&amp;gt;
      &amp;lt;xsl:sort select=&quot;city&quot; order=&quot;ascending&quot; data-type=&quot;text&quot; /&amp;gt;
    &amp;lt;/xsl:apply-templates&amp;gt;
    &amp;lt;/xsl:when&amp;gt;
    &amp;lt;xsl:otherwise&amp;gt;
    &amp;lt;xsl:apply-templates /&amp;gt;
    &amp;lt;/xsl:otherwise&amp;gt;
  &amp;lt;/xsl:choose&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Now, instead of just using &lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:apply-templates /&amp;gt;&lt;/code&gt; we'll call the template we created with a simple
	&lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:call-template /&amp;gt;&lt;/code&gt;.
	Have a look at the &lt;a href=&quot;/resources/xsl_tables/sorting/transform.php&quot;&gt;transformed output&lt;/a&gt; and make sure you understand the &lt;a href=&quot;/resources/xsl_tables/sorting/example.xsl&quot;&gt;XSL&lt;/a&gt;.
&lt;/p&gt;

&lt;h2&gt;Details&lt;/h2&gt;

&lt;p&gt;
	Alright, that's a nice beginning. But what is that link for, called  &amp;#8220;view artists&amp;#8221;?
	Well, that's where we get to the interesting point. Obviously it's possible to display the artists for one show
	as a table on it's own. But how are we going to do that? We'll AGAIN use variables!
	What we need is a way to identify a row and then display the matching content.
	I'll use UID. Anyway, let's give it a go.
	We just need to use &lt;code class=&quot;inline&quot;&gt;position()&lt;/code&gt;. Like that we can identify the row for which we want to see the sub-nodes.
	Because we use the position, we need to keep the sorting-mode as well, otherwise we select the wrong node when we sorted before.
	In the empty collumn of the table I insert this:
&lt;/p&gt;

&lt;pre&gt;
	&amp;lt;a href=&quot;?ident={position()}&amp;amp;smode={$smode}&quot;&amp;gt;artists&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Obviously I need somehow a way to check if the variable &amp;#8220;ident&amp;#8221; is set.
	This is why I change the &lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:call-template name=&quot;show&quot; /&amp;gt;&lt;/code&gt; to this:
&lt;/p&gt;

&lt;pre&gt;
      &amp;lt;xsl:choose&amp;gt;
        &amp;lt;xsl:when test=&quot;not($ident)&quot;&amp;gt;
        &amp;lt;xsl:call-template name=&quot;show&quot; /&amp;gt;
        &amp;lt;/xsl:when&amp;gt;
        &amp;lt;xsl:otherwise&amp;gt;
        &amp;lt;xsl:call-template name=&quot;artist&quot; /&amp;gt;
        &amp;lt;/xsl:otherwise&amp;gt;
      &amp;lt;/xsl:choose&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	So now I need an additional template called &amp;#8220;artist&amp;#8221;, which in this case just changes the table-structure and inserts a back-button.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;xsl:template name=&quot;artist&quot;&amp;gt;
  &amp;lt;h1&amp;gt;artists overview&amp;lt;/h1&amp;gt;

  &amp;lt;a href=&quot;?smode={$smode}&quot;&amp;gt;back&amp;lt;/a&amp;gt;

  &amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;name&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;program&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;

    &amp;lt;tbody&amp;gt;
      &amp;lt;xsl:call-template name=&quot;sorting&quot; /&amp;gt;
    &amp;lt;/tbody&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	As you might already have noticed, the sorting-wrapper will work like it did before as well.
	That's why we have to check the ident-variable within the applied template, which is the one named &amp;#8220;srow&amp;#8221;.
	I will create a new template called &amp;#8220;artistrow&amp;#8221;, so the table-structure is right.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;xsl:template match=&quot;show&quot; name=&quot;srow&quot;&amp;gt;
  &amp;lt;xsl:choose&amp;gt;
    &amp;lt;xsl:when test=&quot;not($ident)&quot;&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/start_day&quot; /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/end_day&quot; /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/postcode&quot; /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/city&quot; /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/address&quot; /&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;a href=&quot;?ident={position()}&amp;amp;smode={$smode}&quot;&amp;gt;artists&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/xsl:when&amp;gt;
    &amp;lt;xsl:otherwise&amp;gt;
    &amp;lt;xsl:if test=&quot;position() = $ident&quot;&amp;gt;
      &amp;lt;xsl:for-each select=&quot;current()/artist&quot;&amp;gt;
        &amp;lt;xsl:call-template name=&quot;artistrow&quot; /&amp;gt;
      &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;/xsl:if&amp;gt;
    &amp;lt;/xsl:otherwise&amp;gt;
  &amp;lt;/xsl:choose&amp;gt;
&amp;lt;/xsl:template&amp;gt;


&amp;lt;xsl:template name=&quot;artistrow&quot;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/name&quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/program&quot; /&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	The transformed output looks like &lt;a href=&quot;/resources/xsl_tables/details/transform.php&quot;&gt;this&lt;/a&gt;, the XSL like &lt;a href=&quot;/resources/xsl_tables/details/example.xsl&quot;&gt;this&lt;/a&gt; .
&lt;/p&gt;

&lt;h2&gt;Nearly done&lt;/h2&gt;

&lt;p&gt;
	Now we have both views, all we need is a bit of styling via &lt;a href=&quot;/resources/xsl_tables/final/style.css&quot;&gt;CSS&lt;/a&gt; and we
	have a &lt;a href=&quot;/resources/xsl_tables/final/transform.php&quot;&gt;nice looking dynamic application&lt;/a&gt; where most of the logic happens within the &lt;a href=&quot;/resources/xsl_tables/final/example.xsl&quot;&gt;XSL&lt;/a&gt;.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>XML as intermediate application layer</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xml-as-intermediate-application-layer/index.html"/>
      <updated>2005-05-31T08:37:12+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xml-as-intermediate-application-layer/xml-as-intermediate-application-layer</id>
      <content type="html">&lt;h2&gt;Why bothering?&lt;/h2&gt;

&lt;p&gt;Dealing with any server-side scripting language the things that I find most annyoing are the ones where I have to change

	&lt;br /&gt;

	&lt;code class=&quot;inline&quot;&gt; echo '&amp;lt;a href=&quot;' . $url . '&quot;&amp;gt;' . $text . '&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;';&lt;/code&gt;

	&lt;br /&gt;
	to something like
	&lt;br /&gt;

	&lt;code class=&quot;inline&quot;&gt; echo '&amp;lt;li&amp;gt;&amp;lt;a href=&quot;' . $url . '&quot;&amp;gt;' . $text . '&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;';&lt;/code&gt;
	&lt;/p&gt;

&lt;p&gt;It's always a waste of time, and often, due to some typo, errors sneak in and suddenly you're debugging again.&lt;/p&gt;


&lt;p&gt;In this article I want to share my thoughts on techniques for keeping our code XML-based - so there's no need to get your hands dirty in your application code to change the markup that is rendered afterwards. Most things will be PHP related though.
&lt;/p&gt;


&lt;h2&gt;Other benefits&lt;/h2&gt;

&lt;p&gt;Once we get the seperation working properly, we can completely detach the development of front end from the application logic by first agreeing on an XML scheme to exchange data between those two.&lt;/p&gt;

&lt;p&gt;By providing dummy XML to the guy doing the XHTML and CSS he can flesh everything out and then put it into an XSLT. Even before the application is built he can have finished everything... Then to get up and running, just the XSLT files, images and CSS need to be dropped in. Good to go.&lt;/p&gt;

&lt;p&gt;By keeping the dataflow of the application logic stricly XML compliant we also have no problems using the same code
	for outputting a different version, to mobile devices, for example, OR to swap the data-source with an external web-service. &lt;/p&gt;

&lt;p&gt;And did I mention that suddenly you can work with UTF-8 throughout the whole application and the XSLT automatically
transforms it into the needed output format? You just need the right parser.&lt;/p&gt;

&lt;p&gt;On top of all that, we are using a w3c technique and have the ability to render tree structures and stuff...&lt;/p&gt;


&lt;h2&gt;A 5 layer approach&lt;/h2&gt;

&lt;p&gt;
	The &lt;a href=&quot;http://www.graphicpush.com/archives/000070.shtml&quot;&gt;3 layer paradigm&lt;/a&gt; has been around for a while and most of you probably are familliar with it.&lt;/p&gt;

&lt;p&gt;I mostly agree but for our needs, just half of the job is covered. That's why I want to extend it into a 5 layer approach.
&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://contentwithstyle.pascalopitz.com/resources/old_images/15.gif&quot; alt=&quot;5 layer approach&quot; longdesc=&quot;This graphic shows 5 layers of a web-application as follows: XML: Application data output, XSL: Transformation for target platform, (X)HTML: Markup - Client side, CSS: Presentation - Client side, Javascript: Behaviour&quot; /&gt;
&lt;/p&gt;


&lt;h2&gt;Planning your application&lt;/h2&gt;

&lt;p&gt;First of all you obviously need to flesh out what the application does etc. and which part does what.&lt;/p&gt;

&lt;p&gt;We should also take care of the platform that we'll be developing for, to avoid facing the worst of all situations: having to throw the whole goddam thing in the bin and start from scratch.&lt;/p&gt;

&lt;p&gt;Then, like I already mentioned, we can work out the output XML structure and pass it on to the front end developer. As soon as that's done we can move on to plan the code for our application.
&lt;/p&gt;


&lt;h2&gt;Structuring the application code&lt;/h2&gt;

&lt;p&gt;Now that we know what needs to be done we can assemble a robust set of classes, either the &lt;a href=&quot;http://pear.php.net/&quot;&gt;PEAR&lt;/a&gt; ones or custom ones (I tend to use custom ones) that perform several actions for us:
&lt;/p&gt;

&lt;dl&gt;
	&lt;dt&gt;General DB class&lt;/dt&gt;
	&lt;dd&gt;
		A class that gives us easy access to our database and returns resultsets or arrays, manages updates and inserts and explains
		tables and all that ...
		&lt;br /&gt;
		If you're working with several database-types I'd recommend to &lt;a href=&quot;http://www.jakober.ch/asp/asp_ado.php&quot;&gt;make use of
		ADO in ASP&lt;/a&gt;, and there is an &lt;a href=&quot;http://adodb.sourceforge.net/&quot;&gt;ADODB toolkit for PHP&lt;/a&gt; as well.
	&lt;/dd&gt;

	&lt;dt&gt;Database output to XML&lt;/dt&gt;
	&lt;dd&gt;
		It's a very simple thing, but it makes life very comfortable. I use my own one in PHP, but
		&lt;a href=&quot;http://pear.php.net/package/XML_sql2xml&quot; title=&quot;PEAR::XML_sql2xml&quot;&gt;there is a PEAR class for this&lt;/a&gt;
		as well.
	&lt;/dd&gt;

	&lt;dt&gt;XSLT transformation class&lt;/dt&gt;
	&lt;dd&gt;
		This class should manage to process XML input by using XSL files. And again,
		&lt;a href=&quot;http://pear.php.net/package/XML_XSLT_Wrapper#results&quot; title=&quot;PEAR::XML_XSLT_Wrapper&quot;&gt;there is a PEAR class for doing
		this&lt;/a&gt;.
	&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Obviously it's down to the developer to add more classes for specific problems, but once we have gathered our basic toolkit
we can think about ways to transform things easily.&lt;/p&gt;


&lt;h2&gt;Class based application&lt;/h2&gt;

&lt;p&gt;I highly recommend taking a big big step back from procedural scripting. Instead you can work out a class structure and
	write rendering methods for either the page or parts of the page. Again, classes are robust and reusable. If you are unfamiliar with
	&lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot; title=&quot;Object-oriented Programming&quot;&gt;OOP&lt;/a&gt; in PHP,
	&lt;a href=&quot;http://www.informit.com/articles/article.asp?p=24607&amp;amp;rl=1&quot; title=&quot;A Quick and Dirty Introduction to OOP with PHP&quot;&gt;make
	 yourself familiar with it&lt;/a&gt; ASAP.
&lt;/p&gt;


&lt;h2&gt;PHP - output buffering&lt;/h2&gt;

&lt;p&gt;And here comes one of the nicest ideas ever.&lt;/p&gt;

&lt;p&gt;I think that &lt;a href=&quot;http://www.zend.com/zend/art/buffering.php&quot;&gt;output buffering&lt;/a&gt; is a handy thing anyway. And there are &lt;a href=&quot;http://www.jinxidoru.com/_php/buffering.html&quot;&gt;many ways to benefit from it&lt;/a&gt;. But the coolest feature though is the callback function.&lt;/p&gt;

&lt;p&gt;Instead of having a method called by something to finally get the XHTML out of our application, we just process the whole output
generated in PHP with this single callback funtion. Some flags can trigger which XSLT to use. &lt;/p&gt;

&lt;p&gt;And there we are, &lt;strong&gt;we have a strictly XML based internal dataflow, but rendered HTML in the output&lt;/strong&gt;.&lt;/p&gt;


&lt;h2&gt;Outlook&lt;/h2&gt;

&lt;p&gt;I hope everyone sees the point of my approach and how you can work out a robust application. I also hope everyone understands why I didn't provide much code this time,
since it would be quite a lot of code and still be platform specific.
&lt;/p&gt;

&lt;p&gt;Using output buffering may seem a bit like a loss of control, since you cannot pass parameters to the callback function, but it makes sense to just call one XSL and, similar to use @import in CSS, include XSL files for patricular elements. How to do that will be the next topic, so stay tuned.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>A CSS Framework</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/a-css-framework/index.html"/>
      <updated>2005-05-22T16:20:22+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/a-css-framework/a-css-framework</id>
      <content type="html">&lt;p&gt;In my &lt;a href=&quot;/Articles/12/modular-css/&quot;&gt;Modular CSS&lt;/a&gt; article I documented the possibility of breaking down stylesheets into components that could be reused across projects. All well and good. The next logical step is to extend this to become a CSS framework, allowing rapid development of sites with pre-written and tested components. All that's really required to produce this is a set of naming conventions and a flexible base template... &lt;/p&gt;

&lt;h2&gt;Who is this for?&lt;/h2&gt;
&lt;p&gt;If you've been creating sites with CSS for a while you may be getting frustrated with having to recreate and retest basic layouts on a regular basis. In this article I'm trying to illustrate a simple way of skipping the tedious startup on your average project, letting you get to the interesting stuff as quickly and efficiently as possible. I've not attempted to explain the layouts included here so it may not be suitable if you're a CSS beginner. Sorry about that... Feel free to dissect them yourself if you're interested; I've kept them as simple as possible.&lt;/p&gt;

&lt;h2&gt;How many layouts are there? &lt;/h2&gt;
&lt;p&gt;Well, loads but the majority of them fall into rough groups. Any framework must account for the most common layouts, otherwise it'll never get used. &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Vertical navigation with one content column&lt;/li&gt;
    &lt;li&gt;Vertical navigation with two columns of content&lt;/li&gt;

    &lt;li&gt;Horizontal navigation with one content column&lt;/li&gt;
    &lt;li&gt;Horizontal navigation with 2 columns of content&lt;/li&gt;
    &lt;li&gt;Horizontal navigation with local navigation and one column of content&lt;/li&gt;
    &lt;li&gt;Horizontal navigation with local navigation and 2 columns of content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These 6 cover most of the blogs out there and most of the corporate sites as well. How can we structure a document so that it'll be useful in all 6 of these scenarios?&lt;/p&gt;

&lt;h2&gt;What are the common elements?&lt;/h2&gt;
&lt;p&gt;Malarkey had a shot at pinning down &lt;a href=&quot;http://www.stuffandnonsense.co.uk/archives/whats_in_a_name_pt2.html&quot;&gt;websites' common elements and giving them names&lt;/a&gt; a while back but I want something a little more general so that the building blocks can be retasked without slipping their labelling.&lt;/p&gt;
&lt;p&gt;So... what are the common building blocks in the above 6 layouts?&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Header&lt;/li&gt;
    &lt;li&gt;Footer&lt;/li&gt;

    &lt;li&gt;Main content&lt;/li&gt;
    &lt;li&gt;Sub content&lt;/li&gt;

    &lt;li&gt;Main nav&lt;/li&gt;
    &lt;li&gt;Local nav&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These elements are used mix and match across most sites you visit so these are the constituent elements that any framework will have to cater for. No designs will use all of them but most will use header, footer, main content and main nav with optional sub content and sub nav.&lt;/p&gt;

&lt;h2&gt;The ideal structure&lt;/h2&gt;
&lt;p&gt;For me the most important single aspect of accessibility is the source code order: if it makes sense you're well on your way to building an accessible site. &lt;/p&gt;
&lt;p&gt;You can't spent much time on the accessibility mailing lists or forums without someone being told that they should structure their HTML so that the content preceeds the navigation. This stops screenreader users from having to sit through the site's navigation every time they travel to a new page. You can get around this with skip links but that's an extra link to follow...&lt;/p&gt;
&lt;p&gt;So, in an ideal world, how would we structure our websites?&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Header&lt;/li&gt;
    &lt;li&gt;Main content&lt;/li&gt;
    &lt;li&gt;Sub content&lt;/li&gt;
    &lt;li&gt;Local nav&lt;/li&gt;
    &lt;li&gt;Main nav&lt;/li&gt;
    &lt;li&gt;Footer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This source order follows the exact structure people are expected to want: once they have read/listened to the content of your page they are most likely to want to navigate within the current section or to related pages. After they have worked their way through those they'll probably want another section of your site so the main navigation follows.&lt;/p&gt;

&lt;h2&gt;The page structure&lt;/h2&gt;

&lt;p&gt;This page structure above looks something like this when turned into (X)HTML:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&amp;gt;
    &amp;lt;head&amp;gt;
    	&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;page&quot;&amp;gt;

            &amp;lt;div id=&quot;header&quot; class=&quot;clearfix&quot;&amp;gt;
                &amp;lt;hr /&amp;gt;
            &amp;lt;/div&amp;gt;&amp;lt;!-- end header --&amp;gt;

            &amp;lt;div id=&quot;content&quot; class=&quot;clearfix&quot;&amp;gt;
                &amp;lt;div id=&quot;main&quot;&amp;gt;
                    &amp;lt;hr /&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;div id=&quot;sub&quot;&amp;gt;
                    &amp;lt;hr /&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;div id=&quot;local&quot;&amp;gt;
                    &amp;lt;hr /&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;div id=&quot;nav&quot;&amp;gt;
                    &amp;lt;hr /&amp;gt;
                &amp;lt;/div&amp;gt;

            &amp;lt;/div&amp;gt;&amp;lt;!-- end content --&amp;gt;

            &amp;lt;div id=&quot;footer&quot; class=&quot;clearfix&quot;&amp;gt;
            &amp;lt;/div&amp;gt;&amp;lt;!-- end footer --&amp;gt;

        &amp;lt;/div&amp;gt;&amp;lt;!-- end page --&amp;gt;

        &amp;lt;div id=&quot;extra1&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;extra2&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h2&gt;The magic of CSS&lt;/h2&gt;
&lt;p&gt;We're going to need some farily advanced CSS tricks to turn this source order into useful layouts. They all have to be flexible, to account for text resizing, which with the footer rules out absolute positioning...&lt;/p&gt;
&lt;p&gt;The eureka moment for me was when &lt;a href=&quot;http://www.1976design.com/blog/archive/2004/11/21/solving-css-problems-mozilla-europe/&quot;&gt;Dunstan published his absolutely positioned menu technique&lt;/a&gt; as part of his Mozilla Europe work. Suddenly it became possible, using an incredibly sneaky trick, to pull the nav bar from the bottom of the source and use it horizontally in the header and still allow for text resizing. Now that's genius. &lt;/p&gt;

&lt;p&gt;Then you've got the negative margin tricks for moving floats around. I first came across these when &lt;a href=&quot;http://www.mezzoblue.com/archives/2004/01/23/friday_chall/&quot;&gt;Ryan Brill posted about them on Mezzoblue&lt;/a&gt;... Dead handy.&lt;/p&gt;

&lt;p&gt;If we're going to use floated layouts we're going to need some way of clearing the contents. I could put clearing divs into each of my elements but there is the black magic &lt;a href=&quot;http://positioniseverything.net/easyclearing.html&quot;&gt;clearfix method by Tony Aslett&lt;/a&gt; that will do this for me, keeping the source clean.&lt;/p&gt;

&lt;p&gt;A few other things that might come in handy:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Body ids to switch styles&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://positioniseverything.net/explorer/floatIndent.html&quot;&gt;Display: inline to cure IE's double float bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;See where I'm going with this?&lt;/h2&gt;
&lt;p&gt;We have a single, flexible source document that will take a variety of content and a load of CSS techniques to manipulate them... To make this framework useful I have to be able to get my single source document to display as any of the common layouts listed above. Once that's done I'll be able to drop any content into the HTML framework, plug in the appropriate layout stylesheet for the design, tweak it and the job will be done. No more rewriting XHTML and CSS for every project; every time I start I will begin work with a solid foundation that I can tweak to fit the specifics of the job. Startup time will be next to nothing.&lt;/p&gt;

&lt;h2&gt;Back to our five main layouts&lt;/h2&gt;
&lt;p&gt;Okay, so the source code is fixed. What we want is to be able to plug in tried and tested layout stylesheets for reuse on future projects. I'm going to stick with fixed width layouts for this because they're simpler but using negative margins we could get these fluid with a bit of extra work.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navleft-1col.css&amp;amp;demo=true&quot;&gt;Vertical navigation with one content column&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navleft-2col.css&amp;amp;demo=true&quot;&gt;Vertical navigation with two columns of content&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navtop-1col.css&amp;amp;demo=true&quot;&gt;Horizontal navigation with one content column&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navtop-subright.css&amp;amp;demo=true&quot;&gt;Horizontal navigation with 2 columns of content&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navtop-localleft.css&amp;amp;demo=true&quot;&gt;Horizontal navigation with local navigation and one column of content&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/resources/css-framework/1.1/?css=layout-navtop-3col.css&amp;amp;demo=true&quot;&gt;Horizontal navigation with local navigation and 2 columns of content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Achieved: Level 2!&lt;/h2&gt;
&lt;p&gt;That's it - all the common layouts done with pluggable stylesheets and ready to go. They're set up in a kind of Zen Allotment for you to &lt;a href=&quot;/resources/css-framework/1.1/&quot;&gt;have a flick through&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;If you want to have a play with these yourself, &lt;a href=&quot;/resources/css-framework/1.1/css-framework.zip&quot;&gt;all the source files&lt;/a&gt; are packaged up in quick-grow zip file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;30/11/2007 UPDATE:&lt;/strong&gt; I've uploaded a slightly updated version of the framework. Very little has changed but a few people have voiced concerns over the lack of a formal license. Taking advice from &lt;a href=&quot;http://paul-m-jones.com&quot;&gt;Paul Jones&lt;/a&gt; (thanks!) I've added the new BSD terms, which are about as open as they come. I'm happy for people to use the framework for whatever they want. If you do, please drop me a line - I'd love to see what you come up with!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6/09/2010 UPDATE:&lt;/strong&gt; This article is &lt;a href=&quot;http://www.fatcow.com/edu/a-css-framework-be/&quot;&gt;now available in Belorussian&lt;/a&gt;, apparently, translated by Amanda Lynn.&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Find your node: Advanced XPATH commands</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/find-your-node-advanced-xpath-commands/index.html"/>
      <updated>2005-05-21T11:49:00+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/find-your-node-advanced-xpath-commands/find-your-node-advanced-xpath-commands</id>
      <content type="html">&lt;h2&gt;XSLT and XPATH?&lt;/h2&gt;

&lt;p&gt;
	All that XSLT does is applying code-templates on XML-nodes. In order to do this you need to find the right node.
	XPATH offers you an advanced toolkit to do that within an XSL-file.
&lt;/p&gt;

&lt;h2&gt;Go dynamic&lt;/h2&gt;

&lt;p&gt;
	XPATH and XSLT offer you dynamic features that remind more of a scripting-language rather than a stylesheet language,
	but keep in mind that all you can do is transforming the data you've got, so on a more abstract level it is
	still just styling up the content, just that this time you can choose what to display triggered with variables and
	control-structures.
&lt;/p&gt;

&lt;h3&gt;Locations in XPATH&lt;/h3&gt;

&lt;p&gt;
	Let's have a look into a simple, concatinated XML structure:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;root&amp;gt;
  &amp;lt;node&amp;gt;
    &amp;lt;subnode /&amp;gt;
    &amp;lt;subnode /&amp;gt;
    &amp;lt;subnode /&amp;gt;
  &amp;lt;/node&amp;gt;
  &amp;lt;node&amp;gt;
    &amp;lt;subnode&amp;gt;
      &amp;lt;subsubnode /&amp;gt;
    &amp;lt;/subnode&amp;gt;
  &amp;lt;/node&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	In order to navigate between the nodes you'll need to use Location Path Expressions.
	The basic ones work pretty much the same like in an operating-system enviroment.
	&lt;code class=&quot;inline&quot;&gt;/node/subnode&lt;/code&gt; for example would be the absolute path to all subnodes in the example above.
	&lt;br /&gt;
	On top of that XPATH offers you differnet types of axes like &lt;code class=&quot;inline&quot;&gt;ancestor&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;parent&lt;/code&gt; or
	&lt;code class=&quot;inline&quot;&gt;child&lt;/code&gt;. Even attributes can be selected with &lt;code class=&quot;inline&quot;&gt;attribute&lt;/code&gt; or you can use &lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt; as a wildcard.
	&lt;br /&gt;
	&lt;br /&gt;
	A full reference can be found at at &lt;a href=&quot;http://www.w3schools.com/xpath/xpath_location.asp&quot;&gt;w3schools&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Node-tests&lt;/h3&gt;

&lt;p&gt;
	On top of these axes you can test nodes against expressions that most of you might know as operators when
	using scripting- or programming-languages.
	&lt;br /&gt;
	There are expressions like &lt;code class=&quot;inline&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;-&lt;/code&gt; but also relational ones like &lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt; and
	&lt;code class=&quot;inline&quot;&gt;!=&lt;/code&gt;.
	Keep in mind that within valid XML &lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;&amp;lt;&lt;/code&gt; need to be escaped as &lt;code class=&quot;inline&quot;&gt;&amp;amp;gt;&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;&amp;amp;lt;&lt;/code&gt;.
&lt;/p&gt;

&lt;h3&gt;Functions in XPATH&lt;/h3&gt;

&lt;p&gt;
	For those that already used basic XSLT functionallity the functions won't be new, either.
 	The function &lt;code class=&quot;inline&quot;&gt;current()&lt;/code&gt; for example gives back the node that you are in now, maybe while within a loop.
	&lt;br /&gt;
	But there is also string-functions like &lt;code class=&quot;inline&quot;&gt;contains()&lt;/code&gt; or &lt;code class=&quot;inline&quot;&gt;substring()&lt;/code&gt;.
	Those can be used to manipulate the data that you will use for outputting data or locating nodes.
	&lt;br /&gt;
	&lt;br /&gt;
	Again, find a full list of XPATH functions at &lt;a href=&quot;http://www.w3schools.com/xpath/xpath_functions.asp&quot;&gt;w3schools&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Combine them!&lt;/h3&gt;

&lt;p&gt;
	Now you can combine the location path, the axes and the node tests to get the node you really want. The syntax is &lt;code class=&quot;inline&quot;&gt;axisname::nodetest[predicate]&lt;/code&gt;.
	&lt;br /&gt;
	I'll fit everything in one expression and you'll immediatly figure what I mean:
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;code class=&quot;inline&quot;&gt;current()/child::*[attribute::type='classic']&lt;/code&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	This expression selects all subnodes of the child-elements within the current node, that have the attribute type with the value 'classic'.
&lt;/p&gt;

&lt;h2&gt;An example please!&lt;/h2&gt;

&lt;p&gt;
	I know, that was pretty abstract, but now we'll move straight on to the practical example.
	We will use dynamic XPATH expressions to display a node-set, remember that when using server side techniques
	or client-side scripting this also could be triggered by a variable.&lt;br /&gt;
	Let's have a look at the piece of XML that will be transformed.
&lt;/p&gt;


&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;
&amp;lt;company_list&amp;gt;
  &amp;lt;company country=&quot;uk&quot;&amp;gt;
    &amp;lt;name&amp;gt;Company 1&amp;lt;/name&amp;gt;
    &amp;lt;sales&amp;gt;3200900&amp;lt;/sales&amp;gt;
    &amp;lt;employees&amp;gt;250&amp;lt;/employees&amp;gt;
  &amp;lt;/company&amp;gt;
  &amp;lt;company country=&quot;usa&quot;&amp;gt;
    &amp;lt;name&amp;gt;4th capitalist&amp;lt;/name&amp;gt;
    &amp;lt;sales&amp;gt;102310000&amp;lt;/sales&amp;gt;
    &amp;lt;employees&amp;gt;3050&amp;lt;/employees&amp;gt;
  &amp;lt;/company&amp;gt;

....

  &amp;lt;company country=&quot;uk&quot;&amp;gt;
    &amp;lt;name&amp;gt;UK stores&amp;lt;/name&amp;gt;
    &amp;lt;sales&amp;gt;12300000&amp;lt;/sales&amp;gt;
    &amp;lt;employees&amp;gt;3301&amp;lt;/employees&amp;gt;
  &amp;lt;/company&amp;gt;
  &amp;lt;company country=&quot;uk&quot;&amp;gt;
    &amp;lt;name&amp;gt;THEUSTOYSTORES&amp;lt;/name&amp;gt;
    &amp;lt;sales&amp;gt;22200000&amp;lt;/sales&amp;gt;
    &amp;lt;employees&amp;gt;18639&amp;lt;/employees&amp;gt;
  &amp;lt;/company&amp;gt;
&amp;lt;/company_list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	What we're going to do now is to find out the top 3 in the UK
	regarding the ration of employees and sales.
	&lt;br /&gt;
	Let's have a look at the XSL file:
&lt;/p&gt;


&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
  &amp;lt;xsl:template match=&quot;/company_list&quot;&amp;gt;
  &amp;lt;html&amp;gt;
    &amp;lt;body style=&quot;font-family: Arial&quot;&amp;gt;
      &amp;lt;h1&amp;gt;Top 3 stores in the uk regarding employees per sales&amp;lt;/h1&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;xsl:for-each select=&quot;company[@country = 'uk']&quot;&amp;gt;
        &amp;lt;xsl:sort select=&quot;sales div employees&quot;/&amp;gt;
          &amp;lt;xsl:if test=&quot;position() &amp;lt; 4&quot;&amp;gt;
            &amp;lt;li&amp;gt;
              Company: &amp;lt;xsl:value-of select=&quot;name&quot; /&amp;gt;
              &amp;lt;br /&amp;gt;
              Employees: &amp;lt;xsl:value-of select=&quot;employees&quot; /&amp;gt;
              &amp;lt;br /&amp;gt;
              Sales: &amp;lt;xsl:value-of select=&quot;sales&quot; /&amp;gt;
            &amp;lt;/li&amp;gt;
          &amp;lt;/xsl:if&amp;gt;
        &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Download the files here:
	&lt;br /&gt;
	&lt;a href=&quot;/resources/advanced_xpath/company_list.xml&quot;&gt;company_list.xml&lt;/a&gt;
	&lt;br /&gt;
	&lt;a href=&quot;/resources/advanced_xpath/uk_top3.xsl&quot;&gt;uk_top3.xsl&lt;/a&gt;
&lt;/p&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;
	That wasn't bad, but now imagine what you could do when you have dynamic variables.
	Especially with the MSXML toolkit or Sarissa that have the method selectSingleNode()
	these expressions are a piece of cake.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>XSL: the other way of styling up content</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/xsl-the-other-way-of-styling-up-content/index.html"/>
      <updated>2005-05-21T11:24:14+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/xsl-the-other-way-of-styling-up-content/xsl-the-other-way-of-styling-up-content</id>
      <content type="html">&lt;h2&gt;Buzz-words&lt;/h2&gt;

&lt;p&gt;
	Two of the best known acronyms around right now are XML and XSL, often being mentioned as &amp;#8220;the way to go&amp;#8221; or
	some abstract technique that stands for a new direction within the whole web.
	Rather than dealing with the languages itself in detail I'll try to give a pragmatic approach and to show basic examples
	how to transform data into browser-ready HTML.
&lt;/p&gt;



&lt;h2&gt;Data?&lt;/h2&gt;

&lt;p&gt;
	To transform XML we will need XML.
	&lt;br /&gt;
	&lt;br /&gt;
	To say it very simple, an XML-file is just structured Data.
	It works with tags as well, and we'll leave out that validating thing so far and be just working with well-formed XML.
	&lt;br /&gt;
	&lt;br /&gt;
	This article will deal with a piece of well formed XML code, that stands for data coming straight out of a database.
	&lt;a href=&quot;/resources/xsl_basic/example_loadxsl.zip&quot;&gt;Download the example files&lt;/a&gt;
&lt;/p&gt;





&lt;h2&gt;Getting started&lt;/h2&gt;


&lt;h3&gt;Simple way&lt;/h3&gt;

&lt;p&gt;
	Now we are going to transform that using XSLT. To do that we first have to know how we apply the XSL to the XML file.&lt;br /&gt;
	There is several ways to do that.&lt;br /&gt;
	First possibility would be to just have a reference to the XSL within the XML.
	The code for that would look like that:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;example.xsl&quot;?&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
	To test if the XSL is applied we will use an XSL-file that is doing nothing but having &amp;#8220;Hello world&amp;#8221; as output which looks like this:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
&amp;lt;xsl:output method=&quot;html&quot; indent=&quot;yes&quot; encoding=&quot;iso-8859-1&quot;/&amp;gt;

&amp;lt;xsl:template match=&quot;/&quot;&amp;gt;
  &amp;lt;test&amp;gt;Hello world&amp;lt;/test&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;Scripting way&lt;/h3&gt;

&lt;p&gt;
	Using IE and &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=3144b72b-b4f2-46da-b4b6-c5d7485f2b42&amp;amp;displaylang=en&quot;&gt;MSXML&lt;/a&gt;
	we could use Active Scripting to load the XML and the XSL. For example you could, in any XHMTL-File, embed a javascript contaiming code for that would look simmilar to this:
&lt;/p&gt;

&lt;pre&gt;
// Load XML file
xmlDoc = new ActiveXObject(&quot;Msxml2.DOMDocument.4.0&quot;);
xmlDoc.async = false;
xmlDoc.load(&quot;data.xml&quot;);

// Load XSL file
xslDoc = new ActiveXObject(&quot;Msxml2.FreeThreadedDOMDocument.4.0&quot;);
xslDoc.async = false;
xslDoc.load(&quot;example.xsl&quot;);

// XSL Transformation
xslTpl = new ActiveXObject(&quot;Msxml2.XSLTemplate.4.0&quot;);
xslTpl.stylesheet = xslDoc;
xslProc = xslTpl.createProcessor();
xslProc.input = xmlDoc;

xslProc.transform;
// Transform
document.write(xslProc.output);
&lt;/pre&gt;

&lt;p&gt;
	Like this the XSL and the XML will be pulled in without changing them in any kind of way.
	This obviously just works with javascript activated.
&lt;/p&gt;

&lt;p&gt;
	For Mozilla it would look like this:
&lt;/p&gt;

&lt;pre&gt;
function onload() {
  processor.importStylesheet(xslDoc);
}

function transform() {
  doc = processor.transformToDocument(xmlDoc);
  var xmls = new XMLSerializer();
  document.write(xmls.serializeToString(doc));
}

var processor = new XSLTProcessor();

var xslDoc =
document.implementation.createDocument(&quot;&quot;, &quot;xslDoc&quot;, null);
// onload handler
xslDoc.addEventListener(&quot;load&quot;, onload, false);
xslDoc.load(&quot;example.xsl&quot;);

var xmlDoc = document.
implementation.createDocument(&quot;&quot;, &quot;xmlDoc&quot;, null);
xmlDoc.addEventListener(&quot;load&quot;, transform, false);
xmlDoc.load(&quot;data.xml&quot;);
&lt;/pre&gt;


&lt;h3&gt;Server-side way&lt;/h3&gt;

&lt;p&gt;
	Rather than having all the transformation on the client, we also could use server-sided transformation using sablotron or something similar.
	The PHP-code for using Sablotron would loke like this:
&lt;/p&gt;

&lt;pre&gt;
//create the processor
$my_xslt=xslt_create();

//filepath on UNIX
$xml = getcwd().&quot;data.xml&quot;;
$xsl = getcwd().&quot;example.xsl&quot;;

//process the fiel and echo the result
echo xslt_process($my_xslt,$xml,$xsl,NULL,$arguments);

//free the processor
xslt_free($my_xslt);
&lt;/pre&gt;

&lt;p&gt;
	Note that on win32-systems you need to put in a path like this:
&lt;/p&gt;

&lt;pre&gt;$xml = &quot;file://&quot;.getcwd().&quot;data.xml&quot;;&lt;/pre&gt;

&lt;p&gt;
	See an example of a transformed file &lt;a href=&quot;/resources/xsl_basic/example_loadxsl/transform.php&quot;&gt;here&lt;/a&gt;
&lt;/p&gt;


&lt;h3&gt;So what do I do?&lt;/h3&gt;

&lt;p&gt;
	Depends. Obviously the stylesheet-reference is a nice and easy way, but you have to modify the XML-file and you cannot pass parameters or anything to the XSL,
	which would make things like expanding menus or highlighted table-rows possible.&lt;br /&gt;
	This is possible when using client-side scripting, but you have to provide a sophisticated script for IE and Mozilla.&lt;br /&gt;
	Anyway, for any client-side solution IE needs to have the MSXML-parser installed.
	&lt;br /&gt;
	So you could let the server do the work, IIS with MSXML or an apache with PHP and Sablotron should do the job.
	The output can be any kind of HTML and XHTML you specify. But that obviously requires a server.
&lt;/p&gt;




&lt;h2&gt;Ok, let&amp;#8217;s transform&lt;/h2&gt;

&lt;h3&gt;find your node&lt;/h3&gt;

&lt;p&gt;
	The first thing to get is that in XSL you can break the structure down to different templates and apply those on nodes of the
	DOM-tree found in the XML Document. That means that first you have to navigate through the DOM-tree using XPATH-commands.
	We will begin carefully with creating our basic output-document by inserting the title and finding the page element.
	The example files are &lt;a href=&quot;/resources/xsl_basic/example_transform_1.zip&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
   xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
&amp;lt;xsl:output method=&quot;html&quot; indent=&quot;yes&quot; encoding=&quot;iso-8859-1&quot;/&amp;gt;

&amp;lt;xsl:template match=&quot;/site&quot;&amp;gt;

  &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/title&quot; /&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;xsl:value-of select=&quot;current()/page/@label&quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	So according to our XML-Structure we navigate to the node named &amp;#8220;site&amp;#8221;, the slash in front of it indicates that it is child of the root element.
	With the &amp;#8220;xsl:value-of&amp;#8221; statement we get the data that is held in the selected node, in this case &amp;#8220;current()/title&amp;#8221; where current() points to the node that the template is applied on, in this case &amp;#8220;/site&amp;#8221;
	&lt;br /&gt;
	It is also possible to display values of attributes, in this case the &amp;#8220;label&amp;#8221;-attribute of the &amp;#8220;page&amp;#8221;-node
	&lt;br /&gt;&lt;br /&gt;
	&lt;a href=&quot;/resources/xsl_basic/example_transform_1/transform.php&quot;&gt;Check the output transformed with sablotron&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;templates&lt;/h3&gt;

&lt;p&gt;
	Now we'll apply templates to repeating nodes.
	Let's have a look on the new code first!
	Get the example files &lt;a href=&quot;/resources/xsl_basic/example_transform_2.zip&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&quot;1.0&quot;
  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;
&amp;lt;xsl:output method=&quot;html&quot; indent=&quot;yes&quot; encoding=&quot;iso-8859-1&quot;/&amp;gt;


&amp;lt;xsl:template match=&quot;/site&quot;&amp;gt;

  &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/title&quot; /&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;@import url(css/example.css);&amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
      &amp;lt;h1&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/page/@label&quot; /&amp;gt;&amp;lt;/h1&amp;gt;
      &amp;lt;xsl:for-each select=&quot;current()/page/contentblock&quot;&amp;gt;
        &amp;lt;xsl:call-template name=&quot;contentblock&quot;/&amp;gt;
      &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&quot;right&quot;&amp;gt;
      &amp;lt;xsl:for-each select=&quot;current()/page/box&quot;&amp;gt;
        &amp;lt;xsl:call-template name=&quot;box&quot;/&amp;gt;
      &amp;lt;/xsl:for-each&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&amp;lt;/xsl:template&amp;gt;


&amp;lt;xsl:template name=&quot;contentblock&quot;&amp;gt;

  &amp;lt;xsl:param name=&quot;url&quot; select=&quot;current()/image/@url&quot; /&amp;gt;
  &amp;lt;xsl:param name=&quot;width&quot; select=&quot;current()/image/param/@width&quot; /&amp;gt;
  &amp;lt;xsl:param name=&quot;height&quot; select=&quot;current()/image/param/@height&quot; /&amp;gt;

  &amp;lt;div class=&quot;contentblock&quot;&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/text&quot; /&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;div class=&quot;img&quot;&amp;gt;
      &amp;lt;img src=&quot;{$url}&quot; width=&quot;{$width}&quot; height=&quot;{$height}&quot; /&amp;gt;
      &amp;lt;p&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/image/subtitle&quot; /&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template name=&quot;box&quot;&amp;gt;
  &amp;lt;div class=&quot;box&quot;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/headline&quot; /&amp;gt;&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;xsl:value-of select=&quot;current()/boxtext&quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;

&lt;/pre&gt;

&lt;p&gt;
	Ok, first thing you should put your eye on is the code, that loops through all nodes with a particular name.
	I have used this code for all elements named &amp;#8220;contentblock&amp;#8221; and &amp;#8220;box&amp;#8221;.
	The xsl-command for looping in this case was
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;xsl:for-each select=&quot;current()/page/contentblock&quot;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Within this loop I have called different templates. The xsl-command for calling a template is
&lt;/p&gt;

&lt;pre&gt;
 &amp;lt;xsl:call-template name=&quot;contentblock&quot;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
	Annother interesting thing that you will have noticed is the possibility to insert values inline using &lt;code class=&quot;inline&quot;&gt;{@attribute}&lt;/code&gt;.

	Like this its becomes easily possible to insert values into attributes of tags,
	&lt;br /&gt;
	which would be not possible with
	&lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:value-of /&amp;gt;&lt;/code&gt;
	&lt;br /&gt;&lt;br /&gt;
	The other way to do that would be &lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:attribute /&amp;gt;&lt;/code&gt;, wich I hardly ever use, but feel free to search google for it.
	&lt;br /&gt;&lt;br /&gt;
	You also may have noticed that I introduced the use of variables by using
&lt;/p&gt;

&lt;pre&gt;&amp;lt;xsl:param name=&quot;width&quot; select=&quot;current()/image/param/@width&quot; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;
	The value of this variable can now be called with &lt;code class=&quot;inline&quot;&gt;{$width}&lt;/code&gt; or &lt;code class=&quot;inline&quot;&gt;&amp;lt;xsl:value-of select=&quot;$width&quot; /&amp;gt;&lt;/code&gt;.
	Using javascript or server-side techniques for XSLT, working with these variables becomes more important (and makes more sense as well).
	But I am afraid that this would be to much in-depth for just the start.
&lt;/p&gt;

&lt;h2&gt;Style it up&lt;/h2&gt;

&lt;p&gt;
	Now we have our XML-document already transformed into browser-ready HTML. All we need to add now is some CSS, and I guess you allready have noticed the &lt;code class=&quot;inline&quot;&gt;&amp;lt;style&amp;gt;@import url(css/exaple.css);&amp;lt;/style&amp;gt;&lt;/code&gt; in the document-head.
	Have a look at the &lt;a href=&quot;/resources/xsl_basic/example_transform_2/transform.php&quot;&gt;final output with sablotron&lt;/a&gt; or the &lt;a href=&quot;/resources/xsl_basic/example_transform_2/data_ref.xml&quot;&gt;xml file including a stylesheet-link&lt;/a&gt;!
&lt;/p&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;h3&gt;benefits&lt;/h3&gt;

&lt;p&gt;
	Even without looking into the really dynamic bits of XSL we can see that XSL is esspecially usefull when it comes to repeating data-patterns which have to be displayed as table-row or something simmilar.
	This keeps your data lean and the look seperated from the content. It gets even more interesting when we start using dynamic scripting to call the transformation and variables within the XSL.
	In addition it becomes possible to test the output without being sure about how the data will be transformed, either on the server or on the client side.
&lt;/p&gt;

&lt;h3&gt;problems&lt;/h3&gt;

&lt;p&gt;
	XSL on the client is not really implemented yet. To use dynamic processing you have to script solutions for every browser, and many don't even support it.
	This problem is solved when you are using XSLT on the server.
&lt;/p&gt;</content>
    </entry>

    <entry>
      <title>Modular CSS</title>
      <link href="http://contentwithstyle.pascalopitz.com/content/modular-css/index.html"/>
      <updated>2005-05-18T08:47:35+01:00</updated>
      <id>http://contentwithstyle.pascalopitz.com/content/modular-css/modular-css</id>
      <content type="html">&lt;p&gt;This isn't a new idea but looking at people's code it doesn't seem to be
a particularly widely used practice: modular CSS. That's a poncy name for
the very simple idea of grouping related styles into separate
stylesheets. The same set of tasks turn up on project after project and a
little careful thought can save hours of foundation work, allowing you to
get on with the serious business of turning a flat design into a web page
far more quickly.&lt;/p&gt;

&lt;p&gt;The broad groups that I use are: typography, forms, layout, navigation
and colour. These aren't set in stone and some projects require more or
less categories.&lt;/p&gt;

&lt;h2&gt;Common components&lt;/h2&gt;

&lt;h3&gt;Typography:&lt;/h3&gt;
&lt;p&gt;Basic styles for html elements with font faces, sizes, weights and
neutral colours. Bearing in mind that colour is dealt with elsewhere
you'll probably only find you need to make minor adjustments to these
between projects &amp;ndash; a couple of ems here and there, bold to normal
for a heading or two, that sort of thing. I limit the styles in this
sheet to root elements only &amp;ndash; no classes or ids. Anything requiring
a class is probably going to be site-sepcific and so belongs in layout.&lt;/p&gt;

&lt;h3&gt;Forms:&lt;/h3&gt;
&lt;p&gt;Forms are my least favourite things to try and style - the variation
between browsers often forces lots of ugly hacks and filters and I like
to keep these separate from the rest of the CSS.&lt;/p&gt;

&lt;h3&gt;Navigation:&lt;/h3&gt;
&lt;p&gt;How often have you coded a horizontal nav bar? Do it once, do it well,
and reuse it. You'll need to tweak a few bits and pieces but put it in
it's own CSS file and the bulk of the work will be a copy and paste away.&lt;/p&gt;

&lt;h3&gt;Layout:&lt;/h3&gt;
&lt;p&gt;This is where the majority of the work lies and most of it will be unique
to the project you're working on. I use naming conventions for my common
structural elements to ease the transition between sites when it come to
maintenance but that's off-topic for this article.&lt;/p&gt;

&lt;h3&gt;Colour scheme:&lt;/h3&gt;
&lt;p&gt;The only properties you'll need in here are: color, background and
border-color. Nothing else. Be sure to avoid adding any layout info here
&amp;ndash; a misplaced margin:0 can ruin your whole afternoon!&lt;/p&gt;
&lt;p&gt;An added benefit of the separate colour stylesheet is that you can write
yourself a nice neutral colour scheme and avoiding 10 hours per day of
staring at the eye-searing orange that your client is insisting on.&lt;/p&gt;
&lt;p&gt;On a similar note: &lt;a
href=&quot;http://www.stopdesign.com/log/2004/08/27/bleached.html&quot;&gt;Stop Design | Introducing Bleached&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Possibly of interest here: &lt;a
href=&quot;http://www.stuffandnonsense.co.uk/archives/black_and_white_day_five.html&quot;&gt;
And All the Malarkey | Black and white: Day five&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Putting them all together&lt;/h2&gt;
&lt;p&gt;I use a file called screen.css but it can be whatever you like. All
you're doing here is @importing your CSS modules to make up a complete
site. The @imports cover N4 degredation so you can just &amp;lt;link&amp;gt; to
screen.css from your HTML.&lt;/p&gt;
&lt;pre&gt;
/* typography styles */
@import url(&quot;typo.css&quot;);

/* form elements */
@import url(&quot;forms.css&quot;);

/* main layout */
@import url(&quot;layout.css&quot;);

/* navigation */
@import url(&quot;horizontal-nav.css&quot;);

/* colour scheme */
@import url(&quot;skin.css&quot;);
&lt;/pre&gt;
&lt;p&gt;For your print stylesheet you might choose to just import your
typography. Rather than having a print sheet that overrides all your
layout just have it import typo.css and nothing else. Job done. What
about handheld media types? Well you might want a flexible layout but the
same typography, form styling and colour scheme. Modular CSS comes to the
rescue and you only need to code a new layout and import it into
handheld.css along with typo.css, form.css and skin.css.&lt;/p&gt;
&lt;p&gt;This technique also allows you to unplug stylesheets globally from your
site without having to touch the HTML, adding a layer of abstraction
between content and style.&lt;/p&gt;
&lt;p&gt;Another happy side benefit of modular CSS is in the debugging &amp;ndash;
just comment out whole stylesheets until you isolate the problem and
focus your efforts there.&lt;/p&gt;
&lt;h3&gt;Addons:&lt;/h3&gt;
&lt;p&gt;You could plug in a development stylesheet with Andrew Krespanis' Global
Whitespace Reset (&lt;a
href=&quot;http://leftjustified.net/journal/2004/10/19/global-ws-reset&quot;&gt;Left Justified | Global White Space Reset&lt;/a&gt;).
Before you hand over just remove the import from screen.css and you're
good to go.&lt;/p&gt;
&lt;p&gt;If you find that your're reusing chunks of code from previous projects
for promo boxes of headers, consider placing them in their own stylesheet
for easier access later.&lt;/p&gt;
&lt;h2&gt;A word of caution&lt;/h2&gt;
&lt;p&gt;The more stylesheets you have the more you, the developer, have to
remember and keep track of. Where did you set the padding on that
element? It could be in a number of places and if you're not used to your
system, or you're not consistent with it, things can get frustrating. Set
yourself some guidelines and stick to them to give yourself a fighting
chance of taking an educated guess at where you might have placed your
rules. Consider putting these guidelines in comments at the top of your
files &amp;ndash; these can help to keep you on topic while you're coding as
well as setting you off running when you come to make maintenance changes
months down the line. Something as simple as sensible naming conventions
for your CSS files can be a great help.&lt;/p&gt;</content>
    </entry>

</feed>